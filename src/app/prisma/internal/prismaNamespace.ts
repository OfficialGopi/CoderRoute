
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
export const prismaVersion: PrismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Session: 'Session',
  DashboardStats: 'DashboardStats',
  Problem: 'Problem',
  TestCases: 'TestCases',
  ProblemCodeSnippets: 'ProblemCodeSnippets',
  ProblemReferenceSolutions: 'ProblemReferenceSolutions',
  ProblemBackgroundCode: 'ProblemBackgroundCode',
  Submission: 'Submission',
  TestCaseResult: 'TestCaseResult',
  ProblemSolved: 'ProblemSolved',
  Playlist: 'Playlist',
  ProblemInPlaylist: 'ProblemInPlaylist',
  Discussion: 'Discussion',
  Contest: 'Contest',
  ContestProblem: 'ContestProblem',
  ContestParticipation: 'ContestParticipation'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "session" | "dashboardStats" | "problem" | "testCases" | "problemCodeSnippets" | "problemReferenceSolutions" | "problemBackgroundCode" | "submission" | "testCaseResult" | "problemSolved" | "playlist" | "problemInPlaylist" | "discussion" | "contest" | "contestProblem" | "contestParticipation"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>
      fields: Prisma.SessionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>
        }
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number
        }
      }
    }
    DashboardStats: {
      payload: Prisma.$DashboardStatsPayload<ExtArgs>
      fields: Prisma.DashboardStatsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DashboardStatsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DashboardStatsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>
        }
        findFirst: {
          args: Prisma.DashboardStatsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DashboardStatsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>
        }
        findMany: {
          args: Prisma.DashboardStatsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>[]
        }
        create: {
          args: Prisma.DashboardStatsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>
        }
        createMany: {
          args: Prisma.DashboardStatsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DashboardStatsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>[]
        }
        delete: {
          args: Prisma.DashboardStatsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>
        }
        update: {
          args: Prisma.DashboardStatsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>
        }
        deleteMany: {
          args: Prisma.DashboardStatsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DashboardStatsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DashboardStatsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>[]
        }
        upsert: {
          args: Prisma.DashboardStatsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardStatsPayload>
        }
        aggregate: {
          args: Prisma.DashboardStatsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDashboardStats>
        }
        groupBy: {
          args: Prisma.DashboardStatsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DashboardStatsGroupByOutputType>[]
        }
        count: {
          args: Prisma.DashboardStatsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DashboardStatsCountAggregateOutputType> | number
        }
      }
    }
    Problem: {
      payload: Prisma.$ProblemPayload<ExtArgs>
      fields: Prisma.ProblemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProblemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProblemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>
        }
        findFirst: {
          args: Prisma.ProblemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProblemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>
        }
        findMany: {
          args: Prisma.ProblemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>[]
        }
        create: {
          args: Prisma.ProblemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>
        }
        createMany: {
          args: Prisma.ProblemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProblemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>[]
        }
        delete: {
          args: Prisma.ProblemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>
        }
        update: {
          args: Prisma.ProblemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>
        }
        deleteMany: {
          args: Prisma.ProblemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProblemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProblemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>[]
        }
        upsert: {
          args: Prisma.ProblemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemPayload>
        }
        aggregate: {
          args: Prisma.ProblemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProblem>
        }
        groupBy: {
          args: Prisma.ProblemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProblemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemCountAggregateOutputType> | number
        }
      }
    }
    TestCases: {
      payload: Prisma.$TestCasesPayload<ExtArgs>
      fields: Prisma.TestCasesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TestCasesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TestCasesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>
        }
        findFirst: {
          args: Prisma.TestCasesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TestCasesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>
        }
        findMany: {
          args: Prisma.TestCasesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>[]
        }
        create: {
          args: Prisma.TestCasesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>
        }
        createMany: {
          args: Prisma.TestCasesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TestCasesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>[]
        }
        delete: {
          args: Prisma.TestCasesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>
        }
        update: {
          args: Prisma.TestCasesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>
        }
        deleteMany: {
          args: Prisma.TestCasesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TestCasesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TestCasesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>[]
        }
        upsert: {
          args: Prisma.TestCasesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCasesPayload>
        }
        aggregate: {
          args: Prisma.TestCasesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTestCases>
        }
        groupBy: {
          args: Prisma.TestCasesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TestCasesGroupByOutputType>[]
        }
        count: {
          args: Prisma.TestCasesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TestCasesCountAggregateOutputType> | number
        }
      }
    }
    ProblemCodeSnippets: {
      payload: Prisma.$ProblemCodeSnippetsPayload<ExtArgs>
      fields: Prisma.ProblemCodeSnippetsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProblemCodeSnippetsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProblemCodeSnippetsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>
        }
        findFirst: {
          args: Prisma.ProblemCodeSnippetsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProblemCodeSnippetsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>
        }
        findMany: {
          args: Prisma.ProblemCodeSnippetsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>[]
        }
        create: {
          args: Prisma.ProblemCodeSnippetsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>
        }
        createMany: {
          args: Prisma.ProblemCodeSnippetsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProblemCodeSnippetsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>[]
        }
        delete: {
          args: Prisma.ProblemCodeSnippetsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>
        }
        update: {
          args: Prisma.ProblemCodeSnippetsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>
        }
        deleteMany: {
          args: Prisma.ProblemCodeSnippetsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProblemCodeSnippetsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProblemCodeSnippetsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>[]
        }
        upsert: {
          args: Prisma.ProblemCodeSnippetsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemCodeSnippetsPayload>
        }
        aggregate: {
          args: Prisma.ProblemCodeSnippetsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProblemCodeSnippets>
        }
        groupBy: {
          args: Prisma.ProblemCodeSnippetsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemCodeSnippetsGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProblemCodeSnippetsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemCodeSnippetsCountAggregateOutputType> | number
        }
      }
    }
    ProblemReferenceSolutions: {
      payload: Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>
      fields: Prisma.ProblemReferenceSolutionsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProblemReferenceSolutionsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProblemReferenceSolutionsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>
        }
        findFirst: {
          args: Prisma.ProblemReferenceSolutionsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProblemReferenceSolutionsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>
        }
        findMany: {
          args: Prisma.ProblemReferenceSolutionsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>[]
        }
        create: {
          args: Prisma.ProblemReferenceSolutionsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>
        }
        createMany: {
          args: Prisma.ProblemReferenceSolutionsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProblemReferenceSolutionsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>[]
        }
        delete: {
          args: Prisma.ProblemReferenceSolutionsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>
        }
        update: {
          args: Prisma.ProblemReferenceSolutionsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>
        }
        deleteMany: {
          args: Prisma.ProblemReferenceSolutionsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProblemReferenceSolutionsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProblemReferenceSolutionsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>[]
        }
        upsert: {
          args: Prisma.ProblemReferenceSolutionsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemReferenceSolutionsPayload>
        }
        aggregate: {
          args: Prisma.ProblemReferenceSolutionsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProblemReferenceSolutions>
        }
        groupBy: {
          args: Prisma.ProblemReferenceSolutionsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemReferenceSolutionsGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProblemReferenceSolutionsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemReferenceSolutionsCountAggregateOutputType> | number
        }
      }
    }
    ProblemBackgroundCode: {
      payload: Prisma.$ProblemBackgroundCodePayload<ExtArgs>
      fields: Prisma.ProblemBackgroundCodeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProblemBackgroundCodeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProblemBackgroundCodeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>
        }
        findFirst: {
          args: Prisma.ProblemBackgroundCodeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProblemBackgroundCodeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>
        }
        findMany: {
          args: Prisma.ProblemBackgroundCodeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>[]
        }
        create: {
          args: Prisma.ProblemBackgroundCodeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>
        }
        createMany: {
          args: Prisma.ProblemBackgroundCodeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProblemBackgroundCodeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>[]
        }
        delete: {
          args: Prisma.ProblemBackgroundCodeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>
        }
        update: {
          args: Prisma.ProblemBackgroundCodeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>
        }
        deleteMany: {
          args: Prisma.ProblemBackgroundCodeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProblemBackgroundCodeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProblemBackgroundCodeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>[]
        }
        upsert: {
          args: Prisma.ProblemBackgroundCodeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemBackgroundCodePayload>
        }
        aggregate: {
          args: Prisma.ProblemBackgroundCodeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProblemBackgroundCode>
        }
        groupBy: {
          args: Prisma.ProblemBackgroundCodeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemBackgroundCodeGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProblemBackgroundCodeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemBackgroundCodeCountAggregateOutputType> | number
        }
      }
    }
    Submission: {
      payload: Prisma.$SubmissionPayload<ExtArgs>
      fields: Prisma.SubmissionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>
        }
        findFirst: {
          args: Prisma.SubmissionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>
        }
        findMany: {
          args: Prisma.SubmissionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
        }
        create: {
          args: Prisma.SubmissionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>
        }
        createMany: {
          args: Prisma.SubmissionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
        }
        delete: {
          args: Prisma.SubmissionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>
        }
        update: {
          args: Prisma.SubmissionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>
        }
        deleteMany: {
          args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
        }
        upsert: {
          args: Prisma.SubmissionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubmissionPayload>
        }
        aggregate: {
          args: Prisma.SubmissionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSubmission>
        }
        groupBy: {
          args: Prisma.SubmissionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SubmissionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SubmissionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SubmissionCountAggregateOutputType> | number
        }
      }
    }
    TestCaseResult: {
      payload: Prisma.$TestCaseResultPayload<ExtArgs>
      fields: Prisma.TestCaseResultFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TestCaseResultFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TestCaseResultFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
        }
        findFirst: {
          args: Prisma.TestCaseResultFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TestCaseResultFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
        }
        findMany: {
          args: Prisma.TestCaseResultFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>[]
        }
        create: {
          args: Prisma.TestCaseResultCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
        }
        createMany: {
          args: Prisma.TestCaseResultCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TestCaseResultCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>[]
        }
        delete: {
          args: Prisma.TestCaseResultDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
        }
        update: {
          args: Prisma.TestCaseResultUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
        }
        deleteMany: {
          args: Prisma.TestCaseResultDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TestCaseResultUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TestCaseResultUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>[]
        }
        upsert: {
          args: Prisma.TestCaseResultUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
        }
        aggregate: {
          args: Prisma.TestCaseResultAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTestCaseResult>
        }
        groupBy: {
          args: Prisma.TestCaseResultGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TestCaseResultGroupByOutputType>[]
        }
        count: {
          args: Prisma.TestCaseResultCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TestCaseResultCountAggregateOutputType> | number
        }
      }
    }
    ProblemSolved: {
      payload: Prisma.$ProblemSolvedPayload<ExtArgs>
      fields: Prisma.ProblemSolvedFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProblemSolvedFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProblemSolvedFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
        }
        findFirst: {
          args: Prisma.ProblemSolvedFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProblemSolvedFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
        }
        findMany: {
          args: Prisma.ProblemSolvedFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>[]
        }
        create: {
          args: Prisma.ProblemSolvedCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
        }
        createMany: {
          args: Prisma.ProblemSolvedCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProblemSolvedCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>[]
        }
        delete: {
          args: Prisma.ProblemSolvedDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
        }
        update: {
          args: Prisma.ProblemSolvedUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
        }
        deleteMany: {
          args: Prisma.ProblemSolvedDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProblemSolvedUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProblemSolvedUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>[]
        }
        upsert: {
          args: Prisma.ProblemSolvedUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
        }
        aggregate: {
          args: Prisma.ProblemSolvedAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProblemSolved>
        }
        groupBy: {
          args: Prisma.ProblemSolvedGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemSolvedGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProblemSolvedCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemSolvedCountAggregateOutputType> | number
        }
      }
    }
    Playlist: {
      payload: Prisma.$PlaylistPayload<ExtArgs>
      fields: Prisma.PlaylistFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlaylistFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlaylistFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>
        }
        findFirst: {
          args: Prisma.PlaylistFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlaylistFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>
        }
        findMany: {
          args: Prisma.PlaylistFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
        }
        create: {
          args: Prisma.PlaylistCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>
        }
        createMany: {
          args: Prisma.PlaylistCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlaylistCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
        }
        delete: {
          args: Prisma.PlaylistDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>
        }
        update: {
          args: Prisma.PlaylistUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>
        }
        deleteMany: {
          args: Prisma.PlaylistDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlaylistUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlaylistUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
        }
        upsert: {
          args: Prisma.PlaylistUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlaylistPayload>
        }
        aggregate: {
          args: Prisma.PlaylistAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlaylist>
        }
        groupBy: {
          args: Prisma.PlaylistGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlaylistGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlaylistCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlaylistCountAggregateOutputType> | number
        }
      }
    }
    ProblemInPlaylist: {
      payload: Prisma.$ProblemInPlaylistPayload<ExtArgs>
      fields: Prisma.ProblemInPlaylistFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProblemInPlaylistFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProblemInPlaylistFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
        }
        findFirst: {
          args: Prisma.ProblemInPlaylistFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProblemInPlaylistFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
        }
        findMany: {
          args: Prisma.ProblemInPlaylistFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>[]
        }
        create: {
          args: Prisma.ProblemInPlaylistCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
        }
        createMany: {
          args: Prisma.ProblemInPlaylistCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProblemInPlaylistCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>[]
        }
        delete: {
          args: Prisma.ProblemInPlaylistDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
        }
        update: {
          args: Prisma.ProblemInPlaylistUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
        }
        deleteMany: {
          args: Prisma.ProblemInPlaylistDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProblemInPlaylistUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProblemInPlaylistUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>[]
        }
        upsert: {
          args: Prisma.ProblemInPlaylistUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
        }
        aggregate: {
          args: Prisma.ProblemInPlaylistAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProblemInPlaylist>
        }
        groupBy: {
          args: Prisma.ProblemInPlaylistGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemInPlaylistGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProblemInPlaylistCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProblemInPlaylistCountAggregateOutputType> | number
        }
      }
    }
    Discussion: {
      payload: Prisma.$DiscussionPayload<ExtArgs>
      fields: Prisma.DiscussionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DiscussionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DiscussionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>
        }
        findFirst: {
          args: Prisma.DiscussionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DiscussionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>
        }
        findMany: {
          args: Prisma.DiscussionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>[]
        }
        create: {
          args: Prisma.DiscussionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>
        }
        createMany: {
          args: Prisma.DiscussionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DiscussionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>[]
        }
        delete: {
          args: Prisma.DiscussionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>
        }
        update: {
          args: Prisma.DiscussionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>
        }
        deleteMany: {
          args: Prisma.DiscussionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DiscussionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DiscussionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>[]
        }
        upsert: {
          args: Prisma.DiscussionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DiscussionPayload>
        }
        aggregate: {
          args: Prisma.DiscussionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDiscussion>
        }
        groupBy: {
          args: Prisma.DiscussionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DiscussionGroupByOutputType>[]
        }
        count: {
          args: Prisma.DiscussionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DiscussionCountAggregateOutputType> | number
        }
      }
    }
    Contest: {
      payload: Prisma.$ContestPayload<ExtArgs>
      fields: Prisma.ContestFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ContestFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ContestFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>
        }
        findFirst: {
          args: Prisma.ContestFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ContestFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>
        }
        findMany: {
          args: Prisma.ContestFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>[]
        }
        create: {
          args: Prisma.ContestCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>
        }
        createMany: {
          args: Prisma.ContestCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ContestCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>[]
        }
        delete: {
          args: Prisma.ContestDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>
        }
        update: {
          args: Prisma.ContestUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>
        }
        deleteMany: {
          args: Prisma.ContestDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ContestUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ContestUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>[]
        }
        upsert: {
          args: Prisma.ContestUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestPayload>
        }
        aggregate: {
          args: Prisma.ContestAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateContest>
        }
        groupBy: {
          args: Prisma.ContestGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContestGroupByOutputType>[]
        }
        count: {
          args: Prisma.ContestCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContestCountAggregateOutputType> | number
        }
      }
    }
    ContestProblem: {
      payload: Prisma.$ContestProblemPayload<ExtArgs>
      fields: Prisma.ContestProblemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ContestProblemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ContestProblemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>
        }
        findFirst: {
          args: Prisma.ContestProblemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ContestProblemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>
        }
        findMany: {
          args: Prisma.ContestProblemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>[]
        }
        create: {
          args: Prisma.ContestProblemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>
        }
        createMany: {
          args: Prisma.ContestProblemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ContestProblemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>[]
        }
        delete: {
          args: Prisma.ContestProblemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>
        }
        update: {
          args: Prisma.ContestProblemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>
        }
        deleteMany: {
          args: Prisma.ContestProblemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ContestProblemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ContestProblemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>[]
        }
        upsert: {
          args: Prisma.ContestProblemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestProblemPayload>
        }
        aggregate: {
          args: Prisma.ContestProblemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateContestProblem>
        }
        groupBy: {
          args: Prisma.ContestProblemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContestProblemGroupByOutputType>[]
        }
        count: {
          args: Prisma.ContestProblemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContestProblemCountAggregateOutputType> | number
        }
      }
    }
    ContestParticipation: {
      payload: Prisma.$ContestParticipationPayload<ExtArgs>
      fields: Prisma.ContestParticipationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ContestParticipationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ContestParticipationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>
        }
        findFirst: {
          args: Prisma.ContestParticipationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ContestParticipationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>
        }
        findMany: {
          args: Prisma.ContestParticipationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>[]
        }
        create: {
          args: Prisma.ContestParticipationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>
        }
        createMany: {
          args: Prisma.ContestParticipationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ContestParticipationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>[]
        }
        delete: {
          args: Prisma.ContestParticipationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>
        }
        update: {
          args: Prisma.ContestParticipationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>
        }
        deleteMany: {
          args: Prisma.ContestParticipationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ContestParticipationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ContestParticipationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>[]
        }
        upsert: {
          args: Prisma.ContestParticipationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContestParticipationPayload>
        }
        aggregate: {
          args: Prisma.ContestParticipationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateContestParticipation>
        }
        groupBy: {
          args: Prisma.ContestParticipationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContestParticipationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ContestParticipationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContestParticipationCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  avatar: 'avatar',
  role: 'role',
  password: 'password',
  isEmailVerified: 'isEmailVerified',
  emailVerificationToken: 'emailVerificationToken',
  emailVerificationTokenExpiry: 'emailVerificationTokenExpiry',
  forgotPasswordToken: 'forgotPasswordToken',
  forgotPasswordTokenExpiry: 'forgotPasswordTokenExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  sessionExpiry: 'sessionExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const DashboardStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalSubmissions: 'totalSubmissions',
  problemsSolved: 'problemsSolved',
  easySolved: 'easySolved',
  mediumSolved: 'mediumSolved',
  hardSolved: 'hardSolved',
  accuracy: 'accuracy',
  lastActive: 'lastActive',
  updatedAt: 'updatedAt'
} as const

export type DashboardStatsScalarFieldEnum = (typeof DashboardStatsScalarFieldEnum)[keyof typeof DashboardStatsScalarFieldEnum]


export const ProblemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  tags: 'tags',
  constraints: 'constraints',
  hints: 'hints',
  editorial: 'editorial',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProblemScalarFieldEnum = (typeof ProblemScalarFieldEnum)[keyof typeof ProblemScalarFieldEnum]


export const TestCasesScalarFieldEnum = {
  id: 'id',
  problemId: 'problemId',
  input: 'input',
  output: 'output',
  explanation: 'explanation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TestCasesScalarFieldEnum = (typeof TestCasesScalarFieldEnum)[keyof typeof TestCasesScalarFieldEnum]


export const ProblemCodeSnippetsScalarFieldEnum = {
  id: 'id',
  problemId: 'problemId',
  language: 'language',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProblemCodeSnippetsScalarFieldEnum = (typeof ProblemCodeSnippetsScalarFieldEnum)[keyof typeof ProblemCodeSnippetsScalarFieldEnum]


export const ProblemReferenceSolutionsScalarFieldEnum = {
  id: 'id',
  problemId: 'problemId',
  language: 'language',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProblemReferenceSolutionsScalarFieldEnum = (typeof ProblemReferenceSolutionsScalarFieldEnum)[keyof typeof ProblemReferenceSolutionsScalarFieldEnum]


export const ProblemBackgroundCodeScalarFieldEnum = {
  id: 'id',
  problemId: 'problemId',
  language: 'language',
  code: 'code',
  whereToWriteCode: 'whereToWriteCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProblemBackgroundCodeScalarFieldEnum = (typeof ProblemBackgroundCodeScalarFieldEnum)[keyof typeof ProblemBackgroundCodeScalarFieldEnum]


export const SubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  problemId: 'problemId',
  sourceCode: 'sourceCode',
  language: 'language',
  stdin: 'stdin',
  stdout: 'stdout',
  stderr: 'stderr',
  compileOutput: 'compileOutput',
  status: 'status',
  memory: 'memory',
  time: 'time',
  contestId: 'contestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


export const TestCaseResultScalarFieldEnum = {
  id: 'id',
  submissionId: 'submissionId',
  testCase: 'testCase',
  passed: 'passed',
  stdout: 'stdout',
  expected: 'expected',
  stderr: 'stderr',
  compileOutput: 'compileOutput',
  status: 'status',
  memory: 'memory',
  time: 'time',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TestCaseResultScalarFieldEnum = (typeof TestCaseResultScalarFieldEnum)[keyof typeof TestCaseResultScalarFieldEnum]


export const ProblemSolvedScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProblemSolvedScalarFieldEnum = (typeof ProblemSolvedScalarFieldEnum)[keyof typeof ProblemSolvedScalarFieldEnum]


export const PlaylistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PlaylistScalarFieldEnum = (typeof PlaylistScalarFieldEnum)[keyof typeof PlaylistScalarFieldEnum]


export const ProblemInPlaylistScalarFieldEnum = {
  id: 'id',
  playlistId: 'playlistId',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProblemInPlaylistScalarFieldEnum = (typeof ProblemInPlaylistScalarFieldEnum)[keyof typeof ProblemInPlaylistScalarFieldEnum]


export const DiscussionScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  problemId: 'problemId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted'
} as const

export type DiscussionScalarFieldEnum = (typeof DiscussionScalarFieldEnum)[keyof typeof DiscussionScalarFieldEnum]


export const ContestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  visibility: 'visibility',
  isRated: 'isRated',
  durationMinutes: 'durationMinutes',
  rules: 'rules',
  creatorId: 'creatorId',
  deleted: 'deleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ContestScalarFieldEnum = (typeof ContestScalarFieldEnum)[keyof typeof ContestScalarFieldEnum]


export const ContestProblemScalarFieldEnum = {
  id: 'id',
  contestId: 'contestId',
  problemId: 'problemId',
  order: 'order',
  points: 'points'
} as const

export type ContestProblemScalarFieldEnum = (typeof ContestProblemScalarFieldEnum)[keyof typeof ContestProblemScalarFieldEnum]


export const ContestParticipationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contestId: 'contestId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  score: 'score',
  submissionId: 'submissionId'
} as const

export type ContestParticipationScalarFieldEnum = (typeof ContestParticipationScalarFieldEnum)[keyof typeof ContestParticipationScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'USER_ROLE'
 */
export type EnumUSER_ROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'USER_ROLE'>
    


/**
 * Reference to a field of type 'USER_ROLE[]'
 */
export type ListEnumUSER_ROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'USER_ROLE[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'DIFFICULTY'
 */
export type EnumDIFFICULTYFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DIFFICULTY'>
    


/**
 * Reference to a field of type 'DIFFICULTY[]'
 */
export type ListEnumDIFFICULTYFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DIFFICULTY[]'>
    


/**
 * Reference to a field of type 'LANGUAGE'
 */
export type EnumLANGUAGEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LANGUAGE'>
    


/**
 * Reference to a field of type 'LANGUAGE[]'
 */
export type ListEnumLANGUAGEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LANGUAGE[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  session?: Prisma.SessionOmit
  dashboardStats?: Prisma.DashboardStatsOmit
  problem?: Prisma.ProblemOmit
  testCases?: Prisma.TestCasesOmit
  problemCodeSnippets?: Prisma.ProblemCodeSnippetsOmit
  problemReferenceSolutions?: Prisma.ProblemReferenceSolutionsOmit
  problemBackgroundCode?: Prisma.ProblemBackgroundCodeOmit
  submission?: Prisma.SubmissionOmit
  testCaseResult?: Prisma.TestCaseResultOmit
  problemSolved?: Prisma.ProblemSolvedOmit
  playlist?: Prisma.PlaylistOmit
  problemInPlaylist?: Prisma.ProblemInPlaylistOmit
  discussion?: Prisma.DiscussionOmit
  contest?: Prisma.ContestOmit
  contestProblem?: Prisma.ContestProblemOmit
  contestParticipation?: Prisma.ContestParticipationOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

