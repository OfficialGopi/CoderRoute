
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProblemReferenceSolutions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProblemReferenceSolutions
 * 
 */
export type ProblemReferenceSolutionsModel = runtime.Types.Result.DefaultSelection<Prisma.$ProblemReferenceSolutionsPayload>

export type AggregateProblemReferenceSolutions = {
  _count: ProblemReferenceSolutionsCountAggregateOutputType | null
  _avg: ProblemReferenceSolutionsAvgAggregateOutputType | null
  _sum: ProblemReferenceSolutionsSumAggregateOutputType | null
  _min: ProblemReferenceSolutionsMinAggregateOutputType | null
  _max: ProblemReferenceSolutionsMaxAggregateOutputType | null
}

export type ProblemReferenceSolutionsAvgAggregateOutputType = {
  id: number | null
}

export type ProblemReferenceSolutionsSumAggregateOutputType = {
  id: number | null
}

export type ProblemReferenceSolutionsMinAggregateOutputType = {
  id: number | null
  problemId: string | null
  language: $Enums.LANGUAGE | null
  code: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemReferenceSolutionsMaxAggregateOutputType = {
  id: number | null
  problemId: string | null
  language: $Enums.LANGUAGE | null
  code: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemReferenceSolutionsCountAggregateOutputType = {
  id: number
  problemId: number
  language: number
  code: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProblemReferenceSolutionsAvgAggregateInputType = {
  id?: true
}

export type ProblemReferenceSolutionsSumAggregateInputType = {
  id?: true
}

export type ProblemReferenceSolutionsMinAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemReferenceSolutionsMaxAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemReferenceSolutionsCountAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProblemReferenceSolutionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemReferenceSolutions to aggregate.
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemReferenceSolutions to fetch.
   */
  orderBy?: Prisma.ProblemReferenceSolutionsOrderByWithRelationInput | Prisma.ProblemReferenceSolutionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemReferenceSolutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemReferenceSolutions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProblemReferenceSolutions
  **/
  _count?: true | ProblemReferenceSolutionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProblemReferenceSolutionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProblemReferenceSolutionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProblemReferenceSolutionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProblemReferenceSolutionsMaxAggregateInputType
}

export type GetProblemReferenceSolutionsAggregateType<T extends ProblemReferenceSolutionsAggregateArgs> = {
      [P in keyof T & keyof AggregateProblemReferenceSolutions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProblemReferenceSolutions[P]>
    : Prisma.GetScalarType<T[P], AggregateProblemReferenceSolutions[P]>
}




export type ProblemReferenceSolutionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  orderBy?: Prisma.ProblemReferenceSolutionsOrderByWithAggregationInput | Prisma.ProblemReferenceSolutionsOrderByWithAggregationInput[]
  by: Prisma.ProblemReferenceSolutionsScalarFieldEnum[] | Prisma.ProblemReferenceSolutionsScalarFieldEnum
  having?: Prisma.ProblemReferenceSolutionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProblemReferenceSolutionsCountAggregateInputType | true
  _avg?: ProblemReferenceSolutionsAvgAggregateInputType
  _sum?: ProblemReferenceSolutionsSumAggregateInputType
  _min?: ProblemReferenceSolutionsMinAggregateInputType
  _max?: ProblemReferenceSolutionsMaxAggregateInputType
}

export type ProblemReferenceSolutionsGroupByOutputType = {
  id: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  createdAt: Date
  updatedAt: Date
  _count: ProblemReferenceSolutionsCountAggregateOutputType | null
  _avg: ProblemReferenceSolutionsAvgAggregateOutputType | null
  _sum: ProblemReferenceSolutionsSumAggregateOutputType | null
  _min: ProblemReferenceSolutionsMinAggregateOutputType | null
  _max: ProblemReferenceSolutionsMaxAggregateOutputType | null
}

type GetProblemReferenceSolutionsGroupByPayload<T extends ProblemReferenceSolutionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProblemReferenceSolutionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProblemReferenceSolutionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProblemReferenceSolutionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProblemReferenceSolutionsGroupByOutputType[P]>
      }
    >
  > 



export type ProblemReferenceSolutionsWhereInput = {
  AND?: Prisma.ProblemReferenceSolutionsWhereInput | Prisma.ProblemReferenceSolutionsWhereInput[]
  OR?: Prisma.ProblemReferenceSolutionsWhereInput[]
  NOT?: Prisma.ProblemReferenceSolutionsWhereInput | Prisma.ProblemReferenceSolutionsWhereInput[]
  id?: Prisma.IntFilter<"ProblemReferenceSolutions"> | number
  problemId?: Prisma.StringFilter<"ProblemReferenceSolutions"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemReferenceSolutions"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemReferenceSolutions"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemReferenceSolutions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemReferenceSolutions"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type ProblemReferenceSolutionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type ProblemReferenceSolutionsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  problemId_language?: Prisma.ProblemReferenceSolutionsProblemIdLanguageCompoundUniqueInput
  AND?: Prisma.ProblemReferenceSolutionsWhereInput | Prisma.ProblemReferenceSolutionsWhereInput[]
  OR?: Prisma.ProblemReferenceSolutionsWhereInput[]
  NOT?: Prisma.ProblemReferenceSolutionsWhereInput | Prisma.ProblemReferenceSolutionsWhereInput[]
  problemId?: Prisma.StringFilter<"ProblemReferenceSolutions"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemReferenceSolutions"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemReferenceSolutions"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemReferenceSolutions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemReferenceSolutions"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id" | "problemId_language">

export type ProblemReferenceSolutionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProblemReferenceSolutionsCountOrderByAggregateInput
  _avg?: Prisma.ProblemReferenceSolutionsAvgOrderByAggregateInput
  _max?: Prisma.ProblemReferenceSolutionsMaxOrderByAggregateInput
  _min?: Prisma.ProblemReferenceSolutionsMinOrderByAggregateInput
  _sum?: Prisma.ProblemReferenceSolutionsSumOrderByAggregateInput
}

export type ProblemReferenceSolutionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProblemReferenceSolutionsScalarWhereWithAggregatesInput | Prisma.ProblemReferenceSolutionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProblemReferenceSolutionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProblemReferenceSolutionsScalarWhereWithAggregatesInput | Prisma.ProblemReferenceSolutionsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ProblemReferenceSolutions"> | number
  problemId?: Prisma.StringWithAggregatesFilter<"ProblemReferenceSolutions"> | string
  language?: Prisma.EnumLANGUAGEWithAggregatesFilter<"ProblemReferenceSolutions"> | $Enums.LANGUAGE
  code?: Prisma.StringWithAggregatesFilter<"ProblemReferenceSolutions"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemReferenceSolutions"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemReferenceSolutions"> | Date | string
}

export type ProblemReferenceSolutionsCreateInput = {
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutReferenceSolutionsInput
}

export type ProblemReferenceSolutionsUncheckedCreateInput = {
  id?: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemReferenceSolutionsUpdateInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutReferenceSolutionsNestedInput
}

export type ProblemReferenceSolutionsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemReferenceSolutionsCreateManyInput = {
  id?: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemReferenceSolutionsUpdateManyMutationInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemReferenceSolutionsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemReferenceSolutionsListRelationFilter = {
  every?: Prisma.ProblemReferenceSolutionsWhereInput
  some?: Prisma.ProblemReferenceSolutionsWhereInput
  none?: Prisma.ProblemReferenceSolutionsWhereInput
}

export type ProblemReferenceSolutionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProblemReferenceSolutionsProblemIdLanguageCompoundUniqueInput = {
  problemId: string
  language: $Enums.LANGUAGE
}

export type ProblemReferenceSolutionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemReferenceSolutionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProblemReferenceSolutionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemReferenceSolutionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemReferenceSolutionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput> | Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput[] | Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput | Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemReferenceSolutionsCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
}

export type ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput> | Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput[] | Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput | Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemReferenceSolutionsCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
}

export type ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput> | Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput[] | Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput | Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemReferenceSolutionsUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemReferenceSolutionsUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemReferenceSolutionsCreateManyProblemInputEnvelope
  set?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  disconnect?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  delete?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  connect?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  update?: Prisma.ProblemReferenceSolutionsUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemReferenceSolutionsUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemReferenceSolutionsUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemReferenceSolutionsUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemReferenceSolutionsScalarWhereInput | Prisma.ProblemReferenceSolutionsScalarWhereInput[]
}

export type ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput> | Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput[] | Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput | Prisma.ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemReferenceSolutionsUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemReferenceSolutionsUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemReferenceSolutionsCreateManyProblemInputEnvelope
  set?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  disconnect?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  delete?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  connect?: Prisma.ProblemReferenceSolutionsWhereUniqueInput | Prisma.ProblemReferenceSolutionsWhereUniqueInput[]
  update?: Prisma.ProblemReferenceSolutionsUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemReferenceSolutionsUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemReferenceSolutionsUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemReferenceSolutionsUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemReferenceSolutionsScalarWhereInput | Prisma.ProblemReferenceSolutionsScalarWhereInput[]
}

export type ProblemReferenceSolutionsCreateWithoutProblemInput = {
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput = {
  id?: number
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemReferenceSolutionsCreateOrConnectWithoutProblemInput = {
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput>
}

export type ProblemReferenceSolutionsCreateManyProblemInputEnvelope = {
  data: Prisma.ProblemReferenceSolutionsCreateManyProblemInput | Prisma.ProblemReferenceSolutionsCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type ProblemReferenceSolutionsUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedCreateWithoutProblemInput>
}

export type ProblemReferenceSolutionsUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateWithoutProblemInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateWithoutProblemInput>
}

export type ProblemReferenceSolutionsUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.ProblemReferenceSolutionsScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateManyMutationInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemInput>
}

export type ProblemReferenceSolutionsScalarWhereInput = {
  AND?: Prisma.ProblemReferenceSolutionsScalarWhereInput | Prisma.ProblemReferenceSolutionsScalarWhereInput[]
  OR?: Prisma.ProblemReferenceSolutionsScalarWhereInput[]
  NOT?: Prisma.ProblemReferenceSolutionsScalarWhereInput | Prisma.ProblemReferenceSolutionsScalarWhereInput[]
  id?: Prisma.IntFilter<"ProblemReferenceSolutions"> | number
  problemId?: Prisma.StringFilter<"ProblemReferenceSolutions"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemReferenceSolutions"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemReferenceSolutions"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemReferenceSolutions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemReferenceSolutions"> | Date | string
}

export type ProblemReferenceSolutionsCreateManyProblemInput = {
  id?: number
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemReferenceSolutionsUpdateWithoutProblemInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemReferenceSolutionsUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProblemReferenceSolutionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemReferenceSolutions"]>

export type ProblemReferenceSolutionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemReferenceSolutions"]>

export type ProblemReferenceSolutionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemReferenceSolutions"]>

export type ProblemReferenceSolutionsSelectScalar = {
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProblemReferenceSolutionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "problemId" | "language" | "code" | "createdAt" | "updatedAt", ExtArgs["result"]["problemReferenceSolutions"]>
export type ProblemReferenceSolutionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemReferenceSolutionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemReferenceSolutionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $ProblemReferenceSolutionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProblemReferenceSolutions"
  objects: {
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    problemId: string
    language: $Enums.LANGUAGE
    code: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["problemReferenceSolutions"]>
  composites: {}
}

export type ProblemReferenceSolutionsGetPayload<S extends boolean | null | undefined | ProblemReferenceSolutionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload, S>

export type ProblemReferenceSolutionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProblemReferenceSolutionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProblemReferenceSolutionsCountAggregateInputType | true
  }

export interface ProblemReferenceSolutionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemReferenceSolutions'], meta: { name: 'ProblemReferenceSolutions' } }
  /**
   * Find zero or one ProblemReferenceSolutions that matches the filter.
   * @param {ProblemReferenceSolutionsFindUniqueArgs} args - Arguments to find a ProblemReferenceSolutions
   * @example
   * // Get one ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProblemReferenceSolutionsFindUniqueArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProblemReferenceSolutions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProblemReferenceSolutionsFindUniqueOrThrowArgs} args - Arguments to find a ProblemReferenceSolutions
   * @example
   * // Get one ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProblemReferenceSolutionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemReferenceSolutions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsFindFirstArgs} args - Arguments to find a ProblemReferenceSolutions
   * @example
   * // Get one ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProblemReferenceSolutionsFindFirstArgs>(args?: Prisma.SelectSubset<T, ProblemReferenceSolutionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemReferenceSolutions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsFindFirstOrThrowArgs} args - Arguments to find a ProblemReferenceSolutions
   * @example
   * // Get one ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProblemReferenceSolutionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProblemReferenceSolutionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProblemReferenceSolutions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.findMany()
   * 
   * // Get first 10 ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const problemReferenceSolutionsWithIdOnly = await prisma.problemReferenceSolutions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProblemReferenceSolutionsFindManyArgs>(args?: Prisma.SelectSubset<T, ProblemReferenceSolutionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProblemReferenceSolutions.
   * @param {ProblemReferenceSolutionsCreateArgs} args - Arguments to create a ProblemReferenceSolutions.
   * @example
   * // Create one ProblemReferenceSolutions
   * const ProblemReferenceSolutions = await prisma.problemReferenceSolutions.create({
   *   data: {
   *     // ... data to create a ProblemReferenceSolutions
   *   }
   * })
   * 
   */
  create<T extends ProblemReferenceSolutionsCreateArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsCreateArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProblemReferenceSolutions.
   * @param {ProblemReferenceSolutionsCreateManyArgs} args - Arguments to create many ProblemReferenceSolutions.
   * @example
   * // Create many ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProblemReferenceSolutionsCreateManyArgs>(args?: Prisma.SelectSubset<T, ProblemReferenceSolutionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProblemReferenceSolutions and returns the data saved in the database.
   * @param {ProblemReferenceSolutionsCreateManyAndReturnArgs} args - Arguments to create many ProblemReferenceSolutions.
   * @example
   * // Create many ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProblemReferenceSolutions and only return the `id`
   * const problemReferenceSolutionsWithIdOnly = await prisma.problemReferenceSolutions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProblemReferenceSolutionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProblemReferenceSolutionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProblemReferenceSolutions.
   * @param {ProblemReferenceSolutionsDeleteArgs} args - Arguments to delete one ProblemReferenceSolutions.
   * @example
   * // Delete one ProblemReferenceSolutions
   * const ProblemReferenceSolutions = await prisma.problemReferenceSolutions.delete({
   *   where: {
   *     // ... filter to delete one ProblemReferenceSolutions
   *   }
   * })
   * 
   */
  delete<T extends ProblemReferenceSolutionsDeleteArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsDeleteArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProblemReferenceSolutions.
   * @param {ProblemReferenceSolutionsUpdateArgs} args - Arguments to update one ProblemReferenceSolutions.
   * @example
   * // Update one ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProblemReferenceSolutionsUpdateArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsUpdateArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProblemReferenceSolutions.
   * @param {ProblemReferenceSolutionsDeleteManyArgs} args - Arguments to filter ProblemReferenceSolutions to delete.
   * @example
   * // Delete a few ProblemReferenceSolutions
   * const { count } = await prisma.problemReferenceSolutions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProblemReferenceSolutionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProblemReferenceSolutionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemReferenceSolutions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProblemReferenceSolutionsUpdateManyArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemReferenceSolutions and returns the data updated in the database.
   * @param {ProblemReferenceSolutionsUpdateManyAndReturnArgs} args - Arguments to update many ProblemReferenceSolutions.
   * @example
   * // Update many ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProblemReferenceSolutions and only return the `id`
   * const problemReferenceSolutionsWithIdOnly = await prisma.problemReferenceSolutions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProblemReferenceSolutionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProblemReferenceSolutions.
   * @param {ProblemReferenceSolutionsUpsertArgs} args - Arguments to update or create a ProblemReferenceSolutions.
   * @example
   * // Update or create a ProblemReferenceSolutions
   * const problemReferenceSolutions = await prisma.problemReferenceSolutions.upsert({
   *   create: {
   *     // ... data to create a ProblemReferenceSolutions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProblemReferenceSolutions we want to update
   *   }
   * })
   */
  upsert<T extends ProblemReferenceSolutionsUpsertArgs>(args: Prisma.SelectSubset<T, ProblemReferenceSolutionsUpsertArgs<ExtArgs>>): Prisma.Prisma__ProblemReferenceSolutionsClient<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProblemReferenceSolutions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsCountArgs} args - Arguments to filter ProblemReferenceSolutions to count.
   * @example
   * // Count the number of ProblemReferenceSolutions
   * const count = await prisma.problemReferenceSolutions.count({
   *   where: {
   *     // ... the filter for the ProblemReferenceSolutions we want to count
   *   }
   * })
  **/
  count<T extends ProblemReferenceSolutionsCountArgs>(
    args?: Prisma.Subset<T, ProblemReferenceSolutionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProblemReferenceSolutionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProblemReferenceSolutions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProblemReferenceSolutionsAggregateArgs>(args: Prisma.Subset<T, ProblemReferenceSolutionsAggregateArgs>): Prisma.PrismaPromise<GetProblemReferenceSolutionsAggregateType<T>>

  /**
   * Group by ProblemReferenceSolutions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemReferenceSolutionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProblemReferenceSolutionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProblemReferenceSolutionsGroupByArgs['orderBy'] }
      : { orderBy?: ProblemReferenceSolutionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProblemReferenceSolutionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemReferenceSolutionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProblemReferenceSolutions model
 */
readonly fields: ProblemReferenceSolutionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProblemReferenceSolutions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProblemReferenceSolutionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProblemReferenceSolutions model
 */
export interface ProblemReferenceSolutionsFieldRefs {
  readonly id: Prisma.FieldRef<"ProblemReferenceSolutions", 'Int'>
  readonly problemId: Prisma.FieldRef<"ProblemReferenceSolutions", 'String'>
  readonly language: Prisma.FieldRef<"ProblemReferenceSolutions", 'LANGUAGE'>
  readonly code: Prisma.FieldRef<"ProblemReferenceSolutions", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProblemReferenceSolutions", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProblemReferenceSolutions", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProblemReferenceSolutions findUnique
 */
export type ProblemReferenceSolutionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemReferenceSolutions to fetch.
   */
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
}

/**
 * ProblemReferenceSolutions findUniqueOrThrow
 */
export type ProblemReferenceSolutionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemReferenceSolutions to fetch.
   */
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
}

/**
 * ProblemReferenceSolutions findFirst
 */
export type ProblemReferenceSolutionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemReferenceSolutions to fetch.
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemReferenceSolutions to fetch.
   */
  orderBy?: Prisma.ProblemReferenceSolutionsOrderByWithRelationInput | Prisma.ProblemReferenceSolutionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemReferenceSolutions.
   */
  cursor?: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemReferenceSolutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemReferenceSolutions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemReferenceSolutions.
   */
  distinct?: Prisma.ProblemReferenceSolutionsScalarFieldEnum | Prisma.ProblemReferenceSolutionsScalarFieldEnum[]
}

/**
 * ProblemReferenceSolutions findFirstOrThrow
 */
export type ProblemReferenceSolutionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemReferenceSolutions to fetch.
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemReferenceSolutions to fetch.
   */
  orderBy?: Prisma.ProblemReferenceSolutionsOrderByWithRelationInput | Prisma.ProblemReferenceSolutionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemReferenceSolutions.
   */
  cursor?: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemReferenceSolutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemReferenceSolutions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemReferenceSolutions.
   */
  distinct?: Prisma.ProblemReferenceSolutionsScalarFieldEnum | Prisma.ProblemReferenceSolutionsScalarFieldEnum[]
}

/**
 * ProblemReferenceSolutions findMany
 */
export type ProblemReferenceSolutionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemReferenceSolutions to fetch.
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemReferenceSolutions to fetch.
   */
  orderBy?: Prisma.ProblemReferenceSolutionsOrderByWithRelationInput | Prisma.ProblemReferenceSolutionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProblemReferenceSolutions.
   */
  cursor?: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemReferenceSolutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemReferenceSolutions.
   */
  skip?: number
  distinct?: Prisma.ProblemReferenceSolutionsScalarFieldEnum | Prisma.ProblemReferenceSolutionsScalarFieldEnum[]
}

/**
 * ProblemReferenceSolutions create
 */
export type ProblemReferenceSolutionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * The data needed to create a ProblemReferenceSolutions.
   */
  data: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateInput, Prisma.ProblemReferenceSolutionsUncheckedCreateInput>
}

/**
 * ProblemReferenceSolutions createMany
 */
export type ProblemReferenceSolutionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProblemReferenceSolutions.
   */
  data: Prisma.ProblemReferenceSolutionsCreateManyInput | Prisma.ProblemReferenceSolutionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProblemReferenceSolutions createManyAndReturn
 */
export type ProblemReferenceSolutionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * The data used to create many ProblemReferenceSolutions.
   */
  data: Prisma.ProblemReferenceSolutionsCreateManyInput | Prisma.ProblemReferenceSolutionsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemReferenceSolutions update
 */
export type ProblemReferenceSolutionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * The data needed to update a ProblemReferenceSolutions.
   */
  data: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateInput>
  /**
   * Choose, which ProblemReferenceSolutions to update.
   */
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
}

/**
 * ProblemReferenceSolutions updateMany
 */
export type ProblemReferenceSolutionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProblemReferenceSolutions.
   */
  data: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateManyMutationInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateManyInput>
  /**
   * Filter which ProblemReferenceSolutions to update
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * Limit how many ProblemReferenceSolutions to update.
   */
  limit?: number
}

/**
 * ProblemReferenceSolutions updateManyAndReturn
 */
export type ProblemReferenceSolutionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * The data used to update ProblemReferenceSolutions.
   */
  data: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateManyMutationInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateManyInput>
  /**
   * Filter which ProblemReferenceSolutions to update
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * Limit how many ProblemReferenceSolutions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemReferenceSolutions upsert
 */
export type ProblemReferenceSolutionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * The filter to search for the ProblemReferenceSolutions to update in case it exists.
   */
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  /**
   * In case the ProblemReferenceSolutions found by the `where` argument doesn't exist, create a new ProblemReferenceSolutions with this data.
   */
  create: Prisma.XOR<Prisma.ProblemReferenceSolutionsCreateInput, Prisma.ProblemReferenceSolutionsUncheckedCreateInput>
  /**
   * In case the ProblemReferenceSolutions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProblemReferenceSolutionsUpdateInput, Prisma.ProblemReferenceSolutionsUncheckedUpdateInput>
}

/**
 * ProblemReferenceSolutions delete
 */
export type ProblemReferenceSolutionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  /**
   * Filter which ProblemReferenceSolutions to delete.
   */
  where: Prisma.ProblemReferenceSolutionsWhereUniqueInput
}

/**
 * ProblemReferenceSolutions deleteMany
 */
export type ProblemReferenceSolutionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemReferenceSolutions to delete
   */
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  /**
   * Limit how many ProblemReferenceSolutions to delete.
   */
  limit?: number
}

/**
 * ProblemReferenceSolutions without action
 */
export type ProblemReferenceSolutionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
}
