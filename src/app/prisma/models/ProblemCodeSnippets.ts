
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProblemCodeSnippets` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProblemCodeSnippets
 * 
 */
export type ProblemCodeSnippetsModel = runtime.Types.Result.DefaultSelection<Prisma.$ProblemCodeSnippetsPayload>

export type AggregateProblemCodeSnippets = {
  _count: ProblemCodeSnippetsCountAggregateOutputType | null
  _avg: ProblemCodeSnippetsAvgAggregateOutputType | null
  _sum: ProblemCodeSnippetsSumAggregateOutputType | null
  _min: ProblemCodeSnippetsMinAggregateOutputType | null
  _max: ProblemCodeSnippetsMaxAggregateOutputType | null
}

export type ProblemCodeSnippetsAvgAggregateOutputType = {
  id: number | null
}

export type ProblemCodeSnippetsSumAggregateOutputType = {
  id: number | null
}

export type ProblemCodeSnippetsMinAggregateOutputType = {
  id: number | null
  problemId: string | null
  language: $Enums.LANGUAGE | null
  code: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemCodeSnippetsMaxAggregateOutputType = {
  id: number | null
  problemId: string | null
  language: $Enums.LANGUAGE | null
  code: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemCodeSnippetsCountAggregateOutputType = {
  id: number
  problemId: number
  language: number
  code: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProblemCodeSnippetsAvgAggregateInputType = {
  id?: true
}

export type ProblemCodeSnippetsSumAggregateInputType = {
  id?: true
}

export type ProblemCodeSnippetsMinAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemCodeSnippetsMaxAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemCodeSnippetsCountAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProblemCodeSnippetsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemCodeSnippets to aggregate.
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemCodeSnippets to fetch.
   */
  orderBy?: Prisma.ProblemCodeSnippetsOrderByWithRelationInput | Prisma.ProblemCodeSnippetsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProblemCodeSnippetsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemCodeSnippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemCodeSnippets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProblemCodeSnippets
  **/
  _count?: true | ProblemCodeSnippetsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProblemCodeSnippetsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProblemCodeSnippetsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProblemCodeSnippetsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProblemCodeSnippetsMaxAggregateInputType
}

export type GetProblemCodeSnippetsAggregateType<T extends ProblemCodeSnippetsAggregateArgs> = {
      [P in keyof T & keyof AggregateProblemCodeSnippets]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProblemCodeSnippets[P]>
    : Prisma.GetScalarType<T[P], AggregateProblemCodeSnippets[P]>
}




export type ProblemCodeSnippetsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemCodeSnippetsWhereInput
  orderBy?: Prisma.ProblemCodeSnippetsOrderByWithAggregationInput | Prisma.ProblemCodeSnippetsOrderByWithAggregationInput[]
  by: Prisma.ProblemCodeSnippetsScalarFieldEnum[] | Prisma.ProblemCodeSnippetsScalarFieldEnum
  having?: Prisma.ProblemCodeSnippetsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProblemCodeSnippetsCountAggregateInputType | true
  _avg?: ProblemCodeSnippetsAvgAggregateInputType
  _sum?: ProblemCodeSnippetsSumAggregateInputType
  _min?: ProblemCodeSnippetsMinAggregateInputType
  _max?: ProblemCodeSnippetsMaxAggregateInputType
}

export type ProblemCodeSnippetsGroupByOutputType = {
  id: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  createdAt: Date
  updatedAt: Date
  _count: ProblemCodeSnippetsCountAggregateOutputType | null
  _avg: ProblemCodeSnippetsAvgAggregateOutputType | null
  _sum: ProblemCodeSnippetsSumAggregateOutputType | null
  _min: ProblemCodeSnippetsMinAggregateOutputType | null
  _max: ProblemCodeSnippetsMaxAggregateOutputType | null
}

type GetProblemCodeSnippetsGroupByPayload<T extends ProblemCodeSnippetsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProblemCodeSnippetsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProblemCodeSnippetsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProblemCodeSnippetsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProblemCodeSnippetsGroupByOutputType[P]>
      }
    >
  > 



export type ProblemCodeSnippetsWhereInput = {
  AND?: Prisma.ProblemCodeSnippetsWhereInput | Prisma.ProblemCodeSnippetsWhereInput[]
  OR?: Prisma.ProblemCodeSnippetsWhereInput[]
  NOT?: Prisma.ProblemCodeSnippetsWhereInput | Prisma.ProblemCodeSnippetsWhereInput[]
  id?: Prisma.IntFilter<"ProblemCodeSnippets"> | number
  problemId?: Prisma.StringFilter<"ProblemCodeSnippets"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemCodeSnippets"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemCodeSnippets"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemCodeSnippets"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemCodeSnippets"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type ProblemCodeSnippetsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type ProblemCodeSnippetsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  problemId_language?: Prisma.ProblemCodeSnippetsProblemIdLanguageCompoundUniqueInput
  AND?: Prisma.ProblemCodeSnippetsWhereInput | Prisma.ProblemCodeSnippetsWhereInput[]
  OR?: Prisma.ProblemCodeSnippetsWhereInput[]
  NOT?: Prisma.ProblemCodeSnippetsWhereInput | Prisma.ProblemCodeSnippetsWhereInput[]
  problemId?: Prisma.StringFilter<"ProblemCodeSnippets"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemCodeSnippets"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemCodeSnippets"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemCodeSnippets"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemCodeSnippets"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id" | "problemId_language">

export type ProblemCodeSnippetsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProblemCodeSnippetsCountOrderByAggregateInput
  _avg?: Prisma.ProblemCodeSnippetsAvgOrderByAggregateInput
  _max?: Prisma.ProblemCodeSnippetsMaxOrderByAggregateInput
  _min?: Prisma.ProblemCodeSnippetsMinOrderByAggregateInput
  _sum?: Prisma.ProblemCodeSnippetsSumOrderByAggregateInput
}

export type ProblemCodeSnippetsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProblemCodeSnippetsScalarWhereWithAggregatesInput | Prisma.ProblemCodeSnippetsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProblemCodeSnippetsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProblemCodeSnippetsScalarWhereWithAggregatesInput | Prisma.ProblemCodeSnippetsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ProblemCodeSnippets"> | number
  problemId?: Prisma.StringWithAggregatesFilter<"ProblemCodeSnippets"> | string
  language?: Prisma.EnumLANGUAGEWithAggregatesFilter<"ProblemCodeSnippets"> | $Enums.LANGUAGE
  code?: Prisma.StringWithAggregatesFilter<"ProblemCodeSnippets"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemCodeSnippets"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemCodeSnippets"> | Date | string
}

export type ProblemCodeSnippetsCreateInput = {
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutCodeSnippetsInput
}

export type ProblemCodeSnippetsUncheckedCreateInput = {
  id?: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemCodeSnippetsUpdateInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutCodeSnippetsNestedInput
}

export type ProblemCodeSnippetsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemCodeSnippetsCreateManyInput = {
  id?: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemCodeSnippetsUpdateManyMutationInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemCodeSnippetsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemCodeSnippetsListRelationFilter = {
  every?: Prisma.ProblemCodeSnippetsWhereInput
  some?: Prisma.ProblemCodeSnippetsWhereInput
  none?: Prisma.ProblemCodeSnippetsWhereInput
}

export type ProblemCodeSnippetsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProblemCodeSnippetsProblemIdLanguageCompoundUniqueInput = {
  problemId: string
  language: $Enums.LANGUAGE
}

export type ProblemCodeSnippetsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemCodeSnippetsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProblemCodeSnippetsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemCodeSnippetsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemCodeSnippetsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProblemCodeSnippetsCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput> | Prisma.ProblemCodeSnippetsCreateWithoutProblemInput[] | Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput | Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemCodeSnippetsCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
}

export type ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput> | Prisma.ProblemCodeSnippetsCreateWithoutProblemInput[] | Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput | Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemCodeSnippetsCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
}

export type ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput> | Prisma.ProblemCodeSnippetsCreateWithoutProblemInput[] | Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput | Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemCodeSnippetsUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemCodeSnippetsUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemCodeSnippetsCreateManyProblemInputEnvelope
  set?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  disconnect?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  delete?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  connect?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  update?: Prisma.ProblemCodeSnippetsUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemCodeSnippetsUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemCodeSnippetsUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemCodeSnippetsUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemCodeSnippetsScalarWhereInput | Prisma.ProblemCodeSnippetsScalarWhereInput[]
}

export type ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput> | Prisma.ProblemCodeSnippetsCreateWithoutProblemInput[] | Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput | Prisma.ProblemCodeSnippetsCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemCodeSnippetsUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemCodeSnippetsUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemCodeSnippetsCreateManyProblemInputEnvelope
  set?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  disconnect?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  delete?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  connect?: Prisma.ProblemCodeSnippetsWhereUniqueInput | Prisma.ProblemCodeSnippetsWhereUniqueInput[]
  update?: Prisma.ProblemCodeSnippetsUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemCodeSnippetsUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemCodeSnippetsUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemCodeSnippetsUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemCodeSnippetsScalarWhereInput | Prisma.ProblemCodeSnippetsScalarWhereInput[]
}

export type EnumLANGUAGEFieldUpdateOperationsInput = {
  set?: $Enums.LANGUAGE
}

export type ProblemCodeSnippetsCreateWithoutProblemInput = {
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemCodeSnippetsUncheckedCreateWithoutProblemInput = {
  id?: number
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemCodeSnippetsCreateOrConnectWithoutProblemInput = {
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput>
}

export type ProblemCodeSnippetsCreateManyProblemInputEnvelope = {
  data: Prisma.ProblemCodeSnippetsCreateManyProblemInput | Prisma.ProblemCodeSnippetsCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type ProblemCodeSnippetsUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedCreateWithoutProblemInput>
}

export type ProblemCodeSnippetsUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateWithoutProblemInput, Prisma.ProblemCodeSnippetsUncheckedUpdateWithoutProblemInput>
}

export type ProblemCodeSnippetsUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.ProblemCodeSnippetsScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateManyMutationInput, Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemInput>
}

export type ProblemCodeSnippetsScalarWhereInput = {
  AND?: Prisma.ProblemCodeSnippetsScalarWhereInput | Prisma.ProblemCodeSnippetsScalarWhereInput[]
  OR?: Prisma.ProblemCodeSnippetsScalarWhereInput[]
  NOT?: Prisma.ProblemCodeSnippetsScalarWhereInput | Prisma.ProblemCodeSnippetsScalarWhereInput[]
  id?: Prisma.IntFilter<"ProblemCodeSnippets"> | number
  problemId?: Prisma.StringFilter<"ProblemCodeSnippets"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemCodeSnippets"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemCodeSnippets"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemCodeSnippets"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemCodeSnippets"> | Date | string
}

export type ProblemCodeSnippetsCreateManyProblemInput = {
  id?: number
  language: $Enums.LANGUAGE
  code: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemCodeSnippetsUpdateWithoutProblemInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemCodeSnippetsUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProblemCodeSnippetsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemCodeSnippets"]>

export type ProblemCodeSnippetsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemCodeSnippets"]>

export type ProblemCodeSnippetsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemCodeSnippets"]>

export type ProblemCodeSnippetsSelectScalar = {
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProblemCodeSnippetsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "problemId" | "language" | "code" | "createdAt" | "updatedAt", ExtArgs["result"]["problemCodeSnippets"]>
export type ProblemCodeSnippetsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemCodeSnippetsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemCodeSnippetsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $ProblemCodeSnippetsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProblemCodeSnippets"
  objects: {
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    problemId: string
    language: $Enums.LANGUAGE
    code: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["problemCodeSnippets"]>
  composites: {}
}

export type ProblemCodeSnippetsGetPayload<S extends boolean | null | undefined | ProblemCodeSnippetsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload, S>

export type ProblemCodeSnippetsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProblemCodeSnippetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProblemCodeSnippetsCountAggregateInputType | true
  }

export interface ProblemCodeSnippetsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemCodeSnippets'], meta: { name: 'ProblemCodeSnippets' } }
  /**
   * Find zero or one ProblemCodeSnippets that matches the filter.
   * @param {ProblemCodeSnippetsFindUniqueArgs} args - Arguments to find a ProblemCodeSnippets
   * @example
   * // Get one ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProblemCodeSnippetsFindUniqueArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProblemCodeSnippets that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProblemCodeSnippetsFindUniqueOrThrowArgs} args - Arguments to find a ProblemCodeSnippets
   * @example
   * // Get one ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProblemCodeSnippetsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemCodeSnippets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsFindFirstArgs} args - Arguments to find a ProblemCodeSnippets
   * @example
   * // Get one ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProblemCodeSnippetsFindFirstArgs>(args?: Prisma.SelectSubset<T, ProblemCodeSnippetsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemCodeSnippets that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsFindFirstOrThrowArgs} args - Arguments to find a ProblemCodeSnippets
   * @example
   * // Get one ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProblemCodeSnippetsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProblemCodeSnippetsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProblemCodeSnippets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.findMany()
   * 
   * // Get first 10 ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const problemCodeSnippetsWithIdOnly = await prisma.problemCodeSnippets.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProblemCodeSnippetsFindManyArgs>(args?: Prisma.SelectSubset<T, ProblemCodeSnippetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProblemCodeSnippets.
   * @param {ProblemCodeSnippetsCreateArgs} args - Arguments to create a ProblemCodeSnippets.
   * @example
   * // Create one ProblemCodeSnippets
   * const ProblemCodeSnippets = await prisma.problemCodeSnippets.create({
   *   data: {
   *     // ... data to create a ProblemCodeSnippets
   *   }
   * })
   * 
   */
  create<T extends ProblemCodeSnippetsCreateArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsCreateArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProblemCodeSnippets.
   * @param {ProblemCodeSnippetsCreateManyArgs} args - Arguments to create many ProblemCodeSnippets.
   * @example
   * // Create many ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProblemCodeSnippetsCreateManyArgs>(args?: Prisma.SelectSubset<T, ProblemCodeSnippetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProblemCodeSnippets and returns the data saved in the database.
   * @param {ProblemCodeSnippetsCreateManyAndReturnArgs} args - Arguments to create many ProblemCodeSnippets.
   * @example
   * // Create many ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProblemCodeSnippets and only return the `id`
   * const problemCodeSnippetsWithIdOnly = await prisma.problemCodeSnippets.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProblemCodeSnippetsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProblemCodeSnippetsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProblemCodeSnippets.
   * @param {ProblemCodeSnippetsDeleteArgs} args - Arguments to delete one ProblemCodeSnippets.
   * @example
   * // Delete one ProblemCodeSnippets
   * const ProblemCodeSnippets = await prisma.problemCodeSnippets.delete({
   *   where: {
   *     // ... filter to delete one ProblemCodeSnippets
   *   }
   * })
   * 
   */
  delete<T extends ProblemCodeSnippetsDeleteArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsDeleteArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProblemCodeSnippets.
   * @param {ProblemCodeSnippetsUpdateArgs} args - Arguments to update one ProblemCodeSnippets.
   * @example
   * // Update one ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProblemCodeSnippetsUpdateArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsUpdateArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProblemCodeSnippets.
   * @param {ProblemCodeSnippetsDeleteManyArgs} args - Arguments to filter ProblemCodeSnippets to delete.
   * @example
   * // Delete a few ProblemCodeSnippets
   * const { count } = await prisma.problemCodeSnippets.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProblemCodeSnippetsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProblemCodeSnippetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemCodeSnippets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProblemCodeSnippetsUpdateManyArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemCodeSnippets and returns the data updated in the database.
   * @param {ProblemCodeSnippetsUpdateManyAndReturnArgs} args - Arguments to update many ProblemCodeSnippets.
   * @example
   * // Update many ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProblemCodeSnippets and only return the `id`
   * const problemCodeSnippetsWithIdOnly = await prisma.problemCodeSnippets.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProblemCodeSnippetsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProblemCodeSnippets.
   * @param {ProblemCodeSnippetsUpsertArgs} args - Arguments to update or create a ProblemCodeSnippets.
   * @example
   * // Update or create a ProblemCodeSnippets
   * const problemCodeSnippets = await prisma.problemCodeSnippets.upsert({
   *   create: {
   *     // ... data to create a ProblemCodeSnippets
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProblemCodeSnippets we want to update
   *   }
   * })
   */
  upsert<T extends ProblemCodeSnippetsUpsertArgs>(args: Prisma.SelectSubset<T, ProblemCodeSnippetsUpsertArgs<ExtArgs>>): Prisma.Prisma__ProblemCodeSnippetsClient<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProblemCodeSnippets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsCountArgs} args - Arguments to filter ProblemCodeSnippets to count.
   * @example
   * // Count the number of ProblemCodeSnippets
   * const count = await prisma.problemCodeSnippets.count({
   *   where: {
   *     // ... the filter for the ProblemCodeSnippets we want to count
   *   }
   * })
  **/
  count<T extends ProblemCodeSnippetsCountArgs>(
    args?: Prisma.Subset<T, ProblemCodeSnippetsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProblemCodeSnippetsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProblemCodeSnippets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProblemCodeSnippetsAggregateArgs>(args: Prisma.Subset<T, ProblemCodeSnippetsAggregateArgs>): Prisma.PrismaPromise<GetProblemCodeSnippetsAggregateType<T>>

  /**
   * Group by ProblemCodeSnippets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCodeSnippetsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProblemCodeSnippetsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProblemCodeSnippetsGroupByArgs['orderBy'] }
      : { orderBy?: ProblemCodeSnippetsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProblemCodeSnippetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemCodeSnippetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProblemCodeSnippets model
 */
readonly fields: ProblemCodeSnippetsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProblemCodeSnippets.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProblemCodeSnippetsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProblemCodeSnippets model
 */
export interface ProblemCodeSnippetsFieldRefs {
  readonly id: Prisma.FieldRef<"ProblemCodeSnippets", 'Int'>
  readonly problemId: Prisma.FieldRef<"ProblemCodeSnippets", 'String'>
  readonly language: Prisma.FieldRef<"ProblemCodeSnippets", 'LANGUAGE'>
  readonly code: Prisma.FieldRef<"ProblemCodeSnippets", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProblemCodeSnippets", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProblemCodeSnippets", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProblemCodeSnippets findUnique
 */
export type ProblemCodeSnippetsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemCodeSnippets to fetch.
   */
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
}

/**
 * ProblemCodeSnippets findUniqueOrThrow
 */
export type ProblemCodeSnippetsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemCodeSnippets to fetch.
   */
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
}

/**
 * ProblemCodeSnippets findFirst
 */
export type ProblemCodeSnippetsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemCodeSnippets to fetch.
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemCodeSnippets to fetch.
   */
  orderBy?: Prisma.ProblemCodeSnippetsOrderByWithRelationInput | Prisma.ProblemCodeSnippetsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemCodeSnippets.
   */
  cursor?: Prisma.ProblemCodeSnippetsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemCodeSnippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemCodeSnippets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemCodeSnippets.
   */
  distinct?: Prisma.ProblemCodeSnippetsScalarFieldEnum | Prisma.ProblemCodeSnippetsScalarFieldEnum[]
}

/**
 * ProblemCodeSnippets findFirstOrThrow
 */
export type ProblemCodeSnippetsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemCodeSnippets to fetch.
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemCodeSnippets to fetch.
   */
  orderBy?: Prisma.ProblemCodeSnippetsOrderByWithRelationInput | Prisma.ProblemCodeSnippetsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemCodeSnippets.
   */
  cursor?: Prisma.ProblemCodeSnippetsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemCodeSnippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemCodeSnippets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemCodeSnippets.
   */
  distinct?: Prisma.ProblemCodeSnippetsScalarFieldEnum | Prisma.ProblemCodeSnippetsScalarFieldEnum[]
}

/**
 * ProblemCodeSnippets findMany
 */
export type ProblemCodeSnippetsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * Filter, which ProblemCodeSnippets to fetch.
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemCodeSnippets to fetch.
   */
  orderBy?: Prisma.ProblemCodeSnippetsOrderByWithRelationInput | Prisma.ProblemCodeSnippetsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProblemCodeSnippets.
   */
  cursor?: Prisma.ProblemCodeSnippetsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemCodeSnippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemCodeSnippets.
   */
  skip?: number
  distinct?: Prisma.ProblemCodeSnippetsScalarFieldEnum | Prisma.ProblemCodeSnippetsScalarFieldEnum[]
}

/**
 * ProblemCodeSnippets create
 */
export type ProblemCodeSnippetsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * The data needed to create a ProblemCodeSnippets.
   */
  data: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateInput, Prisma.ProblemCodeSnippetsUncheckedCreateInput>
}

/**
 * ProblemCodeSnippets createMany
 */
export type ProblemCodeSnippetsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProblemCodeSnippets.
   */
  data: Prisma.ProblemCodeSnippetsCreateManyInput | Prisma.ProblemCodeSnippetsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProblemCodeSnippets createManyAndReturn
 */
export type ProblemCodeSnippetsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * The data used to create many ProblemCodeSnippets.
   */
  data: Prisma.ProblemCodeSnippetsCreateManyInput | Prisma.ProblemCodeSnippetsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemCodeSnippets update
 */
export type ProblemCodeSnippetsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * The data needed to update a ProblemCodeSnippets.
   */
  data: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateInput, Prisma.ProblemCodeSnippetsUncheckedUpdateInput>
  /**
   * Choose, which ProblemCodeSnippets to update.
   */
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
}

/**
 * ProblemCodeSnippets updateMany
 */
export type ProblemCodeSnippetsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProblemCodeSnippets.
   */
  data: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateManyMutationInput, Prisma.ProblemCodeSnippetsUncheckedUpdateManyInput>
  /**
   * Filter which ProblemCodeSnippets to update
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * Limit how many ProblemCodeSnippets to update.
   */
  limit?: number
}

/**
 * ProblemCodeSnippets updateManyAndReturn
 */
export type ProblemCodeSnippetsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * The data used to update ProblemCodeSnippets.
   */
  data: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateManyMutationInput, Prisma.ProblemCodeSnippetsUncheckedUpdateManyInput>
  /**
   * Filter which ProblemCodeSnippets to update
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * Limit how many ProblemCodeSnippets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemCodeSnippets upsert
 */
export type ProblemCodeSnippetsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * The filter to search for the ProblemCodeSnippets to update in case it exists.
   */
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
  /**
   * In case the ProblemCodeSnippets found by the `where` argument doesn't exist, create a new ProblemCodeSnippets with this data.
   */
  create: Prisma.XOR<Prisma.ProblemCodeSnippetsCreateInput, Prisma.ProblemCodeSnippetsUncheckedCreateInput>
  /**
   * In case the ProblemCodeSnippets was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProblemCodeSnippetsUpdateInput, Prisma.ProblemCodeSnippetsUncheckedUpdateInput>
}

/**
 * ProblemCodeSnippets delete
 */
export type ProblemCodeSnippetsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  /**
   * Filter which ProblemCodeSnippets to delete.
   */
  where: Prisma.ProblemCodeSnippetsWhereUniqueInput
}

/**
 * ProblemCodeSnippets deleteMany
 */
export type ProblemCodeSnippetsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemCodeSnippets to delete
   */
  where?: Prisma.ProblemCodeSnippetsWhereInput
  /**
   * Limit how many ProblemCodeSnippets to delete.
   */
  limit?: number
}

/**
 * ProblemCodeSnippets without action
 */
export type ProblemCodeSnippetsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
}
