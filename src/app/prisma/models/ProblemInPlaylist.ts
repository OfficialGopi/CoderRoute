
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProblemInPlaylist` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProblemInPlaylist
 * 
 */
export type ProblemInPlaylistModel = runtime.Types.Result.DefaultSelection<Prisma.$ProblemInPlaylistPayload>

export type AggregateProblemInPlaylist = {
  _count: ProblemInPlaylistCountAggregateOutputType | null
  _min: ProblemInPlaylistMinAggregateOutputType | null
  _max: ProblemInPlaylistMaxAggregateOutputType | null
}

export type ProblemInPlaylistMinAggregateOutputType = {
  id: string | null
  playlistId: string | null
  problemId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemInPlaylistMaxAggregateOutputType = {
  id: string | null
  playlistId: string | null
  problemId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemInPlaylistCountAggregateOutputType = {
  id: number
  playlistId: number
  problemId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProblemInPlaylistMinAggregateInputType = {
  id?: true
  playlistId?: true
  problemId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemInPlaylistMaxAggregateInputType = {
  id?: true
  playlistId?: true
  problemId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemInPlaylistCountAggregateInputType = {
  id?: true
  playlistId?: true
  problemId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProblemInPlaylistAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemInPlaylist to aggregate.
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemInPlaylists to fetch.
   */
  orderBy?: Prisma.ProblemInPlaylistOrderByWithRelationInput | Prisma.ProblemInPlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProblemInPlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemInPlaylists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemInPlaylists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProblemInPlaylists
  **/
  _count?: true | ProblemInPlaylistCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProblemInPlaylistMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProblemInPlaylistMaxAggregateInputType
}

export type GetProblemInPlaylistAggregateType<T extends ProblemInPlaylistAggregateArgs> = {
      [P in keyof T & keyof AggregateProblemInPlaylist]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProblemInPlaylist[P]>
    : Prisma.GetScalarType<T[P], AggregateProblemInPlaylist[P]>
}




export type ProblemInPlaylistGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemInPlaylistWhereInput
  orderBy?: Prisma.ProblemInPlaylistOrderByWithAggregationInput | Prisma.ProblemInPlaylistOrderByWithAggregationInput[]
  by: Prisma.ProblemInPlaylistScalarFieldEnum[] | Prisma.ProblemInPlaylistScalarFieldEnum
  having?: Prisma.ProblemInPlaylistScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProblemInPlaylistCountAggregateInputType | true
  _min?: ProblemInPlaylistMinAggregateInputType
  _max?: ProblemInPlaylistMaxAggregateInputType
}

export type ProblemInPlaylistGroupByOutputType = {
  id: string
  playlistId: string
  problemId: string
  createdAt: Date
  updatedAt: Date
  _count: ProblemInPlaylistCountAggregateOutputType | null
  _min: ProblemInPlaylistMinAggregateOutputType | null
  _max: ProblemInPlaylistMaxAggregateOutputType | null
}

type GetProblemInPlaylistGroupByPayload<T extends ProblemInPlaylistGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProblemInPlaylistGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProblemInPlaylistGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProblemInPlaylistGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProblemInPlaylistGroupByOutputType[P]>
      }
    >
  > 



export type ProblemInPlaylistWhereInput = {
  AND?: Prisma.ProblemInPlaylistWhereInput | Prisma.ProblemInPlaylistWhereInput[]
  OR?: Prisma.ProblemInPlaylistWhereInput[]
  NOT?: Prisma.ProblemInPlaylistWhereInput | Prisma.ProblemInPlaylistWhereInput[]
  id?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  playlistId?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  problemId?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemInPlaylist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemInPlaylist"> | Date | string
  playlist?: Prisma.XOR<Prisma.PlaylistScalarRelationFilter, Prisma.PlaylistWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type ProblemInPlaylistOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  playlistId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  playlist?: Prisma.PlaylistOrderByWithRelationInput
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type ProblemInPlaylistWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  playlistId_problemId?: Prisma.ProblemInPlaylistPlaylistIdProblemIdCompoundUniqueInput
  AND?: Prisma.ProblemInPlaylistWhereInput | Prisma.ProblemInPlaylistWhereInput[]
  OR?: Prisma.ProblemInPlaylistWhereInput[]
  NOT?: Prisma.ProblemInPlaylistWhereInput | Prisma.ProblemInPlaylistWhereInput[]
  playlistId?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  problemId?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemInPlaylist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemInPlaylist"> | Date | string
  playlist?: Prisma.XOR<Prisma.PlaylistScalarRelationFilter, Prisma.PlaylistWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id" | "playlistId_problemId">

export type ProblemInPlaylistOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  playlistId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProblemInPlaylistCountOrderByAggregateInput
  _max?: Prisma.ProblemInPlaylistMaxOrderByAggregateInput
  _min?: Prisma.ProblemInPlaylistMinOrderByAggregateInput
}

export type ProblemInPlaylistScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProblemInPlaylistScalarWhereWithAggregatesInput | Prisma.ProblemInPlaylistScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProblemInPlaylistScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProblemInPlaylistScalarWhereWithAggregatesInput | Prisma.ProblemInPlaylistScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProblemInPlaylist"> | string
  playlistId?: Prisma.StringWithAggregatesFilter<"ProblemInPlaylist"> | string
  problemId?: Prisma.StringWithAggregatesFilter<"ProblemInPlaylist"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemInPlaylist"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemInPlaylist"> | Date | string
}

export type ProblemInPlaylistCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  playlist: Prisma.PlaylistCreateNestedOneWithoutProblemsInput
  problem: Prisma.ProblemCreateNestedOneWithoutPlaylistInput
}

export type ProblemInPlaylistUncheckedCreateInput = {
  id?: string
  playlistId: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemInPlaylistUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playlist?: Prisma.PlaylistUpdateOneRequiredWithoutProblemsNestedInput
  problem?: Prisma.ProblemUpdateOneRequiredWithoutPlaylistNestedInput
}

export type ProblemInPlaylistUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  playlistId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemInPlaylistCreateManyInput = {
  id?: string
  playlistId: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemInPlaylistUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemInPlaylistUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  playlistId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemInPlaylistListRelationFilter = {
  every?: Prisma.ProblemInPlaylistWhereInput
  some?: Prisma.ProblemInPlaylistWhereInput
  none?: Prisma.ProblemInPlaylistWhereInput
}

export type ProblemInPlaylistOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProblemInPlaylistPlaylistIdProblemIdCompoundUniqueInput = {
  playlistId: string
  problemId: string
}

export type ProblemInPlaylistCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  playlistId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemInPlaylistMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  playlistId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemInPlaylistMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  playlistId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemInPlaylistCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput> | Prisma.ProblemInPlaylistCreateWithoutProblemInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
}

export type ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput> | Prisma.ProblemInPlaylistCreateWithoutProblemInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
}

export type ProblemInPlaylistUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput> | Prisma.ProblemInPlaylistCreateWithoutProblemInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyProblemInputEnvelope
  set?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  disconnect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  delete?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  update?: Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemInPlaylistScalarWhereInput | Prisma.ProblemInPlaylistScalarWhereInput[]
}

export type ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput> | Prisma.ProblemInPlaylistCreateWithoutProblemInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyProblemInputEnvelope
  set?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  disconnect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  delete?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  update?: Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemInPlaylistScalarWhereInput | Prisma.ProblemInPlaylistScalarWhereInput[]
}

export type ProblemInPlaylistCreateNestedManyWithoutPlaylistInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | Prisma.ProblemInPlaylistCreateWithoutPlaylistInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyPlaylistInputEnvelope
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
}

export type ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | Prisma.ProblemInPlaylistCreateWithoutPlaylistInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyPlaylistInputEnvelope
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
}

export type ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | Prisma.ProblemInPlaylistCreateWithoutPlaylistInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
  upsert?: Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput | Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyPlaylistInputEnvelope
  set?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  disconnect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  delete?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  update?: Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput | Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput[]
  updateMany?: Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput | Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput[]
  deleteMany?: Prisma.ProblemInPlaylistScalarWhereInput | Prisma.ProblemInPlaylistScalarWhereInput[]
}

export type ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | Prisma.ProblemInPlaylistCreateWithoutPlaylistInput[] | Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
  connectOrCreate?: Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | Prisma.ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
  upsert?: Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput | Prisma.ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput[]
  createMany?: Prisma.ProblemInPlaylistCreateManyPlaylistInputEnvelope
  set?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  disconnect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  delete?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  connect?: Prisma.ProblemInPlaylistWhereUniqueInput | Prisma.ProblemInPlaylistWhereUniqueInput[]
  update?: Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput | Prisma.ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput[]
  updateMany?: Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput | Prisma.ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput[]
  deleteMany?: Prisma.ProblemInPlaylistScalarWhereInput | Prisma.ProblemInPlaylistScalarWhereInput[]
}

export type ProblemInPlaylistCreateWithoutProblemInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  playlist: Prisma.PlaylistCreateNestedOneWithoutProblemsInput
}

export type ProblemInPlaylistUncheckedCreateWithoutProblemInput = {
  id?: string
  playlistId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemInPlaylistCreateOrConnectWithoutProblemInput = {
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput>
}

export type ProblemInPlaylistCreateManyProblemInputEnvelope = {
  data: Prisma.ProblemInPlaylistCreateManyProblemInput | Prisma.ProblemInPlaylistCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemInPlaylistUpdateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutProblemInput>
}

export type ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateWithoutProblemInput, Prisma.ProblemInPlaylistUncheckedUpdateWithoutProblemInput>
}

export type ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.ProblemInPlaylistScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateManyMutationInput, Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemInput>
}

export type ProblemInPlaylistScalarWhereInput = {
  AND?: Prisma.ProblemInPlaylistScalarWhereInput | Prisma.ProblemInPlaylistScalarWhereInput[]
  OR?: Prisma.ProblemInPlaylistScalarWhereInput[]
  NOT?: Prisma.ProblemInPlaylistScalarWhereInput | Prisma.ProblemInPlaylistScalarWhereInput[]
  id?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  playlistId?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  problemId?: Prisma.StringFilter<"ProblemInPlaylist"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemInPlaylist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemInPlaylist"> | Date | string
}

export type ProblemInPlaylistCreateWithoutPlaylistInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutPlaylistInput
}

export type ProblemInPlaylistUncheckedCreateWithoutPlaylistInput = {
  id?: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemInPlaylistCreateOrConnectWithoutPlaylistInput = {
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput>
}

export type ProblemInPlaylistCreateManyPlaylistInputEnvelope = {
  data: Prisma.ProblemInPlaylistCreateManyPlaylistInput | Prisma.ProblemInPlaylistCreateManyPlaylistInput[]
  skipDuplicates?: boolean
}

export type ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput = {
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemInPlaylistUpdateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedUpdateWithoutPlaylistInput>
  create: Prisma.XOR<Prisma.ProblemInPlaylistCreateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedCreateWithoutPlaylistInput>
}

export type ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput = {
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateWithoutPlaylistInput, Prisma.ProblemInPlaylistUncheckedUpdateWithoutPlaylistInput>
}

export type ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput = {
  where: Prisma.ProblemInPlaylistScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateManyMutationInput, Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistInput>
}

export type ProblemInPlaylistCreateManyProblemInput = {
  id?: string
  playlistId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemInPlaylistUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  playlist?: Prisma.PlaylistUpdateOneRequiredWithoutProblemsNestedInput
}

export type ProblemInPlaylistUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  playlistId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemInPlaylistUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  playlistId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemInPlaylistCreateManyPlaylistInput = {
  id?: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemInPlaylistUpdateWithoutPlaylistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutPlaylistNestedInput
}

export type ProblemInPlaylistUncheckedUpdateWithoutPlaylistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProblemInPlaylistSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  playlistId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  playlist?: boolean | Prisma.PlaylistDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemInPlaylist"]>

export type ProblemInPlaylistSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  playlistId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  playlist?: boolean | Prisma.PlaylistDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemInPlaylist"]>

export type ProblemInPlaylistSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  playlistId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  playlist?: boolean | Prisma.PlaylistDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemInPlaylist"]>

export type ProblemInPlaylistSelectScalar = {
  id?: boolean
  playlistId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProblemInPlaylistOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "playlistId" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["problemInPlaylist"]>
export type ProblemInPlaylistInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playlist?: boolean | Prisma.PlaylistDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemInPlaylistIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playlist?: boolean | Prisma.PlaylistDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemInPlaylistIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  playlist?: boolean | Prisma.PlaylistDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $ProblemInPlaylistPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProblemInPlaylist"
  objects: {
    playlist: Prisma.$PlaylistPayload<ExtArgs>
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    playlistId: string
    problemId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["problemInPlaylist"]>
  composites: {}
}

export type ProblemInPlaylistGetPayload<S extends boolean | null | undefined | ProblemInPlaylistDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload, S>

export type ProblemInPlaylistCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProblemInPlaylistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProblemInPlaylistCountAggregateInputType | true
  }

export interface ProblemInPlaylistDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemInPlaylist'], meta: { name: 'ProblemInPlaylist' } }
  /**
   * Find zero or one ProblemInPlaylist that matches the filter.
   * @param {ProblemInPlaylistFindUniqueArgs} args - Arguments to find a ProblemInPlaylist
   * @example
   * // Get one ProblemInPlaylist
   * const problemInPlaylist = await prisma.problemInPlaylist.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProblemInPlaylistFindUniqueArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProblemInPlaylist that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProblemInPlaylistFindUniqueOrThrowArgs} args - Arguments to find a ProblemInPlaylist
   * @example
   * // Get one ProblemInPlaylist
   * const problemInPlaylist = await prisma.problemInPlaylist.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProblemInPlaylistFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemInPlaylist that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistFindFirstArgs} args - Arguments to find a ProblemInPlaylist
   * @example
   * // Get one ProblemInPlaylist
   * const problemInPlaylist = await prisma.problemInPlaylist.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProblemInPlaylistFindFirstArgs>(args?: Prisma.SelectSubset<T, ProblemInPlaylistFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemInPlaylist that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistFindFirstOrThrowArgs} args - Arguments to find a ProblemInPlaylist
   * @example
   * // Get one ProblemInPlaylist
   * const problemInPlaylist = await prisma.problemInPlaylist.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProblemInPlaylistFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProblemInPlaylistFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProblemInPlaylists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProblemInPlaylists
   * const problemInPlaylists = await prisma.problemInPlaylist.findMany()
   * 
   * // Get first 10 ProblemInPlaylists
   * const problemInPlaylists = await prisma.problemInPlaylist.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const problemInPlaylistWithIdOnly = await prisma.problemInPlaylist.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProblemInPlaylistFindManyArgs>(args?: Prisma.SelectSubset<T, ProblemInPlaylistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProblemInPlaylist.
   * @param {ProblemInPlaylistCreateArgs} args - Arguments to create a ProblemInPlaylist.
   * @example
   * // Create one ProblemInPlaylist
   * const ProblemInPlaylist = await prisma.problemInPlaylist.create({
   *   data: {
   *     // ... data to create a ProblemInPlaylist
   *   }
   * })
   * 
   */
  create<T extends ProblemInPlaylistCreateArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistCreateArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProblemInPlaylists.
   * @param {ProblemInPlaylistCreateManyArgs} args - Arguments to create many ProblemInPlaylists.
   * @example
   * // Create many ProblemInPlaylists
   * const problemInPlaylist = await prisma.problemInPlaylist.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProblemInPlaylistCreateManyArgs>(args?: Prisma.SelectSubset<T, ProblemInPlaylistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProblemInPlaylists and returns the data saved in the database.
   * @param {ProblemInPlaylistCreateManyAndReturnArgs} args - Arguments to create many ProblemInPlaylists.
   * @example
   * // Create many ProblemInPlaylists
   * const problemInPlaylist = await prisma.problemInPlaylist.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProblemInPlaylists and only return the `id`
   * const problemInPlaylistWithIdOnly = await prisma.problemInPlaylist.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProblemInPlaylistCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProblemInPlaylistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProblemInPlaylist.
   * @param {ProblemInPlaylistDeleteArgs} args - Arguments to delete one ProblemInPlaylist.
   * @example
   * // Delete one ProblemInPlaylist
   * const ProblemInPlaylist = await prisma.problemInPlaylist.delete({
   *   where: {
   *     // ... filter to delete one ProblemInPlaylist
   *   }
   * })
   * 
   */
  delete<T extends ProblemInPlaylistDeleteArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistDeleteArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProblemInPlaylist.
   * @param {ProblemInPlaylistUpdateArgs} args - Arguments to update one ProblemInPlaylist.
   * @example
   * // Update one ProblemInPlaylist
   * const problemInPlaylist = await prisma.problemInPlaylist.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProblemInPlaylistUpdateArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistUpdateArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProblemInPlaylists.
   * @param {ProblemInPlaylistDeleteManyArgs} args - Arguments to filter ProblemInPlaylists to delete.
   * @example
   * // Delete a few ProblemInPlaylists
   * const { count } = await prisma.problemInPlaylist.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProblemInPlaylistDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProblemInPlaylistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemInPlaylists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProblemInPlaylists
   * const problemInPlaylist = await prisma.problemInPlaylist.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProblemInPlaylistUpdateManyArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemInPlaylists and returns the data updated in the database.
   * @param {ProblemInPlaylistUpdateManyAndReturnArgs} args - Arguments to update many ProblemInPlaylists.
   * @example
   * // Update many ProblemInPlaylists
   * const problemInPlaylist = await prisma.problemInPlaylist.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProblemInPlaylists and only return the `id`
   * const problemInPlaylistWithIdOnly = await prisma.problemInPlaylist.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProblemInPlaylistUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProblemInPlaylist.
   * @param {ProblemInPlaylistUpsertArgs} args - Arguments to update or create a ProblemInPlaylist.
   * @example
   * // Update or create a ProblemInPlaylist
   * const problemInPlaylist = await prisma.problemInPlaylist.upsert({
   *   create: {
   *     // ... data to create a ProblemInPlaylist
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProblemInPlaylist we want to update
   *   }
   * })
   */
  upsert<T extends ProblemInPlaylistUpsertArgs>(args: Prisma.SelectSubset<T, ProblemInPlaylistUpsertArgs<ExtArgs>>): Prisma.Prisma__ProblemInPlaylistClient<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProblemInPlaylists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistCountArgs} args - Arguments to filter ProblemInPlaylists to count.
   * @example
   * // Count the number of ProblemInPlaylists
   * const count = await prisma.problemInPlaylist.count({
   *   where: {
   *     // ... the filter for the ProblemInPlaylists we want to count
   *   }
   * })
  **/
  count<T extends ProblemInPlaylistCountArgs>(
    args?: Prisma.Subset<T, ProblemInPlaylistCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProblemInPlaylistCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProblemInPlaylist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProblemInPlaylistAggregateArgs>(args: Prisma.Subset<T, ProblemInPlaylistAggregateArgs>): Prisma.PrismaPromise<GetProblemInPlaylistAggregateType<T>>

  /**
   * Group by ProblemInPlaylist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemInPlaylistGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProblemInPlaylistGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProblemInPlaylistGroupByArgs['orderBy'] }
      : { orderBy?: ProblemInPlaylistGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProblemInPlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemInPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProblemInPlaylist model
 */
readonly fields: ProblemInPlaylistFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProblemInPlaylist.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProblemInPlaylistClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  playlist<T extends Prisma.PlaylistDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlaylistDefaultArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProblemInPlaylist model
 */
export interface ProblemInPlaylistFieldRefs {
  readonly id: Prisma.FieldRef<"ProblemInPlaylist", 'String'>
  readonly playlistId: Prisma.FieldRef<"ProblemInPlaylist", 'String'>
  readonly problemId: Prisma.FieldRef<"ProblemInPlaylist", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProblemInPlaylist", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProblemInPlaylist", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProblemInPlaylist findUnique
 */
export type ProblemInPlaylistFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * Filter, which ProblemInPlaylist to fetch.
   */
  where: Prisma.ProblemInPlaylistWhereUniqueInput
}

/**
 * ProblemInPlaylist findUniqueOrThrow
 */
export type ProblemInPlaylistFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * Filter, which ProblemInPlaylist to fetch.
   */
  where: Prisma.ProblemInPlaylistWhereUniqueInput
}

/**
 * ProblemInPlaylist findFirst
 */
export type ProblemInPlaylistFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * Filter, which ProblemInPlaylist to fetch.
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemInPlaylists to fetch.
   */
  orderBy?: Prisma.ProblemInPlaylistOrderByWithRelationInput | Prisma.ProblemInPlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemInPlaylists.
   */
  cursor?: Prisma.ProblemInPlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemInPlaylists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemInPlaylists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemInPlaylists.
   */
  distinct?: Prisma.ProblemInPlaylistScalarFieldEnum | Prisma.ProblemInPlaylistScalarFieldEnum[]
}

/**
 * ProblemInPlaylist findFirstOrThrow
 */
export type ProblemInPlaylistFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * Filter, which ProblemInPlaylist to fetch.
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemInPlaylists to fetch.
   */
  orderBy?: Prisma.ProblemInPlaylistOrderByWithRelationInput | Prisma.ProblemInPlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemInPlaylists.
   */
  cursor?: Prisma.ProblemInPlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemInPlaylists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemInPlaylists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemInPlaylists.
   */
  distinct?: Prisma.ProblemInPlaylistScalarFieldEnum | Prisma.ProblemInPlaylistScalarFieldEnum[]
}

/**
 * ProblemInPlaylist findMany
 */
export type ProblemInPlaylistFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * Filter, which ProblemInPlaylists to fetch.
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemInPlaylists to fetch.
   */
  orderBy?: Prisma.ProblemInPlaylistOrderByWithRelationInput | Prisma.ProblemInPlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProblemInPlaylists.
   */
  cursor?: Prisma.ProblemInPlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemInPlaylists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemInPlaylists.
   */
  skip?: number
  distinct?: Prisma.ProblemInPlaylistScalarFieldEnum | Prisma.ProblemInPlaylistScalarFieldEnum[]
}

/**
 * ProblemInPlaylist create
 */
export type ProblemInPlaylistCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * The data needed to create a ProblemInPlaylist.
   */
  data: Prisma.XOR<Prisma.ProblemInPlaylistCreateInput, Prisma.ProblemInPlaylistUncheckedCreateInput>
}

/**
 * ProblemInPlaylist createMany
 */
export type ProblemInPlaylistCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProblemInPlaylists.
   */
  data: Prisma.ProblemInPlaylistCreateManyInput | Prisma.ProblemInPlaylistCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProblemInPlaylist createManyAndReturn
 */
export type ProblemInPlaylistCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * The data used to create many ProblemInPlaylists.
   */
  data: Prisma.ProblemInPlaylistCreateManyInput | Prisma.ProblemInPlaylistCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemInPlaylist update
 */
export type ProblemInPlaylistUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * The data needed to update a ProblemInPlaylist.
   */
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateInput, Prisma.ProblemInPlaylistUncheckedUpdateInput>
  /**
   * Choose, which ProblemInPlaylist to update.
   */
  where: Prisma.ProblemInPlaylistWhereUniqueInput
}

/**
 * ProblemInPlaylist updateMany
 */
export type ProblemInPlaylistUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProblemInPlaylists.
   */
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateManyMutationInput, Prisma.ProblemInPlaylistUncheckedUpdateManyInput>
  /**
   * Filter which ProblemInPlaylists to update
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * Limit how many ProblemInPlaylists to update.
   */
  limit?: number
}

/**
 * ProblemInPlaylist updateManyAndReturn
 */
export type ProblemInPlaylistUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * The data used to update ProblemInPlaylists.
   */
  data: Prisma.XOR<Prisma.ProblemInPlaylistUpdateManyMutationInput, Prisma.ProblemInPlaylistUncheckedUpdateManyInput>
  /**
   * Filter which ProblemInPlaylists to update
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * Limit how many ProblemInPlaylists to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemInPlaylist upsert
 */
export type ProblemInPlaylistUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * The filter to search for the ProblemInPlaylist to update in case it exists.
   */
  where: Prisma.ProblemInPlaylistWhereUniqueInput
  /**
   * In case the ProblemInPlaylist found by the `where` argument doesn't exist, create a new ProblemInPlaylist with this data.
   */
  create: Prisma.XOR<Prisma.ProblemInPlaylistCreateInput, Prisma.ProblemInPlaylistUncheckedCreateInput>
  /**
   * In case the ProblemInPlaylist was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProblemInPlaylistUpdateInput, Prisma.ProblemInPlaylistUncheckedUpdateInput>
}

/**
 * ProblemInPlaylist delete
 */
export type ProblemInPlaylistDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  /**
   * Filter which ProblemInPlaylist to delete.
   */
  where: Prisma.ProblemInPlaylistWhereUniqueInput
}

/**
 * ProblemInPlaylist deleteMany
 */
export type ProblemInPlaylistDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemInPlaylists to delete
   */
  where?: Prisma.ProblemInPlaylistWhereInput
  /**
   * Limit how many ProblemInPlaylists to delete.
   */
  limit?: number
}

/**
 * ProblemInPlaylist without action
 */
export type ProblemInPlaylistDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
}
