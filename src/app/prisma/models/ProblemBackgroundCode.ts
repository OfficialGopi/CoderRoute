
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProblemBackgroundCode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProblemBackgroundCode
 * 
 */
export type ProblemBackgroundCodeModel = runtime.Types.Result.DefaultSelection<Prisma.$ProblemBackgroundCodePayload>

export type AggregateProblemBackgroundCode = {
  _count: ProblemBackgroundCodeCountAggregateOutputType | null
  _avg: ProblemBackgroundCodeAvgAggregateOutputType | null
  _sum: ProblemBackgroundCodeSumAggregateOutputType | null
  _min: ProblemBackgroundCodeMinAggregateOutputType | null
  _max: ProblemBackgroundCodeMaxAggregateOutputType | null
}

export type ProblemBackgroundCodeAvgAggregateOutputType = {
  id: number | null
}

export type ProblemBackgroundCodeSumAggregateOutputType = {
  id: number | null
}

export type ProblemBackgroundCodeMinAggregateOutputType = {
  id: number | null
  problemId: string | null
  language: $Enums.LANGUAGE | null
  code: string | null
  whereToWriteCode: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemBackgroundCodeMaxAggregateOutputType = {
  id: number | null
  problemId: string | null
  language: $Enums.LANGUAGE | null
  code: string | null
  whereToWriteCode: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemBackgroundCodeCountAggregateOutputType = {
  id: number
  problemId: number
  language: number
  code: number
  whereToWriteCode: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProblemBackgroundCodeAvgAggregateInputType = {
  id?: true
}

export type ProblemBackgroundCodeSumAggregateInputType = {
  id?: true
}

export type ProblemBackgroundCodeMinAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  whereToWriteCode?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemBackgroundCodeMaxAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  whereToWriteCode?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemBackgroundCodeCountAggregateInputType = {
  id?: true
  problemId?: true
  language?: true
  code?: true
  whereToWriteCode?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProblemBackgroundCodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemBackgroundCode to aggregate.
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemBackgroundCodes to fetch.
   */
  orderBy?: Prisma.ProblemBackgroundCodeOrderByWithRelationInput | Prisma.ProblemBackgroundCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProblemBackgroundCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemBackgroundCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemBackgroundCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProblemBackgroundCodes
  **/
  _count?: true | ProblemBackgroundCodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProblemBackgroundCodeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProblemBackgroundCodeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProblemBackgroundCodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProblemBackgroundCodeMaxAggregateInputType
}

export type GetProblemBackgroundCodeAggregateType<T extends ProblemBackgroundCodeAggregateArgs> = {
      [P in keyof T & keyof AggregateProblemBackgroundCode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProblemBackgroundCode[P]>
    : Prisma.GetScalarType<T[P], AggregateProblemBackgroundCode[P]>
}




export type ProblemBackgroundCodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemBackgroundCodeWhereInput
  orderBy?: Prisma.ProblemBackgroundCodeOrderByWithAggregationInput | Prisma.ProblemBackgroundCodeOrderByWithAggregationInput[]
  by: Prisma.ProblemBackgroundCodeScalarFieldEnum[] | Prisma.ProblemBackgroundCodeScalarFieldEnum
  having?: Prisma.ProblemBackgroundCodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProblemBackgroundCodeCountAggregateInputType | true
  _avg?: ProblemBackgroundCodeAvgAggregateInputType
  _sum?: ProblemBackgroundCodeSumAggregateInputType
  _min?: ProblemBackgroundCodeMinAggregateInputType
  _max?: ProblemBackgroundCodeMaxAggregateInputType
}

export type ProblemBackgroundCodeGroupByOutputType = {
  id: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt: Date
  updatedAt: Date
  _count: ProblemBackgroundCodeCountAggregateOutputType | null
  _avg: ProblemBackgroundCodeAvgAggregateOutputType | null
  _sum: ProblemBackgroundCodeSumAggregateOutputType | null
  _min: ProblemBackgroundCodeMinAggregateOutputType | null
  _max: ProblemBackgroundCodeMaxAggregateOutputType | null
}

type GetProblemBackgroundCodeGroupByPayload<T extends ProblemBackgroundCodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProblemBackgroundCodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProblemBackgroundCodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProblemBackgroundCodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProblemBackgroundCodeGroupByOutputType[P]>
      }
    >
  > 



export type ProblemBackgroundCodeWhereInput = {
  AND?: Prisma.ProblemBackgroundCodeWhereInput | Prisma.ProblemBackgroundCodeWhereInput[]
  OR?: Prisma.ProblemBackgroundCodeWhereInput[]
  NOT?: Prisma.ProblemBackgroundCodeWhereInput | Prisma.ProblemBackgroundCodeWhereInput[]
  id?: Prisma.IntFilter<"ProblemBackgroundCode"> | number
  problemId?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemBackgroundCode"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  whereToWriteCode?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemBackgroundCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemBackgroundCode"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type ProblemBackgroundCodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  whereToWriteCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type ProblemBackgroundCodeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  problemId_language?: Prisma.ProblemBackgroundCodeProblemIdLanguageCompoundUniqueInput
  AND?: Prisma.ProblemBackgroundCodeWhereInput | Prisma.ProblemBackgroundCodeWhereInput[]
  OR?: Prisma.ProblemBackgroundCodeWhereInput[]
  NOT?: Prisma.ProblemBackgroundCodeWhereInput | Prisma.ProblemBackgroundCodeWhereInput[]
  problemId?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemBackgroundCode"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  whereToWriteCode?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemBackgroundCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemBackgroundCode"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id" | "problemId_language">

export type ProblemBackgroundCodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  whereToWriteCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProblemBackgroundCodeCountOrderByAggregateInput
  _avg?: Prisma.ProblemBackgroundCodeAvgOrderByAggregateInput
  _max?: Prisma.ProblemBackgroundCodeMaxOrderByAggregateInput
  _min?: Prisma.ProblemBackgroundCodeMinOrderByAggregateInput
  _sum?: Prisma.ProblemBackgroundCodeSumOrderByAggregateInput
}

export type ProblemBackgroundCodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProblemBackgroundCodeScalarWhereWithAggregatesInput | Prisma.ProblemBackgroundCodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProblemBackgroundCodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProblemBackgroundCodeScalarWhereWithAggregatesInput | Prisma.ProblemBackgroundCodeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ProblemBackgroundCode"> | number
  problemId?: Prisma.StringWithAggregatesFilter<"ProblemBackgroundCode"> | string
  language?: Prisma.EnumLANGUAGEWithAggregatesFilter<"ProblemBackgroundCode"> | $Enums.LANGUAGE
  code?: Prisma.StringWithAggregatesFilter<"ProblemBackgroundCode"> | string
  whereToWriteCode?: Prisma.StringWithAggregatesFilter<"ProblemBackgroundCode"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemBackgroundCode"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemBackgroundCode"> | Date | string
}

export type ProblemBackgroundCodeCreateInput = {
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutBackgroundCodesInput
}

export type ProblemBackgroundCodeUncheckedCreateInput = {
  id?: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemBackgroundCodeUpdateInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutBackgroundCodesNestedInput
}

export type ProblemBackgroundCodeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemBackgroundCodeCreateManyInput = {
  id?: number
  problemId: string
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemBackgroundCodeUpdateManyMutationInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemBackgroundCodeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemBackgroundCodeListRelationFilter = {
  every?: Prisma.ProblemBackgroundCodeWhereInput
  some?: Prisma.ProblemBackgroundCodeWhereInput
  none?: Prisma.ProblemBackgroundCodeWhereInput
}

export type ProblemBackgroundCodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProblemBackgroundCodeProblemIdLanguageCompoundUniqueInput = {
  problemId: string
  language: $Enums.LANGUAGE
}

export type ProblemBackgroundCodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  whereToWriteCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemBackgroundCodeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProblemBackgroundCodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  whereToWriteCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemBackgroundCodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  code?: Prisma.SortOrder
  whereToWriteCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemBackgroundCodeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProblemBackgroundCodeCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput> | Prisma.ProblemBackgroundCodeCreateWithoutProblemInput[] | Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput | Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemBackgroundCodeCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
}

export type ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput> | Prisma.ProblemBackgroundCodeCreateWithoutProblemInput[] | Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput | Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemBackgroundCodeCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
}

export type ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput> | Prisma.ProblemBackgroundCodeCreateWithoutProblemInput[] | Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput | Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemBackgroundCodeUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemBackgroundCodeUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemBackgroundCodeCreateManyProblemInputEnvelope
  set?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  disconnect?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  delete?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  connect?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  update?: Prisma.ProblemBackgroundCodeUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemBackgroundCodeUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemBackgroundCodeUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemBackgroundCodeUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemBackgroundCodeScalarWhereInput | Prisma.ProblemBackgroundCodeScalarWhereInput[]
}

export type ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput> | Prisma.ProblemBackgroundCodeCreateWithoutProblemInput[] | Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput | Prisma.ProblemBackgroundCodeCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemBackgroundCodeUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemBackgroundCodeUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemBackgroundCodeCreateManyProblemInputEnvelope
  set?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  disconnect?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  delete?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  connect?: Prisma.ProblemBackgroundCodeWhereUniqueInput | Prisma.ProblemBackgroundCodeWhereUniqueInput[]
  update?: Prisma.ProblemBackgroundCodeUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemBackgroundCodeUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemBackgroundCodeUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemBackgroundCodeUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemBackgroundCodeScalarWhereInput | Prisma.ProblemBackgroundCodeScalarWhereInput[]
}

export type ProblemBackgroundCodeCreateWithoutProblemInput = {
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemBackgroundCodeUncheckedCreateWithoutProblemInput = {
  id?: number
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemBackgroundCodeCreateOrConnectWithoutProblemInput = {
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput>
}

export type ProblemBackgroundCodeCreateManyProblemInputEnvelope = {
  data: Prisma.ProblemBackgroundCodeCreateManyProblemInput | Prisma.ProblemBackgroundCodeCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type ProblemBackgroundCodeUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedCreateWithoutProblemInput>
}

export type ProblemBackgroundCodeUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateWithoutProblemInput, Prisma.ProblemBackgroundCodeUncheckedUpdateWithoutProblemInput>
}

export type ProblemBackgroundCodeUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.ProblemBackgroundCodeScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateManyMutationInput, Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemInput>
}

export type ProblemBackgroundCodeScalarWhereInput = {
  AND?: Prisma.ProblemBackgroundCodeScalarWhereInput | Prisma.ProblemBackgroundCodeScalarWhereInput[]
  OR?: Prisma.ProblemBackgroundCodeScalarWhereInput[]
  NOT?: Prisma.ProblemBackgroundCodeScalarWhereInput | Prisma.ProblemBackgroundCodeScalarWhereInput[]
  id?: Prisma.IntFilter<"ProblemBackgroundCode"> | number
  problemId?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  language?: Prisma.EnumLANGUAGEFilter<"ProblemBackgroundCode"> | $Enums.LANGUAGE
  code?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  whereToWriteCode?: Prisma.StringFilter<"ProblemBackgroundCode"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemBackgroundCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemBackgroundCode"> | Date | string
}

export type ProblemBackgroundCodeCreateManyProblemInput = {
  id?: number
  language: $Enums.LANGUAGE
  code: string
  whereToWriteCode: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemBackgroundCodeUpdateWithoutProblemInput = {
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemBackgroundCodeUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  language?: Prisma.EnumLANGUAGEFieldUpdateOperationsInput | $Enums.LANGUAGE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  whereToWriteCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProblemBackgroundCodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  whereToWriteCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemBackgroundCode"]>

export type ProblemBackgroundCodeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  whereToWriteCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemBackgroundCode"]>

export type ProblemBackgroundCodeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  whereToWriteCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemBackgroundCode"]>

export type ProblemBackgroundCodeSelectScalar = {
  id?: boolean
  problemId?: boolean
  language?: boolean
  code?: boolean
  whereToWriteCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProblemBackgroundCodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "problemId" | "language" | "code" | "whereToWriteCode" | "createdAt" | "updatedAt", ExtArgs["result"]["problemBackgroundCode"]>
export type ProblemBackgroundCodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemBackgroundCodeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemBackgroundCodeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $ProblemBackgroundCodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProblemBackgroundCode"
  objects: {
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    problemId: string
    language: $Enums.LANGUAGE
    code: string
    whereToWriteCode: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["problemBackgroundCode"]>
  composites: {}
}

export type ProblemBackgroundCodeGetPayload<S extends boolean | null | undefined | ProblemBackgroundCodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload, S>

export type ProblemBackgroundCodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProblemBackgroundCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProblemBackgroundCodeCountAggregateInputType | true
  }

export interface ProblemBackgroundCodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemBackgroundCode'], meta: { name: 'ProblemBackgroundCode' } }
  /**
   * Find zero or one ProblemBackgroundCode that matches the filter.
   * @param {ProblemBackgroundCodeFindUniqueArgs} args - Arguments to find a ProblemBackgroundCode
   * @example
   * // Get one ProblemBackgroundCode
   * const problemBackgroundCode = await prisma.problemBackgroundCode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProblemBackgroundCodeFindUniqueArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProblemBackgroundCode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProblemBackgroundCodeFindUniqueOrThrowArgs} args - Arguments to find a ProblemBackgroundCode
   * @example
   * // Get one ProblemBackgroundCode
   * const problemBackgroundCode = await prisma.problemBackgroundCode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProblemBackgroundCodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemBackgroundCode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeFindFirstArgs} args - Arguments to find a ProblemBackgroundCode
   * @example
   * // Get one ProblemBackgroundCode
   * const problemBackgroundCode = await prisma.problemBackgroundCode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProblemBackgroundCodeFindFirstArgs>(args?: Prisma.SelectSubset<T, ProblemBackgroundCodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemBackgroundCode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeFindFirstOrThrowArgs} args - Arguments to find a ProblemBackgroundCode
   * @example
   * // Get one ProblemBackgroundCode
   * const problemBackgroundCode = await prisma.problemBackgroundCode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProblemBackgroundCodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProblemBackgroundCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProblemBackgroundCodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProblemBackgroundCodes
   * const problemBackgroundCodes = await prisma.problemBackgroundCode.findMany()
   * 
   * // Get first 10 ProblemBackgroundCodes
   * const problemBackgroundCodes = await prisma.problemBackgroundCode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const problemBackgroundCodeWithIdOnly = await prisma.problemBackgroundCode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProblemBackgroundCodeFindManyArgs>(args?: Prisma.SelectSubset<T, ProblemBackgroundCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProblemBackgroundCode.
   * @param {ProblemBackgroundCodeCreateArgs} args - Arguments to create a ProblemBackgroundCode.
   * @example
   * // Create one ProblemBackgroundCode
   * const ProblemBackgroundCode = await prisma.problemBackgroundCode.create({
   *   data: {
   *     // ... data to create a ProblemBackgroundCode
   *   }
   * })
   * 
   */
  create<T extends ProblemBackgroundCodeCreateArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeCreateArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProblemBackgroundCodes.
   * @param {ProblemBackgroundCodeCreateManyArgs} args - Arguments to create many ProblemBackgroundCodes.
   * @example
   * // Create many ProblemBackgroundCodes
   * const problemBackgroundCode = await prisma.problemBackgroundCode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProblemBackgroundCodeCreateManyArgs>(args?: Prisma.SelectSubset<T, ProblemBackgroundCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProblemBackgroundCodes and returns the data saved in the database.
   * @param {ProblemBackgroundCodeCreateManyAndReturnArgs} args - Arguments to create many ProblemBackgroundCodes.
   * @example
   * // Create many ProblemBackgroundCodes
   * const problemBackgroundCode = await prisma.problemBackgroundCode.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProblemBackgroundCodes and only return the `id`
   * const problemBackgroundCodeWithIdOnly = await prisma.problemBackgroundCode.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProblemBackgroundCodeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProblemBackgroundCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProblemBackgroundCode.
   * @param {ProblemBackgroundCodeDeleteArgs} args - Arguments to delete one ProblemBackgroundCode.
   * @example
   * // Delete one ProblemBackgroundCode
   * const ProblemBackgroundCode = await prisma.problemBackgroundCode.delete({
   *   where: {
   *     // ... filter to delete one ProblemBackgroundCode
   *   }
   * })
   * 
   */
  delete<T extends ProblemBackgroundCodeDeleteArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeDeleteArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProblemBackgroundCode.
   * @param {ProblemBackgroundCodeUpdateArgs} args - Arguments to update one ProblemBackgroundCode.
   * @example
   * // Update one ProblemBackgroundCode
   * const problemBackgroundCode = await prisma.problemBackgroundCode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProblemBackgroundCodeUpdateArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeUpdateArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProblemBackgroundCodes.
   * @param {ProblemBackgroundCodeDeleteManyArgs} args - Arguments to filter ProblemBackgroundCodes to delete.
   * @example
   * // Delete a few ProblemBackgroundCodes
   * const { count } = await prisma.problemBackgroundCode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProblemBackgroundCodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProblemBackgroundCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemBackgroundCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProblemBackgroundCodes
   * const problemBackgroundCode = await prisma.problemBackgroundCode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProblemBackgroundCodeUpdateManyArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemBackgroundCodes and returns the data updated in the database.
   * @param {ProblemBackgroundCodeUpdateManyAndReturnArgs} args - Arguments to update many ProblemBackgroundCodes.
   * @example
   * // Update many ProblemBackgroundCodes
   * const problemBackgroundCode = await prisma.problemBackgroundCode.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProblemBackgroundCodes and only return the `id`
   * const problemBackgroundCodeWithIdOnly = await prisma.problemBackgroundCode.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProblemBackgroundCodeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProblemBackgroundCode.
   * @param {ProblemBackgroundCodeUpsertArgs} args - Arguments to update or create a ProblemBackgroundCode.
   * @example
   * // Update or create a ProblemBackgroundCode
   * const problemBackgroundCode = await prisma.problemBackgroundCode.upsert({
   *   create: {
   *     // ... data to create a ProblemBackgroundCode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProblemBackgroundCode we want to update
   *   }
   * })
   */
  upsert<T extends ProblemBackgroundCodeUpsertArgs>(args: Prisma.SelectSubset<T, ProblemBackgroundCodeUpsertArgs<ExtArgs>>): Prisma.Prisma__ProblemBackgroundCodeClient<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProblemBackgroundCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeCountArgs} args - Arguments to filter ProblemBackgroundCodes to count.
   * @example
   * // Count the number of ProblemBackgroundCodes
   * const count = await prisma.problemBackgroundCode.count({
   *   where: {
   *     // ... the filter for the ProblemBackgroundCodes we want to count
   *   }
   * })
  **/
  count<T extends ProblemBackgroundCodeCountArgs>(
    args?: Prisma.Subset<T, ProblemBackgroundCodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProblemBackgroundCodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProblemBackgroundCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProblemBackgroundCodeAggregateArgs>(args: Prisma.Subset<T, ProblemBackgroundCodeAggregateArgs>): Prisma.PrismaPromise<GetProblemBackgroundCodeAggregateType<T>>

  /**
   * Group by ProblemBackgroundCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemBackgroundCodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProblemBackgroundCodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProblemBackgroundCodeGroupByArgs['orderBy'] }
      : { orderBy?: ProblemBackgroundCodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProblemBackgroundCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemBackgroundCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProblemBackgroundCode model
 */
readonly fields: ProblemBackgroundCodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProblemBackgroundCode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProblemBackgroundCodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProblemBackgroundCode model
 */
export interface ProblemBackgroundCodeFieldRefs {
  readonly id: Prisma.FieldRef<"ProblemBackgroundCode", 'Int'>
  readonly problemId: Prisma.FieldRef<"ProblemBackgroundCode", 'String'>
  readonly language: Prisma.FieldRef<"ProblemBackgroundCode", 'LANGUAGE'>
  readonly code: Prisma.FieldRef<"ProblemBackgroundCode", 'String'>
  readonly whereToWriteCode: Prisma.FieldRef<"ProblemBackgroundCode", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProblemBackgroundCode", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProblemBackgroundCode", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProblemBackgroundCode findUnique
 */
export type ProblemBackgroundCodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * Filter, which ProblemBackgroundCode to fetch.
   */
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
}

/**
 * ProblemBackgroundCode findUniqueOrThrow
 */
export type ProblemBackgroundCodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * Filter, which ProblemBackgroundCode to fetch.
   */
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
}

/**
 * ProblemBackgroundCode findFirst
 */
export type ProblemBackgroundCodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * Filter, which ProblemBackgroundCode to fetch.
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemBackgroundCodes to fetch.
   */
  orderBy?: Prisma.ProblemBackgroundCodeOrderByWithRelationInput | Prisma.ProblemBackgroundCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemBackgroundCodes.
   */
  cursor?: Prisma.ProblemBackgroundCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemBackgroundCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemBackgroundCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemBackgroundCodes.
   */
  distinct?: Prisma.ProblemBackgroundCodeScalarFieldEnum | Prisma.ProblemBackgroundCodeScalarFieldEnum[]
}

/**
 * ProblemBackgroundCode findFirstOrThrow
 */
export type ProblemBackgroundCodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * Filter, which ProblemBackgroundCode to fetch.
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemBackgroundCodes to fetch.
   */
  orderBy?: Prisma.ProblemBackgroundCodeOrderByWithRelationInput | Prisma.ProblemBackgroundCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemBackgroundCodes.
   */
  cursor?: Prisma.ProblemBackgroundCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemBackgroundCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemBackgroundCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemBackgroundCodes.
   */
  distinct?: Prisma.ProblemBackgroundCodeScalarFieldEnum | Prisma.ProblemBackgroundCodeScalarFieldEnum[]
}

/**
 * ProblemBackgroundCode findMany
 */
export type ProblemBackgroundCodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * Filter, which ProblemBackgroundCodes to fetch.
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemBackgroundCodes to fetch.
   */
  orderBy?: Prisma.ProblemBackgroundCodeOrderByWithRelationInput | Prisma.ProblemBackgroundCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProblemBackgroundCodes.
   */
  cursor?: Prisma.ProblemBackgroundCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemBackgroundCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemBackgroundCodes.
   */
  skip?: number
  distinct?: Prisma.ProblemBackgroundCodeScalarFieldEnum | Prisma.ProblemBackgroundCodeScalarFieldEnum[]
}

/**
 * ProblemBackgroundCode create
 */
export type ProblemBackgroundCodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * The data needed to create a ProblemBackgroundCode.
   */
  data: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateInput, Prisma.ProblemBackgroundCodeUncheckedCreateInput>
}

/**
 * ProblemBackgroundCode createMany
 */
export type ProblemBackgroundCodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProblemBackgroundCodes.
   */
  data: Prisma.ProblemBackgroundCodeCreateManyInput | Prisma.ProblemBackgroundCodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProblemBackgroundCode createManyAndReturn
 */
export type ProblemBackgroundCodeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * The data used to create many ProblemBackgroundCodes.
   */
  data: Prisma.ProblemBackgroundCodeCreateManyInput | Prisma.ProblemBackgroundCodeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemBackgroundCode update
 */
export type ProblemBackgroundCodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * The data needed to update a ProblemBackgroundCode.
   */
  data: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateInput, Prisma.ProblemBackgroundCodeUncheckedUpdateInput>
  /**
   * Choose, which ProblemBackgroundCode to update.
   */
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
}

/**
 * ProblemBackgroundCode updateMany
 */
export type ProblemBackgroundCodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProblemBackgroundCodes.
   */
  data: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateManyMutationInput, Prisma.ProblemBackgroundCodeUncheckedUpdateManyInput>
  /**
   * Filter which ProblemBackgroundCodes to update
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * Limit how many ProblemBackgroundCodes to update.
   */
  limit?: number
}

/**
 * ProblemBackgroundCode updateManyAndReturn
 */
export type ProblemBackgroundCodeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * The data used to update ProblemBackgroundCodes.
   */
  data: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateManyMutationInput, Prisma.ProblemBackgroundCodeUncheckedUpdateManyInput>
  /**
   * Filter which ProblemBackgroundCodes to update
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * Limit how many ProblemBackgroundCodes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemBackgroundCode upsert
 */
export type ProblemBackgroundCodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * The filter to search for the ProblemBackgroundCode to update in case it exists.
   */
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
  /**
   * In case the ProblemBackgroundCode found by the `where` argument doesn't exist, create a new ProblemBackgroundCode with this data.
   */
  create: Prisma.XOR<Prisma.ProblemBackgroundCodeCreateInput, Prisma.ProblemBackgroundCodeUncheckedCreateInput>
  /**
   * In case the ProblemBackgroundCode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProblemBackgroundCodeUpdateInput, Prisma.ProblemBackgroundCodeUncheckedUpdateInput>
}

/**
 * ProblemBackgroundCode delete
 */
export type ProblemBackgroundCodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  /**
   * Filter which ProblemBackgroundCode to delete.
   */
  where: Prisma.ProblemBackgroundCodeWhereUniqueInput
}

/**
 * ProblemBackgroundCode deleteMany
 */
export type ProblemBackgroundCodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemBackgroundCodes to delete
   */
  where?: Prisma.ProblemBackgroundCodeWhereInput
  /**
   * Limit how many ProblemBackgroundCodes to delete.
   */
  limit?: number
}

/**
 * ProblemBackgroundCode without action
 */
export type ProblemBackgroundCodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
}
