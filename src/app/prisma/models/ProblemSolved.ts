
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProblemSolved` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProblemSolved
 * 
 */
export type ProblemSolvedModel = runtime.Types.Result.DefaultSelection<Prisma.$ProblemSolvedPayload>

export type AggregateProblemSolved = {
  _count: ProblemSolvedCountAggregateOutputType | null
  _min: ProblemSolvedMinAggregateOutputType | null
  _max: ProblemSolvedMaxAggregateOutputType | null
}

export type ProblemSolvedMinAggregateOutputType = {
  id: string | null
  userId: string | null
  problemId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemSolvedMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  problemId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemSolvedCountAggregateOutputType = {
  id: number
  userId: number
  problemId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProblemSolvedMinAggregateInputType = {
  id?: true
  userId?: true
  problemId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemSolvedMaxAggregateInputType = {
  id?: true
  userId?: true
  problemId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemSolvedCountAggregateInputType = {
  id?: true
  userId?: true
  problemId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProblemSolvedAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemSolved to aggregate.
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemSolveds to fetch.
   */
  orderBy?: Prisma.ProblemSolvedOrderByWithRelationInput | Prisma.ProblemSolvedOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProblemSolvedWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemSolveds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemSolveds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProblemSolveds
  **/
  _count?: true | ProblemSolvedCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProblemSolvedMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProblemSolvedMaxAggregateInputType
}

export type GetProblemSolvedAggregateType<T extends ProblemSolvedAggregateArgs> = {
      [P in keyof T & keyof AggregateProblemSolved]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProblemSolved[P]>
    : Prisma.GetScalarType<T[P], AggregateProblemSolved[P]>
}




export type ProblemSolvedGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemSolvedWhereInput
  orderBy?: Prisma.ProblemSolvedOrderByWithAggregationInput | Prisma.ProblemSolvedOrderByWithAggregationInput[]
  by: Prisma.ProblemSolvedScalarFieldEnum[] | Prisma.ProblemSolvedScalarFieldEnum
  having?: Prisma.ProblemSolvedScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProblemSolvedCountAggregateInputType | true
  _min?: ProblemSolvedMinAggregateInputType
  _max?: ProblemSolvedMaxAggregateInputType
}

export type ProblemSolvedGroupByOutputType = {
  id: string
  userId: string
  problemId: string
  createdAt: Date
  updatedAt: Date
  _count: ProblemSolvedCountAggregateOutputType | null
  _min: ProblemSolvedMinAggregateOutputType | null
  _max: ProblemSolvedMaxAggregateOutputType | null
}

type GetProblemSolvedGroupByPayload<T extends ProblemSolvedGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProblemSolvedGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProblemSolvedGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProblemSolvedGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProblemSolvedGroupByOutputType[P]>
      }
    >
  > 



export type ProblemSolvedWhereInput = {
  AND?: Prisma.ProblemSolvedWhereInput | Prisma.ProblemSolvedWhereInput[]
  OR?: Prisma.ProblemSolvedWhereInput[]
  NOT?: Prisma.ProblemSolvedWhereInput | Prisma.ProblemSolvedWhereInput[]
  id?: Prisma.StringFilter<"ProblemSolved"> | string
  userId?: Prisma.StringFilter<"ProblemSolved"> | string
  problemId?: Prisma.StringFilter<"ProblemSolved"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemSolved"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemSolved"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type ProblemSolvedOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type ProblemSolvedWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_problemId?: Prisma.ProblemSolvedUserIdProblemIdCompoundUniqueInput
  AND?: Prisma.ProblemSolvedWhereInput | Prisma.ProblemSolvedWhereInput[]
  OR?: Prisma.ProblemSolvedWhereInput[]
  NOT?: Prisma.ProblemSolvedWhereInput | Prisma.ProblemSolvedWhereInput[]
  userId?: Prisma.StringFilter<"ProblemSolved"> | string
  problemId?: Prisma.StringFilter<"ProblemSolved"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemSolved"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemSolved"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id" | "userId_problemId">

export type ProblemSolvedOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProblemSolvedCountOrderByAggregateInput
  _max?: Prisma.ProblemSolvedMaxOrderByAggregateInput
  _min?: Prisma.ProblemSolvedMinOrderByAggregateInput
}

export type ProblemSolvedScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProblemSolvedScalarWhereWithAggregatesInput | Prisma.ProblemSolvedScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProblemSolvedScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProblemSolvedScalarWhereWithAggregatesInput | Prisma.ProblemSolvedScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProblemSolved"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ProblemSolved"> | string
  problemId?: Prisma.StringWithAggregatesFilter<"ProblemSolved"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemSolved"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProblemSolved"> | Date | string
}

export type ProblemSolvedCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsSolvedInput
  problem: Prisma.ProblemCreateNestedOneWithoutSolvedByInput
}

export type ProblemSolvedUncheckedCreateInput = {
  id?: string
  userId: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemSolvedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsSolvedNestedInput
  problem?: Prisma.ProblemUpdateOneRequiredWithoutSolvedByNestedInput
}

export type ProblemSolvedUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemSolvedCreateManyInput = {
  id?: string
  userId: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemSolvedUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemSolvedUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemSolvedListRelationFilter = {
  every?: Prisma.ProblemSolvedWhereInput
  some?: Prisma.ProblemSolvedWhereInput
  none?: Prisma.ProblemSolvedWhereInput
}

export type ProblemSolvedOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProblemSolvedUserIdProblemIdCompoundUniqueInput = {
  userId: string
  problemId: string
}

export type ProblemSolvedCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemSolvedMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemSolvedMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemSolvedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutUserInput, Prisma.ProblemSolvedUncheckedCreateWithoutUserInput> | Prisma.ProblemSolvedCreateWithoutUserInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutUserInput | Prisma.ProblemSolvedCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProblemSolvedCreateManyUserInputEnvelope
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
}

export type ProblemSolvedUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutUserInput, Prisma.ProblemSolvedUncheckedCreateWithoutUserInput> | Prisma.ProblemSolvedCreateWithoutUserInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutUserInput | Prisma.ProblemSolvedCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProblemSolvedCreateManyUserInputEnvelope
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
}

export type ProblemSolvedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutUserInput, Prisma.ProblemSolvedUncheckedCreateWithoutUserInput> | Prisma.ProblemSolvedCreateWithoutUserInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutUserInput | Prisma.ProblemSolvedCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutUserInput | Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProblemSolvedCreateManyUserInputEnvelope
  set?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  disconnect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  delete?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  update?: Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutUserInput | Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProblemSolvedUpdateManyWithWhereWithoutUserInput | Prisma.ProblemSolvedUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProblemSolvedScalarWhereInput | Prisma.ProblemSolvedScalarWhereInput[]
}

export type ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutUserInput, Prisma.ProblemSolvedUncheckedCreateWithoutUserInput> | Prisma.ProblemSolvedCreateWithoutUserInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutUserInput | Prisma.ProblemSolvedCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutUserInput | Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProblemSolvedCreateManyUserInputEnvelope
  set?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  disconnect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  delete?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  update?: Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutUserInput | Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProblemSolvedUpdateManyWithWhereWithoutUserInput | Prisma.ProblemSolvedUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProblemSolvedScalarWhereInput | Prisma.ProblemSolvedScalarWhereInput[]
}

export type ProblemSolvedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutProblemInput, Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput> | Prisma.ProblemSolvedCreateWithoutProblemInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput | Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemSolvedCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
}

export type ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutProblemInput, Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput> | Prisma.ProblemSolvedCreateWithoutProblemInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput | Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ProblemSolvedCreateManyProblemInputEnvelope
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
}

export type ProblemSolvedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutProblemInput, Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput> | Prisma.ProblemSolvedCreateWithoutProblemInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput | Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemSolvedCreateManyProblemInputEnvelope
  set?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  disconnect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  delete?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  update?: Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemSolvedUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemSolvedUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemSolvedScalarWhereInput | Prisma.ProblemSolvedScalarWhereInput[]
}

export type ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutProblemInput, Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput> | Prisma.ProblemSolvedCreateWithoutProblemInput[] | Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput | Prisma.ProblemSolvedCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput | Prisma.ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ProblemSolvedCreateManyProblemInputEnvelope
  set?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  disconnect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  delete?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  connect?: Prisma.ProblemSolvedWhereUniqueInput | Prisma.ProblemSolvedWhereUniqueInput[]
  update?: Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput | Prisma.ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ProblemSolvedUpdateManyWithWhereWithoutProblemInput | Prisma.ProblemSolvedUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ProblemSolvedScalarWhereInput | Prisma.ProblemSolvedScalarWhereInput[]
}

export type ProblemSolvedCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutSolvedByInput
}

export type ProblemSolvedUncheckedCreateWithoutUserInput = {
  id?: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemSolvedCreateOrConnectWithoutUserInput = {
  where: Prisma.ProblemSolvedWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutUserInput, Prisma.ProblemSolvedUncheckedCreateWithoutUserInput>
}

export type ProblemSolvedCreateManyUserInputEnvelope = {
  data: Prisma.ProblemSolvedCreateManyUserInput | Prisma.ProblemSolvedCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProblemSolvedUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProblemSolvedWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemSolvedUpdateWithoutUserInput, Prisma.ProblemSolvedUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutUserInput, Prisma.ProblemSolvedUncheckedCreateWithoutUserInput>
}

export type ProblemSolvedUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProblemSolvedWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateWithoutUserInput, Prisma.ProblemSolvedUncheckedUpdateWithoutUserInput>
}

export type ProblemSolvedUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProblemSolvedScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateManyMutationInput, Prisma.ProblemSolvedUncheckedUpdateManyWithoutUserInput>
}

export type ProblemSolvedScalarWhereInput = {
  AND?: Prisma.ProblemSolvedScalarWhereInput | Prisma.ProblemSolvedScalarWhereInput[]
  OR?: Prisma.ProblemSolvedScalarWhereInput[]
  NOT?: Prisma.ProblemSolvedScalarWhereInput | Prisma.ProblemSolvedScalarWhereInput[]
  id?: Prisma.StringFilter<"ProblemSolved"> | string
  userId?: Prisma.StringFilter<"ProblemSolved"> | string
  problemId?: Prisma.StringFilter<"ProblemSolved"> | string
  createdAt?: Prisma.DateTimeFilter<"ProblemSolved"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProblemSolved"> | Date | string
}

export type ProblemSolvedCreateWithoutProblemInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsSolvedInput
}

export type ProblemSolvedUncheckedCreateWithoutProblemInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemSolvedCreateOrConnectWithoutProblemInput = {
  where: Prisma.ProblemSolvedWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutProblemInput, Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput>
}

export type ProblemSolvedCreateManyProblemInputEnvelope = {
  data: Prisma.ProblemSolvedCreateManyProblemInput | Prisma.ProblemSolvedCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemSolvedWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemSolvedUpdateWithoutProblemInput, Prisma.ProblemSolvedUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.ProblemSolvedCreateWithoutProblemInput, Prisma.ProblemSolvedUncheckedCreateWithoutProblemInput>
}

export type ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ProblemSolvedWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateWithoutProblemInput, Prisma.ProblemSolvedUncheckedUpdateWithoutProblemInput>
}

export type ProblemSolvedUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.ProblemSolvedScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateManyMutationInput, Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemInput>
}

export type ProblemSolvedCreateManyUserInput = {
  id?: string
  problemId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemSolvedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutSolvedByNestedInput
}

export type ProblemSolvedUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemSolvedUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemSolvedCreateManyProblemInput = {
  id?: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemSolvedUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsSolvedNestedInput
}

export type ProblemSolvedUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemSolvedUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProblemSolvedSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemSolved"]>

export type ProblemSolvedSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemSolved"]>

export type ProblemSolvedSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problemSolved"]>

export type ProblemSolvedSelectScalar = {
  id?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProblemSolvedOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["problemSolved"]>
export type ProblemSolvedInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemSolvedIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ProblemSolvedIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $ProblemSolvedPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProblemSolved"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    problemId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["problemSolved"]>
  composites: {}
}

export type ProblemSolvedGetPayload<S extends boolean | null | undefined | ProblemSolvedDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload, S>

export type ProblemSolvedCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProblemSolvedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProblemSolvedCountAggregateInputType | true
  }

export interface ProblemSolvedDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemSolved'], meta: { name: 'ProblemSolved' } }
  /**
   * Find zero or one ProblemSolved that matches the filter.
   * @param {ProblemSolvedFindUniqueArgs} args - Arguments to find a ProblemSolved
   * @example
   * // Get one ProblemSolved
   * const problemSolved = await prisma.problemSolved.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProblemSolvedFindUniqueArgs>(args: Prisma.SelectSubset<T, ProblemSolvedFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProblemSolved that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProblemSolvedFindUniqueOrThrowArgs} args - Arguments to find a ProblemSolved
   * @example
   * // Get one ProblemSolved
   * const problemSolved = await prisma.problemSolved.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProblemSolvedFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProblemSolvedFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemSolved that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedFindFirstArgs} args - Arguments to find a ProblemSolved
   * @example
   * // Get one ProblemSolved
   * const problemSolved = await prisma.problemSolved.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProblemSolvedFindFirstArgs>(args?: Prisma.SelectSubset<T, ProblemSolvedFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProblemSolved that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedFindFirstOrThrowArgs} args - Arguments to find a ProblemSolved
   * @example
   * // Get one ProblemSolved
   * const problemSolved = await prisma.problemSolved.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProblemSolvedFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProblemSolvedFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProblemSolveds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProblemSolveds
   * const problemSolveds = await prisma.problemSolved.findMany()
   * 
   * // Get first 10 ProblemSolveds
   * const problemSolveds = await prisma.problemSolved.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const problemSolvedWithIdOnly = await prisma.problemSolved.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProblemSolvedFindManyArgs>(args?: Prisma.SelectSubset<T, ProblemSolvedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProblemSolved.
   * @param {ProblemSolvedCreateArgs} args - Arguments to create a ProblemSolved.
   * @example
   * // Create one ProblemSolved
   * const ProblemSolved = await prisma.problemSolved.create({
   *   data: {
   *     // ... data to create a ProblemSolved
   *   }
   * })
   * 
   */
  create<T extends ProblemSolvedCreateArgs>(args: Prisma.SelectSubset<T, ProblemSolvedCreateArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProblemSolveds.
   * @param {ProblemSolvedCreateManyArgs} args - Arguments to create many ProblemSolveds.
   * @example
   * // Create many ProblemSolveds
   * const problemSolved = await prisma.problemSolved.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProblemSolvedCreateManyArgs>(args?: Prisma.SelectSubset<T, ProblemSolvedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProblemSolveds and returns the data saved in the database.
   * @param {ProblemSolvedCreateManyAndReturnArgs} args - Arguments to create many ProblemSolveds.
   * @example
   * // Create many ProblemSolveds
   * const problemSolved = await prisma.problemSolved.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProblemSolveds and only return the `id`
   * const problemSolvedWithIdOnly = await prisma.problemSolved.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProblemSolvedCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProblemSolvedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProblemSolved.
   * @param {ProblemSolvedDeleteArgs} args - Arguments to delete one ProblemSolved.
   * @example
   * // Delete one ProblemSolved
   * const ProblemSolved = await prisma.problemSolved.delete({
   *   where: {
   *     // ... filter to delete one ProblemSolved
   *   }
   * })
   * 
   */
  delete<T extends ProblemSolvedDeleteArgs>(args: Prisma.SelectSubset<T, ProblemSolvedDeleteArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProblemSolved.
   * @param {ProblemSolvedUpdateArgs} args - Arguments to update one ProblemSolved.
   * @example
   * // Update one ProblemSolved
   * const problemSolved = await prisma.problemSolved.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProblemSolvedUpdateArgs>(args: Prisma.SelectSubset<T, ProblemSolvedUpdateArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProblemSolveds.
   * @param {ProblemSolvedDeleteManyArgs} args - Arguments to filter ProblemSolveds to delete.
   * @example
   * // Delete a few ProblemSolveds
   * const { count } = await prisma.problemSolved.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProblemSolvedDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProblemSolvedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemSolveds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProblemSolveds
   * const problemSolved = await prisma.problemSolved.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProblemSolvedUpdateManyArgs>(args: Prisma.SelectSubset<T, ProblemSolvedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProblemSolveds and returns the data updated in the database.
   * @param {ProblemSolvedUpdateManyAndReturnArgs} args - Arguments to update many ProblemSolveds.
   * @example
   * // Update many ProblemSolveds
   * const problemSolved = await prisma.problemSolved.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProblemSolveds and only return the `id`
   * const problemSolvedWithIdOnly = await prisma.problemSolved.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProblemSolvedUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProblemSolvedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProblemSolved.
   * @param {ProblemSolvedUpsertArgs} args - Arguments to update or create a ProblemSolved.
   * @example
   * // Update or create a ProblemSolved
   * const problemSolved = await prisma.problemSolved.upsert({
   *   create: {
   *     // ... data to create a ProblemSolved
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProblemSolved we want to update
   *   }
   * })
   */
  upsert<T extends ProblemSolvedUpsertArgs>(args: Prisma.SelectSubset<T, ProblemSolvedUpsertArgs<ExtArgs>>): Prisma.Prisma__ProblemSolvedClient<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProblemSolveds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedCountArgs} args - Arguments to filter ProblemSolveds to count.
   * @example
   * // Count the number of ProblemSolveds
   * const count = await prisma.problemSolved.count({
   *   where: {
   *     // ... the filter for the ProblemSolveds we want to count
   *   }
   * })
  **/
  count<T extends ProblemSolvedCountArgs>(
    args?: Prisma.Subset<T, ProblemSolvedCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProblemSolvedCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProblemSolved.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProblemSolvedAggregateArgs>(args: Prisma.Subset<T, ProblemSolvedAggregateArgs>): Prisma.PrismaPromise<GetProblemSolvedAggregateType<T>>

  /**
   * Group by ProblemSolved.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemSolvedGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProblemSolvedGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProblemSolvedGroupByArgs['orderBy'] }
      : { orderBy?: ProblemSolvedGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProblemSolvedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemSolvedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProblemSolved model
 */
readonly fields: ProblemSolvedFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProblemSolved.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProblemSolvedClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProblemSolved model
 */
export interface ProblemSolvedFieldRefs {
  readonly id: Prisma.FieldRef<"ProblemSolved", 'String'>
  readonly userId: Prisma.FieldRef<"ProblemSolved", 'String'>
  readonly problemId: Prisma.FieldRef<"ProblemSolved", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProblemSolved", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProblemSolved", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProblemSolved findUnique
 */
export type ProblemSolvedFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * Filter, which ProblemSolved to fetch.
   */
  where: Prisma.ProblemSolvedWhereUniqueInput
}

/**
 * ProblemSolved findUniqueOrThrow
 */
export type ProblemSolvedFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * Filter, which ProblemSolved to fetch.
   */
  where: Prisma.ProblemSolvedWhereUniqueInput
}

/**
 * ProblemSolved findFirst
 */
export type ProblemSolvedFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * Filter, which ProblemSolved to fetch.
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemSolveds to fetch.
   */
  orderBy?: Prisma.ProblemSolvedOrderByWithRelationInput | Prisma.ProblemSolvedOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemSolveds.
   */
  cursor?: Prisma.ProblemSolvedWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemSolveds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemSolveds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemSolveds.
   */
  distinct?: Prisma.ProblemSolvedScalarFieldEnum | Prisma.ProblemSolvedScalarFieldEnum[]
}

/**
 * ProblemSolved findFirstOrThrow
 */
export type ProblemSolvedFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * Filter, which ProblemSolved to fetch.
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemSolveds to fetch.
   */
  orderBy?: Prisma.ProblemSolvedOrderByWithRelationInput | Prisma.ProblemSolvedOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProblemSolveds.
   */
  cursor?: Prisma.ProblemSolvedWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemSolveds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemSolveds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProblemSolveds.
   */
  distinct?: Prisma.ProblemSolvedScalarFieldEnum | Prisma.ProblemSolvedScalarFieldEnum[]
}

/**
 * ProblemSolved findMany
 */
export type ProblemSolvedFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * Filter, which ProblemSolveds to fetch.
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProblemSolveds to fetch.
   */
  orderBy?: Prisma.ProblemSolvedOrderByWithRelationInput | Prisma.ProblemSolvedOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProblemSolveds.
   */
  cursor?: Prisma.ProblemSolvedWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProblemSolveds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProblemSolveds.
   */
  skip?: number
  distinct?: Prisma.ProblemSolvedScalarFieldEnum | Prisma.ProblemSolvedScalarFieldEnum[]
}

/**
 * ProblemSolved create
 */
export type ProblemSolvedCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * The data needed to create a ProblemSolved.
   */
  data: Prisma.XOR<Prisma.ProblemSolvedCreateInput, Prisma.ProblemSolvedUncheckedCreateInput>
}

/**
 * ProblemSolved createMany
 */
export type ProblemSolvedCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProblemSolveds.
   */
  data: Prisma.ProblemSolvedCreateManyInput | Prisma.ProblemSolvedCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProblemSolved createManyAndReturn
 */
export type ProblemSolvedCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * The data used to create many ProblemSolveds.
   */
  data: Prisma.ProblemSolvedCreateManyInput | Prisma.ProblemSolvedCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemSolved update
 */
export type ProblemSolvedUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * The data needed to update a ProblemSolved.
   */
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateInput, Prisma.ProblemSolvedUncheckedUpdateInput>
  /**
   * Choose, which ProblemSolved to update.
   */
  where: Prisma.ProblemSolvedWhereUniqueInput
}

/**
 * ProblemSolved updateMany
 */
export type ProblemSolvedUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProblemSolveds.
   */
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateManyMutationInput, Prisma.ProblemSolvedUncheckedUpdateManyInput>
  /**
   * Filter which ProblemSolveds to update
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * Limit how many ProblemSolveds to update.
   */
  limit?: number
}

/**
 * ProblemSolved updateManyAndReturn
 */
export type ProblemSolvedUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * The data used to update ProblemSolveds.
   */
  data: Prisma.XOR<Prisma.ProblemSolvedUpdateManyMutationInput, Prisma.ProblemSolvedUncheckedUpdateManyInput>
  /**
   * Filter which ProblemSolveds to update
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * Limit how many ProblemSolveds to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProblemSolved upsert
 */
export type ProblemSolvedUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * The filter to search for the ProblemSolved to update in case it exists.
   */
  where: Prisma.ProblemSolvedWhereUniqueInput
  /**
   * In case the ProblemSolved found by the `where` argument doesn't exist, create a new ProblemSolved with this data.
   */
  create: Prisma.XOR<Prisma.ProblemSolvedCreateInput, Prisma.ProblemSolvedUncheckedCreateInput>
  /**
   * In case the ProblemSolved was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProblemSolvedUpdateInput, Prisma.ProblemSolvedUncheckedUpdateInput>
}

/**
 * ProblemSolved delete
 */
export type ProblemSolvedDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  /**
   * Filter which ProblemSolved to delete.
   */
  where: Prisma.ProblemSolvedWhereUniqueInput
}

/**
 * ProblemSolved deleteMany
 */
export type ProblemSolvedDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProblemSolveds to delete
   */
  where?: Prisma.ProblemSolvedWhereInput
  /**
   * Limit how many ProblemSolveds to delete.
   */
  limit?: number
}

/**
 * ProblemSolved without action
 */
export type ProblemSolvedDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
}
