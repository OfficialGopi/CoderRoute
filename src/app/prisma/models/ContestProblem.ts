
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ContestProblem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ContestProblem
 * 
 */
export type ContestProblemModel = runtime.Types.Result.DefaultSelection<Prisma.$ContestProblemPayload>

export type AggregateContestProblem = {
  _count: ContestProblemCountAggregateOutputType | null
  _min: ContestProblemMinAggregateOutputType | null
  _max: ContestProblemMaxAggregateOutputType | null
}

export type ContestProblemMinAggregateOutputType = {
  id: string | null
  contestId: string | null
  problemId: string | null
}

export type ContestProblemMaxAggregateOutputType = {
  id: string | null
  contestId: string | null
  problemId: string | null
}

export type ContestProblemCountAggregateOutputType = {
  id: number
  contestId: number
  problemId: number
  _all: number
}


export type ContestProblemMinAggregateInputType = {
  id?: true
  contestId?: true
  problemId?: true
}

export type ContestProblemMaxAggregateInputType = {
  id?: true
  contestId?: true
  problemId?: true
}

export type ContestProblemCountAggregateInputType = {
  id?: true
  contestId?: true
  problemId?: true
  _all?: true
}

export type ContestProblemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContestProblem to aggregate.
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestProblems to fetch.
   */
  orderBy?: Prisma.ContestProblemOrderByWithRelationInput | Prisma.ContestProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContestProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestProblems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestProblems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ContestProblems
  **/
  _count?: true | ContestProblemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContestProblemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContestProblemMaxAggregateInputType
}

export type GetContestProblemAggregateType<T extends ContestProblemAggregateArgs> = {
      [P in keyof T & keyof AggregateContestProblem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContestProblem[P]>
    : Prisma.GetScalarType<T[P], AggregateContestProblem[P]>
}




export type ContestProblemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContestProblemWhereInput
  orderBy?: Prisma.ContestProblemOrderByWithAggregationInput | Prisma.ContestProblemOrderByWithAggregationInput[]
  by: Prisma.ContestProblemScalarFieldEnum[] | Prisma.ContestProblemScalarFieldEnum
  having?: Prisma.ContestProblemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContestProblemCountAggregateInputType | true
  _min?: ContestProblemMinAggregateInputType
  _max?: ContestProblemMaxAggregateInputType
}

export type ContestProblemGroupByOutputType = {
  id: string
  contestId: string
  problemId: string
  _count: ContestProblemCountAggregateOutputType | null
  _min: ContestProblemMinAggregateOutputType | null
  _max: ContestProblemMaxAggregateOutputType | null
}

type GetContestProblemGroupByPayload<T extends ContestProblemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContestProblemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContestProblemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContestProblemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContestProblemGroupByOutputType[P]>
      }
    >
  > 



export type ContestProblemWhereInput = {
  AND?: Prisma.ContestProblemWhereInput | Prisma.ContestProblemWhereInput[]
  OR?: Prisma.ContestProblemWhereInput[]
  NOT?: Prisma.ContestProblemWhereInput | Prisma.ContestProblemWhereInput[]
  id?: Prisma.StringFilter<"ContestProblem"> | string
  contestId?: Prisma.StringFilter<"ContestProblem"> | string
  problemId?: Prisma.StringFilter<"ContestProblem"> | string
  contest?: Prisma.XOR<Prisma.ContestScalarRelationFilter, Prisma.ContestWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type ContestProblemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  contest?: Prisma.ContestOrderByWithRelationInput
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type ContestProblemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ContestProblemWhereInput | Prisma.ContestProblemWhereInput[]
  OR?: Prisma.ContestProblemWhereInput[]
  NOT?: Prisma.ContestProblemWhereInput | Prisma.ContestProblemWhereInput[]
  contestId?: Prisma.StringFilter<"ContestProblem"> | string
  problemId?: Prisma.StringFilter<"ContestProblem"> | string
  contest?: Prisma.XOR<Prisma.ContestScalarRelationFilter, Prisma.ContestWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id">

export type ContestProblemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  _count?: Prisma.ContestProblemCountOrderByAggregateInput
  _max?: Prisma.ContestProblemMaxOrderByAggregateInput
  _min?: Prisma.ContestProblemMinOrderByAggregateInput
}

export type ContestProblemScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContestProblemScalarWhereWithAggregatesInput | Prisma.ContestProblemScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContestProblemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContestProblemScalarWhereWithAggregatesInput | Prisma.ContestProblemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ContestProblem"> | string
  contestId?: Prisma.StringWithAggregatesFilter<"ContestProblem"> | string
  problemId?: Prisma.StringWithAggregatesFilter<"ContestProblem"> | string
}

export type ContestProblemCreateInput = {
  id?: string
  contest: Prisma.ContestCreateNestedOneWithoutProblemsInput
  problem: Prisma.ProblemCreateNestedOneWithoutContestProblemInput
}

export type ContestProblemUncheckedCreateInput = {
  id?: string
  contestId: string
  problemId: string
}

export type ContestProblemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contest?: Prisma.ContestUpdateOneRequiredWithoutProblemsNestedInput
  problem?: Prisma.ProblemUpdateOneRequiredWithoutContestProblemNestedInput
}

export type ContestProblemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ContestProblemCreateManyInput = {
  id?: string
  contestId: string
  problemId: string
}

export type ContestProblemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ContestProblemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ContestProblemListRelationFilter = {
  every?: Prisma.ContestProblemWhereInput
  some?: Prisma.ContestProblemWhereInput
  none?: Prisma.ContestProblemWhereInput
}

export type ContestProblemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ContestProblemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
}

export type ContestProblemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
}

export type ContestProblemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
}

export type ContestProblemCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutProblemInput, Prisma.ContestProblemUncheckedCreateWithoutProblemInput> | Prisma.ContestProblemCreateWithoutProblemInput[] | Prisma.ContestProblemUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutProblemInput | Prisma.ContestProblemCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ContestProblemCreateManyProblemInputEnvelope
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
}

export type ContestProblemUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutProblemInput, Prisma.ContestProblemUncheckedCreateWithoutProblemInput> | Prisma.ContestProblemCreateWithoutProblemInput[] | Prisma.ContestProblemUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutProblemInput | Prisma.ContestProblemCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.ContestProblemCreateManyProblemInputEnvelope
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
}

export type ContestProblemUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutProblemInput, Prisma.ContestProblemUncheckedCreateWithoutProblemInput> | Prisma.ContestProblemCreateWithoutProblemInput[] | Prisma.ContestProblemUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutProblemInput | Prisma.ContestProblemCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ContestProblemUpsertWithWhereUniqueWithoutProblemInput | Prisma.ContestProblemUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ContestProblemCreateManyProblemInputEnvelope
  set?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  disconnect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  delete?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  update?: Prisma.ContestProblemUpdateWithWhereUniqueWithoutProblemInput | Prisma.ContestProblemUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ContestProblemUpdateManyWithWhereWithoutProblemInput | Prisma.ContestProblemUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ContestProblemScalarWhereInput | Prisma.ContestProblemScalarWhereInput[]
}

export type ContestProblemUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutProblemInput, Prisma.ContestProblemUncheckedCreateWithoutProblemInput> | Prisma.ContestProblemCreateWithoutProblemInput[] | Prisma.ContestProblemUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutProblemInput | Prisma.ContestProblemCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.ContestProblemUpsertWithWhereUniqueWithoutProblemInput | Prisma.ContestProblemUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.ContestProblemCreateManyProblemInputEnvelope
  set?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  disconnect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  delete?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  update?: Prisma.ContestProblemUpdateWithWhereUniqueWithoutProblemInput | Prisma.ContestProblemUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.ContestProblemUpdateManyWithWhereWithoutProblemInput | Prisma.ContestProblemUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.ContestProblemScalarWhereInput | Prisma.ContestProblemScalarWhereInput[]
}

export type ContestProblemCreateNestedManyWithoutContestInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutContestInput, Prisma.ContestProblemUncheckedCreateWithoutContestInput> | Prisma.ContestProblemCreateWithoutContestInput[] | Prisma.ContestProblemUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutContestInput | Prisma.ContestProblemCreateOrConnectWithoutContestInput[]
  createMany?: Prisma.ContestProblemCreateManyContestInputEnvelope
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
}

export type ContestProblemUncheckedCreateNestedManyWithoutContestInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutContestInput, Prisma.ContestProblemUncheckedCreateWithoutContestInput> | Prisma.ContestProblemCreateWithoutContestInput[] | Prisma.ContestProblemUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutContestInput | Prisma.ContestProblemCreateOrConnectWithoutContestInput[]
  createMany?: Prisma.ContestProblemCreateManyContestInputEnvelope
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
}

export type ContestProblemUpdateManyWithoutContestNestedInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutContestInput, Prisma.ContestProblemUncheckedCreateWithoutContestInput> | Prisma.ContestProblemCreateWithoutContestInput[] | Prisma.ContestProblemUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutContestInput | Prisma.ContestProblemCreateOrConnectWithoutContestInput[]
  upsert?: Prisma.ContestProblemUpsertWithWhereUniqueWithoutContestInput | Prisma.ContestProblemUpsertWithWhereUniqueWithoutContestInput[]
  createMany?: Prisma.ContestProblemCreateManyContestInputEnvelope
  set?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  disconnect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  delete?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  update?: Prisma.ContestProblemUpdateWithWhereUniqueWithoutContestInput | Prisma.ContestProblemUpdateWithWhereUniqueWithoutContestInput[]
  updateMany?: Prisma.ContestProblemUpdateManyWithWhereWithoutContestInput | Prisma.ContestProblemUpdateManyWithWhereWithoutContestInput[]
  deleteMany?: Prisma.ContestProblemScalarWhereInput | Prisma.ContestProblemScalarWhereInput[]
}

export type ContestProblemUncheckedUpdateManyWithoutContestNestedInput = {
  create?: Prisma.XOR<Prisma.ContestProblemCreateWithoutContestInput, Prisma.ContestProblemUncheckedCreateWithoutContestInput> | Prisma.ContestProblemCreateWithoutContestInput[] | Prisma.ContestProblemUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestProblemCreateOrConnectWithoutContestInput | Prisma.ContestProblemCreateOrConnectWithoutContestInput[]
  upsert?: Prisma.ContestProblemUpsertWithWhereUniqueWithoutContestInput | Prisma.ContestProblemUpsertWithWhereUniqueWithoutContestInput[]
  createMany?: Prisma.ContestProblemCreateManyContestInputEnvelope
  set?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  disconnect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  delete?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  connect?: Prisma.ContestProblemWhereUniqueInput | Prisma.ContestProblemWhereUniqueInput[]
  update?: Prisma.ContestProblemUpdateWithWhereUniqueWithoutContestInput | Prisma.ContestProblemUpdateWithWhereUniqueWithoutContestInput[]
  updateMany?: Prisma.ContestProblemUpdateManyWithWhereWithoutContestInput | Prisma.ContestProblemUpdateManyWithWhereWithoutContestInput[]
  deleteMany?: Prisma.ContestProblemScalarWhereInput | Prisma.ContestProblemScalarWhereInput[]
}

export type ContestProblemCreateWithoutProblemInput = {
  id?: string
  contest: Prisma.ContestCreateNestedOneWithoutProblemsInput
}

export type ContestProblemUncheckedCreateWithoutProblemInput = {
  id?: string
  contestId: string
}

export type ContestProblemCreateOrConnectWithoutProblemInput = {
  where: Prisma.ContestProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ContestProblemCreateWithoutProblemInput, Prisma.ContestProblemUncheckedCreateWithoutProblemInput>
}

export type ContestProblemCreateManyProblemInputEnvelope = {
  data: Prisma.ContestProblemCreateManyProblemInput | Prisma.ContestProblemCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type ContestProblemUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ContestProblemWhereUniqueInput
  update: Prisma.XOR<Prisma.ContestProblemUpdateWithoutProblemInput, Prisma.ContestProblemUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.ContestProblemCreateWithoutProblemInput, Prisma.ContestProblemUncheckedCreateWithoutProblemInput>
}

export type ContestProblemUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.ContestProblemWhereUniqueInput
  data: Prisma.XOR<Prisma.ContestProblemUpdateWithoutProblemInput, Prisma.ContestProblemUncheckedUpdateWithoutProblemInput>
}

export type ContestProblemUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.ContestProblemScalarWhereInput
  data: Prisma.XOR<Prisma.ContestProblemUpdateManyMutationInput, Prisma.ContestProblemUncheckedUpdateManyWithoutProblemInput>
}

export type ContestProblemScalarWhereInput = {
  AND?: Prisma.ContestProblemScalarWhereInput | Prisma.ContestProblemScalarWhereInput[]
  OR?: Prisma.ContestProblemScalarWhereInput[]
  NOT?: Prisma.ContestProblemScalarWhereInput | Prisma.ContestProblemScalarWhereInput[]
  id?: Prisma.StringFilter<"ContestProblem"> | string
  contestId?: Prisma.StringFilter<"ContestProblem"> | string
  problemId?: Prisma.StringFilter<"ContestProblem"> | string
}

export type ContestProblemCreateWithoutContestInput = {
  id?: string
  problem: Prisma.ProblemCreateNestedOneWithoutContestProblemInput
}

export type ContestProblemUncheckedCreateWithoutContestInput = {
  id?: string
  problemId: string
}

export type ContestProblemCreateOrConnectWithoutContestInput = {
  where: Prisma.ContestProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ContestProblemCreateWithoutContestInput, Prisma.ContestProblemUncheckedCreateWithoutContestInput>
}

export type ContestProblemCreateManyContestInputEnvelope = {
  data: Prisma.ContestProblemCreateManyContestInput | Prisma.ContestProblemCreateManyContestInput[]
  skipDuplicates?: boolean
}

export type ContestProblemUpsertWithWhereUniqueWithoutContestInput = {
  where: Prisma.ContestProblemWhereUniqueInput
  update: Prisma.XOR<Prisma.ContestProblemUpdateWithoutContestInput, Prisma.ContestProblemUncheckedUpdateWithoutContestInput>
  create: Prisma.XOR<Prisma.ContestProblemCreateWithoutContestInput, Prisma.ContestProblemUncheckedCreateWithoutContestInput>
}

export type ContestProblemUpdateWithWhereUniqueWithoutContestInput = {
  where: Prisma.ContestProblemWhereUniqueInput
  data: Prisma.XOR<Prisma.ContestProblemUpdateWithoutContestInput, Prisma.ContestProblemUncheckedUpdateWithoutContestInput>
}

export type ContestProblemUpdateManyWithWhereWithoutContestInput = {
  where: Prisma.ContestProblemScalarWhereInput
  data: Prisma.XOR<Prisma.ContestProblemUpdateManyMutationInput, Prisma.ContestProblemUncheckedUpdateManyWithoutContestInput>
}

export type ContestProblemCreateManyProblemInput = {
  id?: string
  contestId: string
}

export type ContestProblemUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contest?: Prisma.ContestUpdateOneRequiredWithoutProblemsNestedInput
}

export type ContestProblemUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ContestProblemUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ContestProblemCreateManyContestInput = {
  id?: string
  problemId: string
}

export type ContestProblemUpdateWithoutContestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutContestProblemNestedInput
}

export type ContestProblemUncheckedUpdateWithoutContestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ContestProblemUncheckedUpdateManyWithoutContestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ContestProblemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contestId?: boolean
  problemId?: boolean
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contestProblem"]>

export type ContestProblemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contestId?: boolean
  problemId?: boolean
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contestProblem"]>

export type ContestProblemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contestId?: boolean
  problemId?: boolean
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contestProblem"]>

export type ContestProblemSelectScalar = {
  id?: boolean
  contestId?: boolean
  problemId?: boolean
}

export type ContestProblemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "contestId" | "problemId", ExtArgs["result"]["contestProblem"]>
export type ContestProblemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ContestProblemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type ContestProblemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $ContestProblemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ContestProblem"
  objects: {
    contest: Prisma.$ContestPayload<ExtArgs>
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    contestId: string
    problemId: string
  }, ExtArgs["result"]["contestProblem"]>
  composites: {}
}

export type ContestProblemGetPayload<S extends boolean | null | undefined | ContestProblemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload, S>

export type ContestProblemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContestProblemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContestProblemCountAggregateInputType | true
  }

export interface ContestProblemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContestProblem'], meta: { name: 'ContestProblem' } }
  /**
   * Find zero or one ContestProblem that matches the filter.
   * @param {ContestProblemFindUniqueArgs} args - Arguments to find a ContestProblem
   * @example
   * // Get one ContestProblem
   * const contestProblem = await prisma.contestProblem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContestProblemFindUniqueArgs>(args: Prisma.SelectSubset<T, ContestProblemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ContestProblem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContestProblemFindUniqueOrThrowArgs} args - Arguments to find a ContestProblem
   * @example
   * // Get one ContestProblem
   * const contestProblem = await prisma.contestProblem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContestProblemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContestProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContestProblem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemFindFirstArgs} args - Arguments to find a ContestProblem
   * @example
   * // Get one ContestProblem
   * const contestProblem = await prisma.contestProblem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContestProblemFindFirstArgs>(args?: Prisma.SelectSubset<T, ContestProblemFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContestProblem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemFindFirstOrThrowArgs} args - Arguments to find a ContestProblem
   * @example
   * // Get one ContestProblem
   * const contestProblem = await prisma.contestProblem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContestProblemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContestProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ContestProblems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ContestProblems
   * const contestProblems = await prisma.contestProblem.findMany()
   * 
   * // Get first 10 ContestProblems
   * const contestProblems = await prisma.contestProblem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contestProblemWithIdOnly = await prisma.contestProblem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContestProblemFindManyArgs>(args?: Prisma.SelectSubset<T, ContestProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ContestProblem.
   * @param {ContestProblemCreateArgs} args - Arguments to create a ContestProblem.
   * @example
   * // Create one ContestProblem
   * const ContestProblem = await prisma.contestProblem.create({
   *   data: {
   *     // ... data to create a ContestProblem
   *   }
   * })
   * 
   */
  create<T extends ContestProblemCreateArgs>(args: Prisma.SelectSubset<T, ContestProblemCreateArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ContestProblems.
   * @param {ContestProblemCreateManyArgs} args - Arguments to create many ContestProblems.
   * @example
   * // Create many ContestProblems
   * const contestProblem = await prisma.contestProblem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContestProblemCreateManyArgs>(args?: Prisma.SelectSubset<T, ContestProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ContestProblems and returns the data saved in the database.
   * @param {ContestProblemCreateManyAndReturnArgs} args - Arguments to create many ContestProblems.
   * @example
   * // Create many ContestProblems
   * const contestProblem = await prisma.contestProblem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ContestProblems and only return the `id`
   * const contestProblemWithIdOnly = await prisma.contestProblem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContestProblemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContestProblemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ContestProblem.
   * @param {ContestProblemDeleteArgs} args - Arguments to delete one ContestProblem.
   * @example
   * // Delete one ContestProblem
   * const ContestProblem = await prisma.contestProblem.delete({
   *   where: {
   *     // ... filter to delete one ContestProblem
   *   }
   * })
   * 
   */
  delete<T extends ContestProblemDeleteArgs>(args: Prisma.SelectSubset<T, ContestProblemDeleteArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ContestProblem.
   * @param {ContestProblemUpdateArgs} args - Arguments to update one ContestProblem.
   * @example
   * // Update one ContestProblem
   * const contestProblem = await prisma.contestProblem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContestProblemUpdateArgs>(args: Prisma.SelectSubset<T, ContestProblemUpdateArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ContestProblems.
   * @param {ContestProblemDeleteManyArgs} args - Arguments to filter ContestProblems to delete.
   * @example
   * // Delete a few ContestProblems
   * const { count } = await prisma.contestProblem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContestProblemDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContestProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContestProblems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ContestProblems
   * const contestProblem = await prisma.contestProblem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContestProblemUpdateManyArgs>(args: Prisma.SelectSubset<T, ContestProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContestProblems and returns the data updated in the database.
   * @param {ContestProblemUpdateManyAndReturnArgs} args - Arguments to update many ContestProblems.
   * @example
   * // Update many ContestProblems
   * const contestProblem = await prisma.contestProblem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ContestProblems and only return the `id`
   * const contestProblemWithIdOnly = await prisma.contestProblem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContestProblemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContestProblemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ContestProblem.
   * @param {ContestProblemUpsertArgs} args - Arguments to update or create a ContestProblem.
   * @example
   * // Update or create a ContestProblem
   * const contestProblem = await prisma.contestProblem.upsert({
   *   create: {
   *     // ... data to create a ContestProblem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ContestProblem we want to update
   *   }
   * })
   */
  upsert<T extends ContestProblemUpsertArgs>(args: Prisma.SelectSubset<T, ContestProblemUpsertArgs<ExtArgs>>): Prisma.Prisma__ContestProblemClient<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ContestProblems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemCountArgs} args - Arguments to filter ContestProblems to count.
   * @example
   * // Count the number of ContestProblems
   * const count = await prisma.contestProblem.count({
   *   where: {
   *     // ... the filter for the ContestProblems we want to count
   *   }
   * })
  **/
  count<T extends ContestProblemCountArgs>(
    args?: Prisma.Subset<T, ContestProblemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContestProblemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ContestProblem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContestProblemAggregateArgs>(args: Prisma.Subset<T, ContestProblemAggregateArgs>): Prisma.PrismaPromise<GetContestProblemAggregateType<T>>

  /**
   * Group by ContestProblem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestProblemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContestProblemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContestProblemGroupByArgs['orderBy'] }
      : { orderBy?: ContestProblemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContestProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContestProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ContestProblem model
 */
readonly fields: ContestProblemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ContestProblem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContestProblemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  contest<T extends Prisma.ContestDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ContestDefaultArgs<ExtArgs>>): Prisma.Prisma__ContestClient<runtime.Types.Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ContestProblem model
 */
export interface ContestProblemFieldRefs {
  readonly id: Prisma.FieldRef<"ContestProblem", 'String'>
  readonly contestId: Prisma.FieldRef<"ContestProblem", 'String'>
  readonly problemId: Prisma.FieldRef<"ContestProblem", 'String'>
}
    

// Custom InputTypes
/**
 * ContestProblem findUnique
 */
export type ContestProblemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * Filter, which ContestProblem to fetch.
   */
  where: Prisma.ContestProblemWhereUniqueInput
}

/**
 * ContestProblem findUniqueOrThrow
 */
export type ContestProblemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * Filter, which ContestProblem to fetch.
   */
  where: Prisma.ContestProblemWhereUniqueInput
}

/**
 * ContestProblem findFirst
 */
export type ContestProblemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * Filter, which ContestProblem to fetch.
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestProblems to fetch.
   */
  orderBy?: Prisma.ContestProblemOrderByWithRelationInput | Prisma.ContestProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContestProblems.
   */
  cursor?: Prisma.ContestProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestProblems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestProblems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContestProblems.
   */
  distinct?: Prisma.ContestProblemScalarFieldEnum | Prisma.ContestProblemScalarFieldEnum[]
}

/**
 * ContestProblem findFirstOrThrow
 */
export type ContestProblemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * Filter, which ContestProblem to fetch.
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestProblems to fetch.
   */
  orderBy?: Prisma.ContestProblemOrderByWithRelationInput | Prisma.ContestProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContestProblems.
   */
  cursor?: Prisma.ContestProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestProblems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestProblems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContestProblems.
   */
  distinct?: Prisma.ContestProblemScalarFieldEnum | Prisma.ContestProblemScalarFieldEnum[]
}

/**
 * ContestProblem findMany
 */
export type ContestProblemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * Filter, which ContestProblems to fetch.
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestProblems to fetch.
   */
  orderBy?: Prisma.ContestProblemOrderByWithRelationInput | Prisma.ContestProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ContestProblems.
   */
  cursor?: Prisma.ContestProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestProblems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestProblems.
   */
  skip?: number
  distinct?: Prisma.ContestProblemScalarFieldEnum | Prisma.ContestProblemScalarFieldEnum[]
}

/**
 * ContestProblem create
 */
export type ContestProblemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * The data needed to create a ContestProblem.
   */
  data: Prisma.XOR<Prisma.ContestProblemCreateInput, Prisma.ContestProblemUncheckedCreateInput>
}

/**
 * ContestProblem createMany
 */
export type ContestProblemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ContestProblems.
   */
  data: Prisma.ContestProblemCreateManyInput | Prisma.ContestProblemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ContestProblem createManyAndReturn
 */
export type ContestProblemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * The data used to create many ContestProblems.
   */
  data: Prisma.ContestProblemCreateManyInput | Prisma.ContestProblemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ContestProblem update
 */
export type ContestProblemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * The data needed to update a ContestProblem.
   */
  data: Prisma.XOR<Prisma.ContestProblemUpdateInput, Prisma.ContestProblemUncheckedUpdateInput>
  /**
   * Choose, which ContestProblem to update.
   */
  where: Prisma.ContestProblemWhereUniqueInput
}

/**
 * ContestProblem updateMany
 */
export type ContestProblemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ContestProblems.
   */
  data: Prisma.XOR<Prisma.ContestProblemUpdateManyMutationInput, Prisma.ContestProblemUncheckedUpdateManyInput>
  /**
   * Filter which ContestProblems to update
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * Limit how many ContestProblems to update.
   */
  limit?: number
}

/**
 * ContestProblem updateManyAndReturn
 */
export type ContestProblemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * The data used to update ContestProblems.
   */
  data: Prisma.XOR<Prisma.ContestProblemUpdateManyMutationInput, Prisma.ContestProblemUncheckedUpdateManyInput>
  /**
   * Filter which ContestProblems to update
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * Limit how many ContestProblems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ContestProblem upsert
 */
export type ContestProblemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * The filter to search for the ContestProblem to update in case it exists.
   */
  where: Prisma.ContestProblemWhereUniqueInput
  /**
   * In case the ContestProblem found by the `where` argument doesn't exist, create a new ContestProblem with this data.
   */
  create: Prisma.XOR<Prisma.ContestProblemCreateInput, Prisma.ContestProblemUncheckedCreateInput>
  /**
   * In case the ContestProblem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContestProblemUpdateInput, Prisma.ContestProblemUncheckedUpdateInput>
}

/**
 * ContestProblem delete
 */
export type ContestProblemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  /**
   * Filter which ContestProblem to delete.
   */
  where: Prisma.ContestProblemWhereUniqueInput
}

/**
 * ContestProblem deleteMany
 */
export type ContestProblemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContestProblems to delete
   */
  where?: Prisma.ContestProblemWhereInput
  /**
   * Limit how many ContestProblems to delete.
   */
  limit?: number
}

/**
 * ContestProblem without action
 */
export type ContestProblemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
}
