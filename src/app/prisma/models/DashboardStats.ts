
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DashboardStats` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DashboardStats
 * 
 */
export type DashboardStatsModel = runtime.Types.Result.DefaultSelection<Prisma.$DashboardStatsPayload>

export type AggregateDashboardStats = {
  _count: DashboardStatsCountAggregateOutputType | null
  _avg: DashboardStatsAvgAggregateOutputType | null
  _sum: DashboardStatsSumAggregateOutputType | null
  _min: DashboardStatsMinAggregateOutputType | null
  _max: DashboardStatsMaxAggregateOutputType | null
}

export type DashboardStatsAvgAggregateOutputType = {
  totalSubmissions: number | null
  problemsSolved: number | null
  easySolved: number | null
  mediumSolved: number | null
  hardSolved: number | null
  accuracy: number | null
}

export type DashboardStatsSumAggregateOutputType = {
  totalSubmissions: number | null
  problemsSolved: number | null
  easySolved: number | null
  mediumSolved: number | null
  hardSolved: number | null
  accuracy: number | null
}

export type DashboardStatsMinAggregateOutputType = {
  id: string | null
  userId: string | null
  totalSubmissions: number | null
  problemsSolved: number | null
  easySolved: number | null
  mediumSolved: number | null
  hardSolved: number | null
  accuracy: number | null
  lastActive: Date | null
  updatedAt: Date | null
}

export type DashboardStatsMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  totalSubmissions: number | null
  problemsSolved: number | null
  easySolved: number | null
  mediumSolved: number | null
  hardSolved: number | null
  accuracy: number | null
  lastActive: Date | null
  updatedAt: Date | null
}

export type DashboardStatsCountAggregateOutputType = {
  id: number
  userId: number
  totalSubmissions: number
  problemsSolved: number
  easySolved: number
  mediumSolved: number
  hardSolved: number
  accuracy: number
  lastActive: number
  updatedAt: number
  _all: number
}


export type DashboardStatsAvgAggregateInputType = {
  totalSubmissions?: true
  problemsSolved?: true
  easySolved?: true
  mediumSolved?: true
  hardSolved?: true
  accuracy?: true
}

export type DashboardStatsSumAggregateInputType = {
  totalSubmissions?: true
  problemsSolved?: true
  easySolved?: true
  mediumSolved?: true
  hardSolved?: true
  accuracy?: true
}

export type DashboardStatsMinAggregateInputType = {
  id?: true
  userId?: true
  totalSubmissions?: true
  problemsSolved?: true
  easySolved?: true
  mediumSolved?: true
  hardSolved?: true
  accuracy?: true
  lastActive?: true
  updatedAt?: true
}

export type DashboardStatsMaxAggregateInputType = {
  id?: true
  userId?: true
  totalSubmissions?: true
  problemsSolved?: true
  easySolved?: true
  mediumSolved?: true
  hardSolved?: true
  accuracy?: true
  lastActive?: true
  updatedAt?: true
}

export type DashboardStatsCountAggregateInputType = {
  id?: true
  userId?: true
  totalSubmissions?: true
  problemsSolved?: true
  easySolved?: true
  mediumSolved?: true
  hardSolved?: true
  accuracy?: true
  lastActive?: true
  updatedAt?: true
  _all?: true
}

export type DashboardStatsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DashboardStats to aggregate.
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardStats to fetch.
   */
  orderBy?: Prisma.DashboardStatsOrderByWithRelationInput | Prisma.DashboardStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DashboardStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DashboardStats
  **/
  _count?: true | DashboardStatsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DashboardStatsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DashboardStatsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DashboardStatsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DashboardStatsMaxAggregateInputType
}

export type GetDashboardStatsAggregateType<T extends DashboardStatsAggregateArgs> = {
      [P in keyof T & keyof AggregateDashboardStats]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDashboardStats[P]>
    : Prisma.GetScalarType<T[P], AggregateDashboardStats[P]>
}




export type DashboardStatsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DashboardStatsWhereInput
  orderBy?: Prisma.DashboardStatsOrderByWithAggregationInput | Prisma.DashboardStatsOrderByWithAggregationInput[]
  by: Prisma.DashboardStatsScalarFieldEnum[] | Prisma.DashboardStatsScalarFieldEnum
  having?: Prisma.DashboardStatsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DashboardStatsCountAggregateInputType | true
  _avg?: DashboardStatsAvgAggregateInputType
  _sum?: DashboardStatsSumAggregateInputType
  _min?: DashboardStatsMinAggregateInputType
  _max?: DashboardStatsMaxAggregateInputType
}

export type DashboardStatsGroupByOutputType = {
  id: string
  userId: string
  totalSubmissions: number
  problemsSolved: number
  easySolved: number
  mediumSolved: number
  hardSolved: number
  accuracy: number
  lastActive: Date | null
  updatedAt: Date
  _count: DashboardStatsCountAggregateOutputType | null
  _avg: DashboardStatsAvgAggregateOutputType | null
  _sum: DashboardStatsSumAggregateOutputType | null
  _min: DashboardStatsMinAggregateOutputType | null
  _max: DashboardStatsMaxAggregateOutputType | null
}

type GetDashboardStatsGroupByPayload<T extends DashboardStatsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DashboardStatsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DashboardStatsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DashboardStatsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DashboardStatsGroupByOutputType[P]>
      }
    >
  > 



export type DashboardStatsWhereInput = {
  AND?: Prisma.DashboardStatsWhereInput | Prisma.DashboardStatsWhereInput[]
  OR?: Prisma.DashboardStatsWhereInput[]
  NOT?: Prisma.DashboardStatsWhereInput | Prisma.DashboardStatsWhereInput[]
  id?: Prisma.StringFilter<"DashboardStats"> | string
  userId?: Prisma.StringFilter<"DashboardStats"> | string
  totalSubmissions?: Prisma.IntFilter<"DashboardStats"> | number
  problemsSolved?: Prisma.IntFilter<"DashboardStats"> | number
  easySolved?: Prisma.IntFilter<"DashboardStats"> | number
  mediumSolved?: Prisma.IntFilter<"DashboardStats"> | number
  hardSolved?: Prisma.IntFilter<"DashboardStats"> | number
  accuracy?: Prisma.FloatFilter<"DashboardStats"> | number
  lastActive?: Prisma.DateTimeNullableFilter<"DashboardStats"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"DashboardStats"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type DashboardStatsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
  lastActive?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type DashboardStatsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.DashboardStatsWhereInput | Prisma.DashboardStatsWhereInput[]
  OR?: Prisma.DashboardStatsWhereInput[]
  NOT?: Prisma.DashboardStatsWhereInput | Prisma.DashboardStatsWhereInput[]
  totalSubmissions?: Prisma.IntFilter<"DashboardStats"> | number
  problemsSolved?: Prisma.IntFilter<"DashboardStats"> | number
  easySolved?: Prisma.IntFilter<"DashboardStats"> | number
  mediumSolved?: Prisma.IntFilter<"DashboardStats"> | number
  hardSolved?: Prisma.IntFilter<"DashboardStats"> | number
  accuracy?: Prisma.FloatFilter<"DashboardStats"> | number
  lastActive?: Prisma.DateTimeNullableFilter<"DashboardStats"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"DashboardStats"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type DashboardStatsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
  lastActive?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DashboardStatsCountOrderByAggregateInput
  _avg?: Prisma.DashboardStatsAvgOrderByAggregateInput
  _max?: Prisma.DashboardStatsMaxOrderByAggregateInput
  _min?: Prisma.DashboardStatsMinOrderByAggregateInput
  _sum?: Prisma.DashboardStatsSumOrderByAggregateInput
}

export type DashboardStatsScalarWhereWithAggregatesInput = {
  AND?: Prisma.DashboardStatsScalarWhereWithAggregatesInput | Prisma.DashboardStatsScalarWhereWithAggregatesInput[]
  OR?: Prisma.DashboardStatsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DashboardStatsScalarWhereWithAggregatesInput | Prisma.DashboardStatsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DashboardStats"> | string
  userId?: Prisma.StringWithAggregatesFilter<"DashboardStats"> | string
  totalSubmissions?: Prisma.IntWithAggregatesFilter<"DashboardStats"> | number
  problemsSolved?: Prisma.IntWithAggregatesFilter<"DashboardStats"> | number
  easySolved?: Prisma.IntWithAggregatesFilter<"DashboardStats"> | number
  mediumSolved?: Prisma.IntWithAggregatesFilter<"DashboardStats"> | number
  hardSolved?: Prisma.IntWithAggregatesFilter<"DashboardStats"> | number
  accuracy?: Prisma.FloatWithAggregatesFilter<"DashboardStats"> | number
  lastActive?: Prisma.DateTimeNullableWithAggregatesFilter<"DashboardStats"> | Date | string | null
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DashboardStats"> | Date | string
}

export type DashboardStatsCreateInput = {
  id?: string
  totalSubmissions?: number
  problemsSolved?: number
  easySolved?: number
  mediumSolved?: number
  hardSolved?: number
  accuracy?: number
  lastActive?: Date | string | null
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutDashboardStatsInput
}

export type DashboardStatsUncheckedCreateInput = {
  id?: string
  userId: string
  totalSubmissions?: number
  problemsSolved?: number
  easySolved?: number
  mediumSolved?: number
  hardSolved?: number
  accuracy?: number
  lastActive?: Date | string | null
  updatedAt?: Date | string
}

export type DashboardStatsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutDashboardStatsNestedInput
}

export type DashboardStatsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardStatsCreateManyInput = {
  id?: string
  userId: string
  totalSubmissions?: number
  problemsSolved?: number
  easySolved?: number
  mediumSolved?: number
  hardSolved?: number
  accuracy?: number
  lastActive?: Date | string | null
  updatedAt?: Date | string
}

export type DashboardStatsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardStatsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardStatsListRelationFilter = {
  every?: Prisma.DashboardStatsWhereInput
  some?: Prisma.DashboardStatsWhereInput
  none?: Prisma.DashboardStatsWhereInput
}

export type DashboardStatsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DashboardStatsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
  lastActive?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DashboardStatsAvgOrderByAggregateInput = {
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
}

export type DashboardStatsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
  lastActive?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DashboardStatsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
  lastActive?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DashboardStatsSumOrderByAggregateInput = {
  totalSubmissions?: Prisma.SortOrder
  problemsSolved?: Prisma.SortOrder
  easySolved?: Prisma.SortOrder
  mediumSolved?: Prisma.SortOrder
  hardSolved?: Prisma.SortOrder
  accuracy?: Prisma.SortOrder
}

export type DashboardStatsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DashboardStatsCreateWithoutUserInput, Prisma.DashboardStatsUncheckedCreateWithoutUserInput> | Prisma.DashboardStatsCreateWithoutUserInput[] | Prisma.DashboardStatsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardStatsCreateOrConnectWithoutUserInput | Prisma.DashboardStatsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DashboardStatsCreateManyUserInputEnvelope
  connect?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
}

export type DashboardStatsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DashboardStatsCreateWithoutUserInput, Prisma.DashboardStatsUncheckedCreateWithoutUserInput> | Prisma.DashboardStatsCreateWithoutUserInput[] | Prisma.DashboardStatsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardStatsCreateOrConnectWithoutUserInput | Prisma.DashboardStatsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DashboardStatsCreateManyUserInputEnvelope
  connect?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
}

export type DashboardStatsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardStatsCreateWithoutUserInput, Prisma.DashboardStatsUncheckedCreateWithoutUserInput> | Prisma.DashboardStatsCreateWithoutUserInput[] | Prisma.DashboardStatsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardStatsCreateOrConnectWithoutUserInput | Prisma.DashboardStatsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DashboardStatsUpsertWithWhereUniqueWithoutUserInput | Prisma.DashboardStatsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DashboardStatsCreateManyUserInputEnvelope
  set?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  disconnect?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  delete?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  connect?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  update?: Prisma.DashboardStatsUpdateWithWhereUniqueWithoutUserInput | Prisma.DashboardStatsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DashboardStatsUpdateManyWithWhereWithoutUserInput | Prisma.DashboardStatsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DashboardStatsScalarWhereInput | Prisma.DashboardStatsScalarWhereInput[]
}

export type DashboardStatsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardStatsCreateWithoutUserInput, Prisma.DashboardStatsUncheckedCreateWithoutUserInput> | Prisma.DashboardStatsCreateWithoutUserInput[] | Prisma.DashboardStatsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardStatsCreateOrConnectWithoutUserInput | Prisma.DashboardStatsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DashboardStatsUpsertWithWhereUniqueWithoutUserInput | Prisma.DashboardStatsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DashboardStatsCreateManyUserInputEnvelope
  set?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  disconnect?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  delete?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  connect?: Prisma.DashboardStatsWhereUniqueInput | Prisma.DashboardStatsWhereUniqueInput[]
  update?: Prisma.DashboardStatsUpdateWithWhereUniqueWithoutUserInput | Prisma.DashboardStatsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DashboardStatsUpdateManyWithWhereWithoutUserInput | Prisma.DashboardStatsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DashboardStatsScalarWhereInput | Prisma.DashboardStatsScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DashboardStatsCreateWithoutUserInput = {
  id?: string
  totalSubmissions?: number
  problemsSolved?: number
  easySolved?: number
  mediumSolved?: number
  hardSolved?: number
  accuracy?: number
  lastActive?: Date | string | null
  updatedAt?: Date | string
}

export type DashboardStatsUncheckedCreateWithoutUserInput = {
  id?: string
  totalSubmissions?: number
  problemsSolved?: number
  easySolved?: number
  mediumSolved?: number
  hardSolved?: number
  accuracy?: number
  lastActive?: Date | string | null
  updatedAt?: Date | string
}

export type DashboardStatsCreateOrConnectWithoutUserInput = {
  where: Prisma.DashboardStatsWhereUniqueInput
  create: Prisma.XOR<Prisma.DashboardStatsCreateWithoutUserInput, Prisma.DashboardStatsUncheckedCreateWithoutUserInput>
}

export type DashboardStatsCreateManyUserInputEnvelope = {
  data: Prisma.DashboardStatsCreateManyUserInput | Prisma.DashboardStatsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type DashboardStatsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DashboardStatsWhereUniqueInput
  update: Prisma.XOR<Prisma.DashboardStatsUpdateWithoutUserInput, Prisma.DashboardStatsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DashboardStatsCreateWithoutUserInput, Prisma.DashboardStatsUncheckedCreateWithoutUserInput>
}

export type DashboardStatsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DashboardStatsWhereUniqueInput
  data: Prisma.XOR<Prisma.DashboardStatsUpdateWithoutUserInput, Prisma.DashboardStatsUncheckedUpdateWithoutUserInput>
}

export type DashboardStatsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DashboardStatsScalarWhereInput
  data: Prisma.XOR<Prisma.DashboardStatsUpdateManyMutationInput, Prisma.DashboardStatsUncheckedUpdateManyWithoutUserInput>
}

export type DashboardStatsScalarWhereInput = {
  AND?: Prisma.DashboardStatsScalarWhereInput | Prisma.DashboardStatsScalarWhereInput[]
  OR?: Prisma.DashboardStatsScalarWhereInput[]
  NOT?: Prisma.DashboardStatsScalarWhereInput | Prisma.DashboardStatsScalarWhereInput[]
  id?: Prisma.StringFilter<"DashboardStats"> | string
  userId?: Prisma.StringFilter<"DashboardStats"> | string
  totalSubmissions?: Prisma.IntFilter<"DashboardStats"> | number
  problemsSolved?: Prisma.IntFilter<"DashboardStats"> | number
  easySolved?: Prisma.IntFilter<"DashboardStats"> | number
  mediumSolved?: Prisma.IntFilter<"DashboardStats"> | number
  hardSolved?: Prisma.IntFilter<"DashboardStats"> | number
  accuracy?: Prisma.FloatFilter<"DashboardStats"> | number
  lastActive?: Prisma.DateTimeNullableFilter<"DashboardStats"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"DashboardStats"> | Date | string
}

export type DashboardStatsCreateManyUserInput = {
  id?: string
  totalSubmissions?: number
  problemsSolved?: number
  easySolved?: number
  mediumSolved?: number
  hardSolved?: number
  accuracy?: number
  lastActive?: Date | string | null
  updatedAt?: Date | string
}

export type DashboardStatsUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardStatsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardStatsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalSubmissions?: Prisma.IntFieldUpdateOperationsInput | number
  problemsSolved?: Prisma.IntFieldUpdateOperationsInput | number
  easySolved?: Prisma.IntFieldUpdateOperationsInput | number
  mediumSolved?: Prisma.IntFieldUpdateOperationsInput | number
  hardSolved?: Prisma.IntFieldUpdateOperationsInput | number
  accuracy?: Prisma.FloatFieldUpdateOperationsInput | number
  lastActive?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DashboardStatsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  totalSubmissions?: boolean
  problemsSolved?: boolean
  easySolved?: boolean
  mediumSolved?: boolean
  hardSolved?: boolean
  accuracy?: boolean
  lastActive?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardStats"]>

export type DashboardStatsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  totalSubmissions?: boolean
  problemsSolved?: boolean
  easySolved?: boolean
  mediumSolved?: boolean
  hardSolved?: boolean
  accuracy?: boolean
  lastActive?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardStats"]>

export type DashboardStatsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  totalSubmissions?: boolean
  problemsSolved?: boolean
  easySolved?: boolean
  mediumSolved?: boolean
  hardSolved?: boolean
  accuracy?: boolean
  lastActive?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardStats"]>

export type DashboardStatsSelectScalar = {
  id?: boolean
  userId?: boolean
  totalSubmissions?: boolean
  problemsSolved?: boolean
  easySolved?: boolean
  mediumSolved?: boolean
  hardSolved?: boolean
  accuracy?: boolean
  lastActive?: boolean
  updatedAt?: boolean
}

export type DashboardStatsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "totalSubmissions" | "problemsSolved" | "easySolved" | "mediumSolved" | "hardSolved" | "accuracy" | "lastActive" | "updatedAt", ExtArgs["result"]["dashboardStats"]>
export type DashboardStatsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DashboardStatsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DashboardStatsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DashboardStatsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DashboardStats"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    totalSubmissions: number
    problemsSolved: number
    easySolved: number
    mediumSolved: number
    hardSolved: number
    accuracy: number
    lastActive: Date | null
    updatedAt: Date
  }, ExtArgs["result"]["dashboardStats"]>
  composites: {}
}

export type DashboardStatsGetPayload<S extends boolean | null | undefined | DashboardStatsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload, S>

export type DashboardStatsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DashboardStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DashboardStatsCountAggregateInputType | true
  }

export interface DashboardStatsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DashboardStats'], meta: { name: 'DashboardStats' } }
  /**
   * Find zero or one DashboardStats that matches the filter.
   * @param {DashboardStatsFindUniqueArgs} args - Arguments to find a DashboardStats
   * @example
   * // Get one DashboardStats
   * const dashboardStats = await prisma.dashboardStats.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DashboardStatsFindUniqueArgs>(args: Prisma.SelectSubset<T, DashboardStatsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DashboardStats that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DashboardStatsFindUniqueOrThrowArgs} args - Arguments to find a DashboardStats
   * @example
   * // Get one DashboardStats
   * const dashboardStats = await prisma.dashboardStats.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DashboardStatsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DashboardStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DashboardStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsFindFirstArgs} args - Arguments to find a DashboardStats
   * @example
   * // Get one DashboardStats
   * const dashboardStats = await prisma.dashboardStats.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DashboardStatsFindFirstArgs>(args?: Prisma.SelectSubset<T, DashboardStatsFindFirstArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DashboardStats that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsFindFirstOrThrowArgs} args - Arguments to find a DashboardStats
   * @example
   * // Get one DashboardStats
   * const dashboardStats = await prisma.dashboardStats.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DashboardStatsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DashboardStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DashboardStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DashboardStats
   * const dashboardStats = await prisma.dashboardStats.findMany()
   * 
   * // Get first 10 DashboardStats
   * const dashboardStats = await prisma.dashboardStats.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dashboardStatsWithIdOnly = await prisma.dashboardStats.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DashboardStatsFindManyArgs>(args?: Prisma.SelectSubset<T, DashboardStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DashboardStats.
   * @param {DashboardStatsCreateArgs} args - Arguments to create a DashboardStats.
   * @example
   * // Create one DashboardStats
   * const DashboardStats = await prisma.dashboardStats.create({
   *   data: {
   *     // ... data to create a DashboardStats
   *   }
   * })
   * 
   */
  create<T extends DashboardStatsCreateArgs>(args: Prisma.SelectSubset<T, DashboardStatsCreateArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DashboardStats.
   * @param {DashboardStatsCreateManyArgs} args - Arguments to create many DashboardStats.
   * @example
   * // Create many DashboardStats
   * const dashboardStats = await prisma.dashboardStats.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DashboardStatsCreateManyArgs>(args?: Prisma.SelectSubset<T, DashboardStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DashboardStats and returns the data saved in the database.
   * @param {DashboardStatsCreateManyAndReturnArgs} args - Arguments to create many DashboardStats.
   * @example
   * // Create many DashboardStats
   * const dashboardStats = await prisma.dashboardStats.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DashboardStats and only return the `id`
   * const dashboardStatsWithIdOnly = await prisma.dashboardStats.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DashboardStatsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DashboardStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DashboardStats.
   * @param {DashboardStatsDeleteArgs} args - Arguments to delete one DashboardStats.
   * @example
   * // Delete one DashboardStats
   * const DashboardStats = await prisma.dashboardStats.delete({
   *   where: {
   *     // ... filter to delete one DashboardStats
   *   }
   * })
   * 
   */
  delete<T extends DashboardStatsDeleteArgs>(args: Prisma.SelectSubset<T, DashboardStatsDeleteArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DashboardStats.
   * @param {DashboardStatsUpdateArgs} args - Arguments to update one DashboardStats.
   * @example
   * // Update one DashboardStats
   * const dashboardStats = await prisma.dashboardStats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DashboardStatsUpdateArgs>(args: Prisma.SelectSubset<T, DashboardStatsUpdateArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DashboardStats.
   * @param {DashboardStatsDeleteManyArgs} args - Arguments to filter DashboardStats to delete.
   * @example
   * // Delete a few DashboardStats
   * const { count } = await prisma.dashboardStats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DashboardStatsDeleteManyArgs>(args?: Prisma.SelectSubset<T, DashboardStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DashboardStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DashboardStats
   * const dashboardStats = await prisma.dashboardStats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DashboardStatsUpdateManyArgs>(args: Prisma.SelectSubset<T, DashboardStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DashboardStats and returns the data updated in the database.
   * @param {DashboardStatsUpdateManyAndReturnArgs} args - Arguments to update many DashboardStats.
   * @example
   * // Update many DashboardStats
   * const dashboardStats = await prisma.dashboardStats.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DashboardStats and only return the `id`
   * const dashboardStatsWithIdOnly = await prisma.dashboardStats.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DashboardStatsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DashboardStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DashboardStats.
   * @param {DashboardStatsUpsertArgs} args - Arguments to update or create a DashboardStats.
   * @example
   * // Update or create a DashboardStats
   * const dashboardStats = await prisma.dashboardStats.upsert({
   *   create: {
   *     // ... data to create a DashboardStats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DashboardStats we want to update
   *   }
   * })
   */
  upsert<T extends DashboardStatsUpsertArgs>(args: Prisma.SelectSubset<T, DashboardStatsUpsertArgs<ExtArgs>>): Prisma.Prisma__DashboardStatsClient<runtime.Types.Result.GetResult<Prisma.$DashboardStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DashboardStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsCountArgs} args - Arguments to filter DashboardStats to count.
   * @example
   * // Count the number of DashboardStats
   * const count = await prisma.dashboardStats.count({
   *   where: {
   *     // ... the filter for the DashboardStats we want to count
   *   }
   * })
  **/
  count<T extends DashboardStatsCountArgs>(
    args?: Prisma.Subset<T, DashboardStatsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DashboardStatsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DashboardStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DashboardStatsAggregateArgs>(args: Prisma.Subset<T, DashboardStatsAggregateArgs>): Prisma.PrismaPromise<GetDashboardStatsAggregateType<T>>

  /**
   * Group by DashboardStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardStatsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DashboardStatsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DashboardStatsGroupByArgs['orderBy'] }
      : { orderBy?: DashboardStatsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DashboardStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DashboardStats model
 */
readonly fields: DashboardStatsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DashboardStats.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DashboardStatsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DashboardStats model
 */
export interface DashboardStatsFieldRefs {
  readonly id: Prisma.FieldRef<"DashboardStats", 'String'>
  readonly userId: Prisma.FieldRef<"DashboardStats", 'String'>
  readonly totalSubmissions: Prisma.FieldRef<"DashboardStats", 'Int'>
  readonly problemsSolved: Prisma.FieldRef<"DashboardStats", 'Int'>
  readonly easySolved: Prisma.FieldRef<"DashboardStats", 'Int'>
  readonly mediumSolved: Prisma.FieldRef<"DashboardStats", 'Int'>
  readonly hardSolved: Prisma.FieldRef<"DashboardStats", 'Int'>
  readonly accuracy: Prisma.FieldRef<"DashboardStats", 'Float'>
  readonly lastActive: Prisma.FieldRef<"DashboardStats", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DashboardStats", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DashboardStats findUnique
 */
export type DashboardStatsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * Filter, which DashboardStats to fetch.
   */
  where: Prisma.DashboardStatsWhereUniqueInput
}

/**
 * DashboardStats findUniqueOrThrow
 */
export type DashboardStatsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * Filter, which DashboardStats to fetch.
   */
  where: Prisma.DashboardStatsWhereUniqueInput
}

/**
 * DashboardStats findFirst
 */
export type DashboardStatsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * Filter, which DashboardStats to fetch.
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardStats to fetch.
   */
  orderBy?: Prisma.DashboardStatsOrderByWithRelationInput | Prisma.DashboardStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DashboardStats.
   */
  cursor?: Prisma.DashboardStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DashboardStats.
   */
  distinct?: Prisma.DashboardStatsScalarFieldEnum | Prisma.DashboardStatsScalarFieldEnum[]
}

/**
 * DashboardStats findFirstOrThrow
 */
export type DashboardStatsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * Filter, which DashboardStats to fetch.
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardStats to fetch.
   */
  orderBy?: Prisma.DashboardStatsOrderByWithRelationInput | Prisma.DashboardStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DashboardStats.
   */
  cursor?: Prisma.DashboardStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DashboardStats.
   */
  distinct?: Prisma.DashboardStatsScalarFieldEnum | Prisma.DashboardStatsScalarFieldEnum[]
}

/**
 * DashboardStats findMany
 */
export type DashboardStatsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * Filter, which DashboardStats to fetch.
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardStats to fetch.
   */
  orderBy?: Prisma.DashboardStatsOrderByWithRelationInput | Prisma.DashboardStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DashboardStats.
   */
  cursor?: Prisma.DashboardStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardStats.
   */
  skip?: number
  distinct?: Prisma.DashboardStatsScalarFieldEnum | Prisma.DashboardStatsScalarFieldEnum[]
}

/**
 * DashboardStats create
 */
export type DashboardStatsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * The data needed to create a DashboardStats.
   */
  data: Prisma.XOR<Prisma.DashboardStatsCreateInput, Prisma.DashboardStatsUncheckedCreateInput>
}

/**
 * DashboardStats createMany
 */
export type DashboardStatsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DashboardStats.
   */
  data: Prisma.DashboardStatsCreateManyInput | Prisma.DashboardStatsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DashboardStats createManyAndReturn
 */
export type DashboardStatsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * The data used to create many DashboardStats.
   */
  data: Prisma.DashboardStatsCreateManyInput | Prisma.DashboardStatsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DashboardStats update
 */
export type DashboardStatsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * The data needed to update a DashboardStats.
   */
  data: Prisma.XOR<Prisma.DashboardStatsUpdateInput, Prisma.DashboardStatsUncheckedUpdateInput>
  /**
   * Choose, which DashboardStats to update.
   */
  where: Prisma.DashboardStatsWhereUniqueInput
}

/**
 * DashboardStats updateMany
 */
export type DashboardStatsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DashboardStats.
   */
  data: Prisma.XOR<Prisma.DashboardStatsUpdateManyMutationInput, Prisma.DashboardStatsUncheckedUpdateManyInput>
  /**
   * Filter which DashboardStats to update
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * Limit how many DashboardStats to update.
   */
  limit?: number
}

/**
 * DashboardStats updateManyAndReturn
 */
export type DashboardStatsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * The data used to update DashboardStats.
   */
  data: Prisma.XOR<Prisma.DashboardStatsUpdateManyMutationInput, Prisma.DashboardStatsUncheckedUpdateManyInput>
  /**
   * Filter which DashboardStats to update
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * Limit how many DashboardStats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DashboardStats upsert
 */
export type DashboardStatsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * The filter to search for the DashboardStats to update in case it exists.
   */
  where: Prisma.DashboardStatsWhereUniqueInput
  /**
   * In case the DashboardStats found by the `where` argument doesn't exist, create a new DashboardStats with this data.
   */
  create: Prisma.XOR<Prisma.DashboardStatsCreateInput, Prisma.DashboardStatsUncheckedCreateInput>
  /**
   * In case the DashboardStats was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DashboardStatsUpdateInput, Prisma.DashboardStatsUncheckedUpdateInput>
}

/**
 * DashboardStats delete
 */
export type DashboardStatsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
  /**
   * Filter which DashboardStats to delete.
   */
  where: Prisma.DashboardStatsWhereUniqueInput
}

/**
 * DashboardStats deleteMany
 */
export type DashboardStatsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DashboardStats to delete
   */
  where?: Prisma.DashboardStatsWhereInput
  /**
   * Limit how many DashboardStats to delete.
   */
  limit?: number
}

/**
 * DashboardStats without action
 */
export type DashboardStatsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardStats
   */
  select?: Prisma.DashboardStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardStats
   */
  omit?: Prisma.DashboardStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardStatsInclude<ExtArgs> | null
}
