
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TestCaseResult` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TestCaseResult
 * 
 */
export type TestCaseResultModel = runtime.Types.Result.DefaultSelection<Prisma.$TestCaseResultPayload>

export type AggregateTestCaseResult = {
  _count: TestCaseResultCountAggregateOutputType | null
  _avg: TestCaseResultAvgAggregateOutputType | null
  _sum: TestCaseResultSumAggregateOutputType | null
  _min: TestCaseResultMinAggregateOutputType | null
  _max: TestCaseResultMaxAggregateOutputType | null
}

export type TestCaseResultAvgAggregateOutputType = {
  testCase: number | null
}

export type TestCaseResultSumAggregateOutputType = {
  testCase: number | null
}

export type TestCaseResultMinAggregateOutputType = {
  id: string | null
  submissionId: string | null
  testCase: number | null
  passed: boolean | null
  stdout: string | null
  expected: string | null
  stderr: string | null
  compileOutput: string | null
  status: string | null
  memory: string | null
  time: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TestCaseResultMaxAggregateOutputType = {
  id: string | null
  submissionId: string | null
  testCase: number | null
  passed: boolean | null
  stdout: string | null
  expected: string | null
  stderr: string | null
  compileOutput: string | null
  status: string | null
  memory: string | null
  time: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TestCaseResultCountAggregateOutputType = {
  id: number
  submissionId: number
  testCase: number
  passed: number
  stdout: number
  expected: number
  stderr: number
  compileOutput: number
  status: number
  memory: number
  time: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TestCaseResultAvgAggregateInputType = {
  testCase?: true
}

export type TestCaseResultSumAggregateInputType = {
  testCase?: true
}

export type TestCaseResultMinAggregateInputType = {
  id?: true
  submissionId?: true
  testCase?: true
  passed?: true
  stdout?: true
  expected?: true
  stderr?: true
  compileOutput?: true
  status?: true
  memory?: true
  time?: true
  createdAt?: true
  updatedAt?: true
}

export type TestCaseResultMaxAggregateInputType = {
  id?: true
  submissionId?: true
  testCase?: true
  passed?: true
  stdout?: true
  expected?: true
  stderr?: true
  compileOutput?: true
  status?: true
  memory?: true
  time?: true
  createdAt?: true
  updatedAt?: true
}

export type TestCaseResultCountAggregateInputType = {
  id?: true
  submissionId?: true
  testCase?: true
  passed?: true
  stdout?: true
  expected?: true
  stderr?: true
  compileOutput?: true
  status?: true
  memory?: true
  time?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TestCaseResultAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TestCaseResult to aggregate.
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCaseResults to fetch.
   */
  orderBy?: Prisma.TestCaseResultOrderByWithRelationInput | Prisma.TestCaseResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TestCaseResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCaseResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCaseResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TestCaseResults
  **/
  _count?: true | TestCaseResultCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TestCaseResultAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TestCaseResultSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TestCaseResultMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TestCaseResultMaxAggregateInputType
}

export type GetTestCaseResultAggregateType<T extends TestCaseResultAggregateArgs> = {
      [P in keyof T & keyof AggregateTestCaseResult]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTestCaseResult[P]>
    : Prisma.GetScalarType<T[P], AggregateTestCaseResult[P]>
}




export type TestCaseResultGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TestCaseResultWhereInput
  orderBy?: Prisma.TestCaseResultOrderByWithAggregationInput | Prisma.TestCaseResultOrderByWithAggregationInput[]
  by: Prisma.TestCaseResultScalarFieldEnum[] | Prisma.TestCaseResultScalarFieldEnum
  having?: Prisma.TestCaseResultScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TestCaseResultCountAggregateInputType | true
  _avg?: TestCaseResultAvgAggregateInputType
  _sum?: TestCaseResultSumAggregateInputType
  _min?: TestCaseResultMinAggregateInputType
  _max?: TestCaseResultMaxAggregateInputType
}

export type TestCaseResultGroupByOutputType = {
  id: string
  submissionId: string
  testCase: number
  passed: boolean
  stdout: string | null
  expected: string
  stderr: string | null
  compileOutput: string | null
  status: string
  memory: string | null
  time: string | null
  createdAt: Date
  updatedAt: Date
  _count: TestCaseResultCountAggregateOutputType | null
  _avg: TestCaseResultAvgAggregateOutputType | null
  _sum: TestCaseResultSumAggregateOutputType | null
  _min: TestCaseResultMinAggregateOutputType | null
  _max: TestCaseResultMaxAggregateOutputType | null
}

type GetTestCaseResultGroupByPayload<T extends TestCaseResultGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TestCaseResultGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TestCaseResultGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TestCaseResultGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TestCaseResultGroupByOutputType[P]>
      }
    >
  > 



export type TestCaseResultWhereInput = {
  AND?: Prisma.TestCaseResultWhereInput | Prisma.TestCaseResultWhereInput[]
  OR?: Prisma.TestCaseResultWhereInput[]
  NOT?: Prisma.TestCaseResultWhereInput | Prisma.TestCaseResultWhereInput[]
  id?: Prisma.StringFilter<"TestCaseResult"> | string
  submissionId?: Prisma.StringFilter<"TestCaseResult"> | string
  testCase?: Prisma.IntFilter<"TestCaseResult"> | number
  passed?: Prisma.BoolFilter<"TestCaseResult"> | boolean
  stdout?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  expected?: Prisma.StringFilter<"TestCaseResult"> | string
  stderr?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  compileOutput?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  status?: Prisma.StringFilter<"TestCaseResult"> | string
  memory?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  time?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestCaseResult"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestCaseResult"> | Date | string
  submission?: Prisma.XOR<Prisma.SubmissionScalarRelationFilter, Prisma.SubmissionWhereInput>
}

export type TestCaseResultOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
  testCase?: Prisma.SortOrder
  passed?: Prisma.SortOrder
  stdout?: Prisma.SortOrderInput | Prisma.SortOrder
  expected?: Prisma.SortOrder
  stderr?: Prisma.SortOrderInput | Prisma.SortOrder
  compileOutput?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrderInput | Prisma.SortOrder
  time?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  submission?: Prisma.SubmissionOrderByWithRelationInput
}

export type TestCaseResultWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TestCaseResultWhereInput | Prisma.TestCaseResultWhereInput[]
  OR?: Prisma.TestCaseResultWhereInput[]
  NOT?: Prisma.TestCaseResultWhereInput | Prisma.TestCaseResultWhereInput[]
  submissionId?: Prisma.StringFilter<"TestCaseResult"> | string
  testCase?: Prisma.IntFilter<"TestCaseResult"> | number
  passed?: Prisma.BoolFilter<"TestCaseResult"> | boolean
  stdout?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  expected?: Prisma.StringFilter<"TestCaseResult"> | string
  stderr?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  compileOutput?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  status?: Prisma.StringFilter<"TestCaseResult"> | string
  memory?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  time?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestCaseResult"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestCaseResult"> | Date | string
  submission?: Prisma.XOR<Prisma.SubmissionScalarRelationFilter, Prisma.SubmissionWhereInput>
}, "id">

export type TestCaseResultOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
  testCase?: Prisma.SortOrder
  passed?: Prisma.SortOrder
  stdout?: Prisma.SortOrderInput | Prisma.SortOrder
  expected?: Prisma.SortOrder
  stderr?: Prisma.SortOrderInput | Prisma.SortOrder
  compileOutput?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrderInput | Prisma.SortOrder
  time?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TestCaseResultCountOrderByAggregateInput
  _avg?: Prisma.TestCaseResultAvgOrderByAggregateInput
  _max?: Prisma.TestCaseResultMaxOrderByAggregateInput
  _min?: Prisma.TestCaseResultMinOrderByAggregateInput
  _sum?: Prisma.TestCaseResultSumOrderByAggregateInput
}

export type TestCaseResultScalarWhereWithAggregatesInput = {
  AND?: Prisma.TestCaseResultScalarWhereWithAggregatesInput | Prisma.TestCaseResultScalarWhereWithAggregatesInput[]
  OR?: Prisma.TestCaseResultScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TestCaseResultScalarWhereWithAggregatesInput | Prisma.TestCaseResultScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TestCaseResult"> | string
  submissionId?: Prisma.StringWithAggregatesFilter<"TestCaseResult"> | string
  testCase?: Prisma.IntWithAggregatesFilter<"TestCaseResult"> | number
  passed?: Prisma.BoolWithAggregatesFilter<"TestCaseResult"> | boolean
  stdout?: Prisma.StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
  expected?: Prisma.StringWithAggregatesFilter<"TestCaseResult"> | string
  stderr?: Prisma.StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
  compileOutput?: Prisma.StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"TestCaseResult"> | string
  memory?: Prisma.StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
  time?: Prisma.StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TestCaseResult"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TestCaseResult"> | Date | string
}

export type TestCaseResultCreateInput = {
  id?: string
  testCase: number
  passed: boolean
  stdout?: string | null
  expected: string
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  submission: Prisma.SubmissionCreateNestedOneWithoutTestCasesInput
}

export type TestCaseResultUncheckedCreateInput = {
  id?: string
  submissionId: string
  testCase: number
  passed: boolean
  stdout?: string | null
  expected: string
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCaseResultUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submission?: Prisma.SubmissionUpdateOneRequiredWithoutTestCasesNestedInput
}

export type TestCaseResultUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  submissionId?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCaseResultCreateManyInput = {
  id?: string
  submissionId: string
  testCase: number
  passed: boolean
  stdout?: string | null
  expected: string
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCaseResultUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCaseResultUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  submissionId?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCaseResultListRelationFilter = {
  every?: Prisma.TestCaseResultWhereInput
  some?: Prisma.TestCaseResultWhereInput
  none?: Prisma.TestCaseResultWhereInput
}

export type TestCaseResultOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TestCaseResultCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
  testCase?: Prisma.SortOrder
  passed?: Prisma.SortOrder
  stdout?: Prisma.SortOrder
  expected?: Prisma.SortOrder
  stderr?: Prisma.SortOrder
  compileOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestCaseResultAvgOrderByAggregateInput = {
  testCase?: Prisma.SortOrder
}

export type TestCaseResultMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
  testCase?: Prisma.SortOrder
  passed?: Prisma.SortOrder
  stdout?: Prisma.SortOrder
  expected?: Prisma.SortOrder
  stderr?: Prisma.SortOrder
  compileOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestCaseResultMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
  testCase?: Prisma.SortOrder
  passed?: Prisma.SortOrder
  stdout?: Prisma.SortOrder
  expected?: Prisma.SortOrder
  stderr?: Prisma.SortOrder
  compileOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestCaseResultSumOrderByAggregateInput = {
  testCase?: Prisma.SortOrder
}

export type TestCaseResultCreateNestedManyWithoutSubmissionInput = {
  create?: Prisma.XOR<Prisma.TestCaseResultCreateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput> | Prisma.TestCaseResultCreateWithoutSubmissionInput[] | Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput | Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput[]
  createMany?: Prisma.TestCaseResultCreateManySubmissionInputEnvelope
  connect?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
}

export type TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput = {
  create?: Prisma.XOR<Prisma.TestCaseResultCreateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput> | Prisma.TestCaseResultCreateWithoutSubmissionInput[] | Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput | Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput[]
  createMany?: Prisma.TestCaseResultCreateManySubmissionInputEnvelope
  connect?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
}

export type TestCaseResultUpdateManyWithoutSubmissionNestedInput = {
  create?: Prisma.XOR<Prisma.TestCaseResultCreateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput> | Prisma.TestCaseResultCreateWithoutSubmissionInput[] | Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput | Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput[]
  upsert?: Prisma.TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput | Prisma.TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput[]
  createMany?: Prisma.TestCaseResultCreateManySubmissionInputEnvelope
  set?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  disconnect?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  delete?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  connect?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  update?: Prisma.TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput | Prisma.TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput[]
  updateMany?: Prisma.TestCaseResultUpdateManyWithWhereWithoutSubmissionInput | Prisma.TestCaseResultUpdateManyWithWhereWithoutSubmissionInput[]
  deleteMany?: Prisma.TestCaseResultScalarWhereInput | Prisma.TestCaseResultScalarWhereInput[]
}

export type TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput = {
  create?: Prisma.XOR<Prisma.TestCaseResultCreateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput> | Prisma.TestCaseResultCreateWithoutSubmissionInput[] | Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput | Prisma.TestCaseResultCreateOrConnectWithoutSubmissionInput[]
  upsert?: Prisma.TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput | Prisma.TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput[]
  createMany?: Prisma.TestCaseResultCreateManySubmissionInputEnvelope
  set?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  disconnect?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  delete?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  connect?: Prisma.TestCaseResultWhereUniqueInput | Prisma.TestCaseResultWhereUniqueInput[]
  update?: Prisma.TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput | Prisma.TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput[]
  updateMany?: Prisma.TestCaseResultUpdateManyWithWhereWithoutSubmissionInput | Prisma.TestCaseResultUpdateManyWithWhereWithoutSubmissionInput[]
  deleteMany?: Prisma.TestCaseResultScalarWhereInput | Prisma.TestCaseResultScalarWhereInput[]
}

export type TestCaseResultCreateWithoutSubmissionInput = {
  id?: string
  testCase: number
  passed: boolean
  stdout?: string | null
  expected: string
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCaseResultUncheckedCreateWithoutSubmissionInput = {
  id?: string
  testCase: number
  passed: boolean
  stdout?: string | null
  expected: string
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCaseResultCreateOrConnectWithoutSubmissionInput = {
  where: Prisma.TestCaseResultWhereUniqueInput
  create: Prisma.XOR<Prisma.TestCaseResultCreateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput>
}

export type TestCaseResultCreateManySubmissionInputEnvelope = {
  data: Prisma.TestCaseResultCreateManySubmissionInput | Prisma.TestCaseResultCreateManySubmissionInput[]
  skipDuplicates?: boolean
}

export type TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput = {
  where: Prisma.TestCaseResultWhereUniqueInput
  update: Prisma.XOR<Prisma.TestCaseResultUpdateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedUpdateWithoutSubmissionInput>
  create: Prisma.XOR<Prisma.TestCaseResultCreateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedCreateWithoutSubmissionInput>
}

export type TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput = {
  where: Prisma.TestCaseResultWhereUniqueInput
  data: Prisma.XOR<Prisma.TestCaseResultUpdateWithoutSubmissionInput, Prisma.TestCaseResultUncheckedUpdateWithoutSubmissionInput>
}

export type TestCaseResultUpdateManyWithWhereWithoutSubmissionInput = {
  where: Prisma.TestCaseResultScalarWhereInput
  data: Prisma.XOR<Prisma.TestCaseResultUpdateManyMutationInput, Prisma.TestCaseResultUncheckedUpdateManyWithoutSubmissionInput>
}

export type TestCaseResultScalarWhereInput = {
  AND?: Prisma.TestCaseResultScalarWhereInput | Prisma.TestCaseResultScalarWhereInput[]
  OR?: Prisma.TestCaseResultScalarWhereInput[]
  NOT?: Prisma.TestCaseResultScalarWhereInput | Prisma.TestCaseResultScalarWhereInput[]
  id?: Prisma.StringFilter<"TestCaseResult"> | string
  submissionId?: Prisma.StringFilter<"TestCaseResult"> | string
  testCase?: Prisma.IntFilter<"TestCaseResult"> | number
  passed?: Prisma.BoolFilter<"TestCaseResult"> | boolean
  stdout?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  expected?: Prisma.StringFilter<"TestCaseResult"> | string
  stderr?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  compileOutput?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  status?: Prisma.StringFilter<"TestCaseResult"> | string
  memory?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  time?: Prisma.StringNullableFilter<"TestCaseResult"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestCaseResult"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestCaseResult"> | Date | string
}

export type TestCaseResultCreateManySubmissionInput = {
  id?: string
  testCase: number
  passed: boolean
  stdout?: string | null
  expected: string
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCaseResultUpdateWithoutSubmissionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCaseResultUncheckedUpdateWithoutSubmissionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCaseResultUncheckedUpdateManyWithoutSubmissionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  testCase?: Prisma.IntFieldUpdateOperationsInput | number
  passed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expected?: Prisma.StringFieldUpdateOperationsInput | string
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TestCaseResultSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  submissionId?: boolean
  testCase?: boolean
  passed?: boolean
  stdout?: boolean
  expected?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submission?: boolean | Prisma.SubmissionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testCaseResult"]>

export type TestCaseResultSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  submissionId?: boolean
  testCase?: boolean
  passed?: boolean
  stdout?: boolean
  expected?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submission?: boolean | Prisma.SubmissionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testCaseResult"]>

export type TestCaseResultSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  submissionId?: boolean
  testCase?: boolean
  passed?: boolean
  stdout?: boolean
  expected?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submission?: boolean | Prisma.SubmissionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testCaseResult"]>

export type TestCaseResultSelectScalar = {
  id?: boolean
  submissionId?: boolean
  testCase?: boolean
  passed?: boolean
  stdout?: boolean
  expected?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TestCaseResultOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "submissionId" | "testCase" | "passed" | "stdout" | "expected" | "stderr" | "compileOutput" | "status" | "memory" | "time" | "createdAt" | "updatedAt", ExtArgs["result"]["testCaseResult"]>
export type TestCaseResultInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  submission?: boolean | Prisma.SubmissionDefaultArgs<ExtArgs>
}
export type TestCaseResultIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  submission?: boolean | Prisma.SubmissionDefaultArgs<ExtArgs>
}
export type TestCaseResultIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  submission?: boolean | Prisma.SubmissionDefaultArgs<ExtArgs>
}

export type $TestCaseResultPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TestCaseResult"
  objects: {
    submission: Prisma.$SubmissionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    submissionId: string
    testCase: number
    passed: boolean
    stdout: string | null
    expected: string
    stderr: string | null
    compileOutput: string | null
    status: string
    memory: string | null
    time: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["testCaseResult"]>
  composites: {}
}

export type TestCaseResultGetPayload<S extends boolean | null | undefined | TestCaseResultDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload, S>

export type TestCaseResultCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TestCaseResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TestCaseResultCountAggregateInputType | true
  }

export interface TestCaseResultDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCaseResult'], meta: { name: 'TestCaseResult' } }
  /**
   * Find zero or one TestCaseResult that matches the filter.
   * @param {TestCaseResultFindUniqueArgs} args - Arguments to find a TestCaseResult
   * @example
   * // Get one TestCaseResult
   * const testCaseResult = await prisma.testCaseResult.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TestCaseResultFindUniqueArgs>(args: Prisma.SelectSubset<T, TestCaseResultFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TestCaseResult that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TestCaseResultFindUniqueOrThrowArgs} args - Arguments to find a TestCaseResult
   * @example
   * // Get one TestCaseResult
   * const testCaseResult = await prisma.testCaseResult.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TestCaseResultFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TestCaseResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TestCaseResult that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultFindFirstArgs} args - Arguments to find a TestCaseResult
   * @example
   * // Get one TestCaseResult
   * const testCaseResult = await prisma.testCaseResult.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TestCaseResultFindFirstArgs>(args?: Prisma.SelectSubset<T, TestCaseResultFindFirstArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TestCaseResult that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultFindFirstOrThrowArgs} args - Arguments to find a TestCaseResult
   * @example
   * // Get one TestCaseResult
   * const testCaseResult = await prisma.testCaseResult.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TestCaseResultFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TestCaseResultFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TestCaseResults that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TestCaseResults
   * const testCaseResults = await prisma.testCaseResult.findMany()
   * 
   * // Get first 10 TestCaseResults
   * const testCaseResults = await prisma.testCaseResult.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const testCaseResultWithIdOnly = await prisma.testCaseResult.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TestCaseResultFindManyArgs>(args?: Prisma.SelectSubset<T, TestCaseResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TestCaseResult.
   * @param {TestCaseResultCreateArgs} args - Arguments to create a TestCaseResult.
   * @example
   * // Create one TestCaseResult
   * const TestCaseResult = await prisma.testCaseResult.create({
   *   data: {
   *     // ... data to create a TestCaseResult
   *   }
   * })
   * 
   */
  create<T extends TestCaseResultCreateArgs>(args: Prisma.SelectSubset<T, TestCaseResultCreateArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TestCaseResults.
   * @param {TestCaseResultCreateManyArgs} args - Arguments to create many TestCaseResults.
   * @example
   * // Create many TestCaseResults
   * const testCaseResult = await prisma.testCaseResult.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TestCaseResultCreateManyArgs>(args?: Prisma.SelectSubset<T, TestCaseResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TestCaseResults and returns the data saved in the database.
   * @param {TestCaseResultCreateManyAndReturnArgs} args - Arguments to create many TestCaseResults.
   * @example
   * // Create many TestCaseResults
   * const testCaseResult = await prisma.testCaseResult.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TestCaseResults and only return the `id`
   * const testCaseResultWithIdOnly = await prisma.testCaseResult.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TestCaseResultCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TestCaseResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TestCaseResult.
   * @param {TestCaseResultDeleteArgs} args - Arguments to delete one TestCaseResult.
   * @example
   * // Delete one TestCaseResult
   * const TestCaseResult = await prisma.testCaseResult.delete({
   *   where: {
   *     // ... filter to delete one TestCaseResult
   *   }
   * })
   * 
   */
  delete<T extends TestCaseResultDeleteArgs>(args: Prisma.SelectSubset<T, TestCaseResultDeleteArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TestCaseResult.
   * @param {TestCaseResultUpdateArgs} args - Arguments to update one TestCaseResult.
   * @example
   * // Update one TestCaseResult
   * const testCaseResult = await prisma.testCaseResult.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TestCaseResultUpdateArgs>(args: Prisma.SelectSubset<T, TestCaseResultUpdateArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TestCaseResults.
   * @param {TestCaseResultDeleteManyArgs} args - Arguments to filter TestCaseResults to delete.
   * @example
   * // Delete a few TestCaseResults
   * const { count } = await prisma.testCaseResult.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TestCaseResultDeleteManyArgs>(args?: Prisma.SelectSubset<T, TestCaseResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TestCaseResults.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TestCaseResults
   * const testCaseResult = await prisma.testCaseResult.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TestCaseResultUpdateManyArgs>(args: Prisma.SelectSubset<T, TestCaseResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TestCaseResults and returns the data updated in the database.
   * @param {TestCaseResultUpdateManyAndReturnArgs} args - Arguments to update many TestCaseResults.
   * @example
   * // Update many TestCaseResults
   * const testCaseResult = await prisma.testCaseResult.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TestCaseResults and only return the `id`
   * const testCaseResultWithIdOnly = await prisma.testCaseResult.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TestCaseResultUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TestCaseResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TestCaseResult.
   * @param {TestCaseResultUpsertArgs} args - Arguments to update or create a TestCaseResult.
   * @example
   * // Update or create a TestCaseResult
   * const testCaseResult = await prisma.testCaseResult.upsert({
   *   create: {
   *     // ... data to create a TestCaseResult
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TestCaseResult we want to update
   *   }
   * })
   */
  upsert<T extends TestCaseResultUpsertArgs>(args: Prisma.SelectSubset<T, TestCaseResultUpsertArgs<ExtArgs>>): Prisma.Prisma__TestCaseResultClient<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TestCaseResults.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultCountArgs} args - Arguments to filter TestCaseResults to count.
   * @example
   * // Count the number of TestCaseResults
   * const count = await prisma.testCaseResult.count({
   *   where: {
   *     // ... the filter for the TestCaseResults we want to count
   *   }
   * })
  **/
  count<T extends TestCaseResultCountArgs>(
    args?: Prisma.Subset<T, TestCaseResultCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TestCaseResultCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TestCaseResult.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TestCaseResultAggregateArgs>(args: Prisma.Subset<T, TestCaseResultAggregateArgs>): Prisma.PrismaPromise<GetTestCaseResultAggregateType<T>>

  /**
   * Group by TestCaseResult.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCaseResultGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TestCaseResultGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TestCaseResultGroupByArgs['orderBy'] }
      : { orderBy?: TestCaseResultGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TestCaseResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCaseResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TestCaseResult model
 */
readonly fields: TestCaseResultFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TestCaseResult.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TestCaseResultClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  submission<T extends Prisma.SubmissionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubmissionDefaultArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TestCaseResult model
 */
export interface TestCaseResultFieldRefs {
  readonly id: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly submissionId: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly testCase: Prisma.FieldRef<"TestCaseResult", 'Int'>
  readonly passed: Prisma.FieldRef<"TestCaseResult", 'Boolean'>
  readonly stdout: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly expected: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly stderr: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly compileOutput: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly status: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly memory: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly time: Prisma.FieldRef<"TestCaseResult", 'String'>
  readonly createdAt: Prisma.FieldRef<"TestCaseResult", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TestCaseResult", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TestCaseResult findUnique
 */
export type TestCaseResultFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * Filter, which TestCaseResult to fetch.
   */
  where: Prisma.TestCaseResultWhereUniqueInput
}

/**
 * TestCaseResult findUniqueOrThrow
 */
export type TestCaseResultFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * Filter, which TestCaseResult to fetch.
   */
  where: Prisma.TestCaseResultWhereUniqueInput
}

/**
 * TestCaseResult findFirst
 */
export type TestCaseResultFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * Filter, which TestCaseResult to fetch.
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCaseResults to fetch.
   */
  orderBy?: Prisma.TestCaseResultOrderByWithRelationInput | Prisma.TestCaseResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TestCaseResults.
   */
  cursor?: Prisma.TestCaseResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCaseResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCaseResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TestCaseResults.
   */
  distinct?: Prisma.TestCaseResultScalarFieldEnum | Prisma.TestCaseResultScalarFieldEnum[]
}

/**
 * TestCaseResult findFirstOrThrow
 */
export type TestCaseResultFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * Filter, which TestCaseResult to fetch.
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCaseResults to fetch.
   */
  orderBy?: Prisma.TestCaseResultOrderByWithRelationInput | Prisma.TestCaseResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TestCaseResults.
   */
  cursor?: Prisma.TestCaseResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCaseResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCaseResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TestCaseResults.
   */
  distinct?: Prisma.TestCaseResultScalarFieldEnum | Prisma.TestCaseResultScalarFieldEnum[]
}

/**
 * TestCaseResult findMany
 */
export type TestCaseResultFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * Filter, which TestCaseResults to fetch.
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCaseResults to fetch.
   */
  orderBy?: Prisma.TestCaseResultOrderByWithRelationInput | Prisma.TestCaseResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TestCaseResults.
   */
  cursor?: Prisma.TestCaseResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCaseResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCaseResults.
   */
  skip?: number
  distinct?: Prisma.TestCaseResultScalarFieldEnum | Prisma.TestCaseResultScalarFieldEnum[]
}

/**
 * TestCaseResult create
 */
export type TestCaseResultCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * The data needed to create a TestCaseResult.
   */
  data: Prisma.XOR<Prisma.TestCaseResultCreateInput, Prisma.TestCaseResultUncheckedCreateInput>
}

/**
 * TestCaseResult createMany
 */
export type TestCaseResultCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TestCaseResults.
   */
  data: Prisma.TestCaseResultCreateManyInput | Prisma.TestCaseResultCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TestCaseResult createManyAndReturn
 */
export type TestCaseResultCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * The data used to create many TestCaseResults.
   */
  data: Prisma.TestCaseResultCreateManyInput | Prisma.TestCaseResultCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TestCaseResult update
 */
export type TestCaseResultUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * The data needed to update a TestCaseResult.
   */
  data: Prisma.XOR<Prisma.TestCaseResultUpdateInput, Prisma.TestCaseResultUncheckedUpdateInput>
  /**
   * Choose, which TestCaseResult to update.
   */
  where: Prisma.TestCaseResultWhereUniqueInput
}

/**
 * TestCaseResult updateMany
 */
export type TestCaseResultUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TestCaseResults.
   */
  data: Prisma.XOR<Prisma.TestCaseResultUpdateManyMutationInput, Prisma.TestCaseResultUncheckedUpdateManyInput>
  /**
   * Filter which TestCaseResults to update
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * Limit how many TestCaseResults to update.
   */
  limit?: number
}

/**
 * TestCaseResult updateManyAndReturn
 */
export type TestCaseResultUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * The data used to update TestCaseResults.
   */
  data: Prisma.XOR<Prisma.TestCaseResultUpdateManyMutationInput, Prisma.TestCaseResultUncheckedUpdateManyInput>
  /**
   * Filter which TestCaseResults to update
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * Limit how many TestCaseResults to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TestCaseResult upsert
 */
export type TestCaseResultUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * The filter to search for the TestCaseResult to update in case it exists.
   */
  where: Prisma.TestCaseResultWhereUniqueInput
  /**
   * In case the TestCaseResult found by the `where` argument doesn't exist, create a new TestCaseResult with this data.
   */
  create: Prisma.XOR<Prisma.TestCaseResultCreateInput, Prisma.TestCaseResultUncheckedCreateInput>
  /**
   * In case the TestCaseResult was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TestCaseResultUpdateInput, Prisma.TestCaseResultUncheckedUpdateInput>
}

/**
 * TestCaseResult delete
 */
export type TestCaseResultDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  /**
   * Filter which TestCaseResult to delete.
   */
  where: Prisma.TestCaseResultWhereUniqueInput
}

/**
 * TestCaseResult deleteMany
 */
export type TestCaseResultDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TestCaseResults to delete
   */
  where?: Prisma.TestCaseResultWhereInput
  /**
   * Limit how many TestCaseResults to delete.
   */
  limit?: number
}

/**
 * TestCaseResult without action
 */
export type TestCaseResultDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
}
