
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TestCases` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TestCases
 * 
 */
export type TestCasesModel = runtime.Types.Result.DefaultSelection<Prisma.$TestCasesPayload>

export type AggregateTestCases = {
  _count: TestCasesCountAggregateOutputType | null
  _avg: TestCasesAvgAggregateOutputType | null
  _sum: TestCasesSumAggregateOutputType | null
  _min: TestCasesMinAggregateOutputType | null
  _max: TestCasesMaxAggregateOutputType | null
}

export type TestCasesAvgAggregateOutputType = {
  id: number | null
}

export type TestCasesSumAggregateOutputType = {
  id: number | null
}

export type TestCasesMinAggregateOutputType = {
  id: number | null
  problemId: string | null
  input: string | null
  output: string | null
  explanation: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TestCasesMaxAggregateOutputType = {
  id: number | null
  problemId: string | null
  input: string | null
  output: string | null
  explanation: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TestCasesCountAggregateOutputType = {
  id: number
  problemId: number
  input: number
  output: number
  explanation: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TestCasesAvgAggregateInputType = {
  id?: true
}

export type TestCasesSumAggregateInputType = {
  id?: true
}

export type TestCasesMinAggregateInputType = {
  id?: true
  problemId?: true
  input?: true
  output?: true
  explanation?: true
  createdAt?: true
  updatedAt?: true
}

export type TestCasesMaxAggregateInputType = {
  id?: true
  problemId?: true
  input?: true
  output?: true
  explanation?: true
  createdAt?: true
  updatedAt?: true
}

export type TestCasesCountAggregateInputType = {
  id?: true
  problemId?: true
  input?: true
  output?: true
  explanation?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TestCasesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TestCases to aggregate.
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCases to fetch.
   */
  orderBy?: Prisma.TestCasesOrderByWithRelationInput | Prisma.TestCasesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TestCasesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TestCases
  **/
  _count?: true | TestCasesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TestCasesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TestCasesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TestCasesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TestCasesMaxAggregateInputType
}

export type GetTestCasesAggregateType<T extends TestCasesAggregateArgs> = {
      [P in keyof T & keyof AggregateTestCases]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTestCases[P]>
    : Prisma.GetScalarType<T[P], AggregateTestCases[P]>
}




export type TestCasesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TestCasesWhereInput
  orderBy?: Prisma.TestCasesOrderByWithAggregationInput | Prisma.TestCasesOrderByWithAggregationInput[]
  by: Prisma.TestCasesScalarFieldEnum[] | Prisma.TestCasesScalarFieldEnum
  having?: Prisma.TestCasesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TestCasesCountAggregateInputType | true
  _avg?: TestCasesAvgAggregateInputType
  _sum?: TestCasesSumAggregateInputType
  _min?: TestCasesMinAggregateInputType
  _max?: TestCasesMaxAggregateInputType
}

export type TestCasesGroupByOutputType = {
  id: number
  problemId: string
  input: string
  output: string
  explanation: string | null
  createdAt: Date
  updatedAt: Date
  _count: TestCasesCountAggregateOutputType | null
  _avg: TestCasesAvgAggregateOutputType | null
  _sum: TestCasesSumAggregateOutputType | null
  _min: TestCasesMinAggregateOutputType | null
  _max: TestCasesMaxAggregateOutputType | null
}

type GetTestCasesGroupByPayload<T extends TestCasesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TestCasesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TestCasesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TestCasesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TestCasesGroupByOutputType[P]>
      }
    >
  > 



export type TestCasesWhereInput = {
  AND?: Prisma.TestCasesWhereInput | Prisma.TestCasesWhereInput[]
  OR?: Prisma.TestCasesWhereInput[]
  NOT?: Prisma.TestCasesWhereInput | Prisma.TestCasesWhereInput[]
  id?: Prisma.IntFilter<"TestCases"> | number
  problemId?: Prisma.StringFilter<"TestCases"> | string
  input?: Prisma.StringFilter<"TestCases"> | string
  output?: Prisma.StringFilter<"TestCases"> | string
  explanation?: Prisma.StringNullableFilter<"TestCases"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestCases"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestCases"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type TestCasesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  explanation?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type TestCasesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TestCasesWhereInput | Prisma.TestCasesWhereInput[]
  OR?: Prisma.TestCasesWhereInput[]
  NOT?: Prisma.TestCasesWhereInput | Prisma.TestCasesWhereInput[]
  problemId?: Prisma.StringFilter<"TestCases"> | string
  input?: Prisma.StringFilter<"TestCases"> | string
  output?: Prisma.StringFilter<"TestCases"> | string
  explanation?: Prisma.StringNullableFilter<"TestCases"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestCases"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestCases"> | Date | string
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id">

export type TestCasesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  explanation?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TestCasesCountOrderByAggregateInput
  _avg?: Prisma.TestCasesAvgOrderByAggregateInput
  _max?: Prisma.TestCasesMaxOrderByAggregateInput
  _min?: Prisma.TestCasesMinOrderByAggregateInput
  _sum?: Prisma.TestCasesSumOrderByAggregateInput
}

export type TestCasesScalarWhereWithAggregatesInput = {
  AND?: Prisma.TestCasesScalarWhereWithAggregatesInput | Prisma.TestCasesScalarWhereWithAggregatesInput[]
  OR?: Prisma.TestCasesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TestCasesScalarWhereWithAggregatesInput | Prisma.TestCasesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TestCases"> | number
  problemId?: Prisma.StringWithAggregatesFilter<"TestCases"> | string
  input?: Prisma.StringWithAggregatesFilter<"TestCases"> | string
  output?: Prisma.StringWithAggregatesFilter<"TestCases"> | string
  explanation?: Prisma.StringNullableWithAggregatesFilter<"TestCases"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TestCases"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TestCases"> | Date | string
}

export type TestCasesCreateInput = {
  input: string
  output: string
  explanation?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutTestcasesInput
}

export type TestCasesUncheckedCreateInput = {
  id?: number
  problemId: string
  input: string
  output: string
  explanation?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCasesUpdateInput = {
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutTestcasesNestedInput
}

export type TestCasesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCasesCreateManyInput = {
  id?: number
  problemId: string
  input: string
  output: string
  explanation?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCasesUpdateManyMutationInput = {
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCasesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCasesListRelationFilter = {
  every?: Prisma.TestCasesWhereInput
  some?: Prisma.TestCasesWhereInput
  none?: Prisma.TestCasesWhereInput
}

export type TestCasesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TestCasesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestCasesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TestCasesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestCasesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestCasesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TestCasesCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.TestCasesCreateWithoutProblemInput, Prisma.TestCasesUncheckedCreateWithoutProblemInput> | Prisma.TestCasesCreateWithoutProblemInput[] | Prisma.TestCasesUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.TestCasesCreateOrConnectWithoutProblemInput | Prisma.TestCasesCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.TestCasesCreateManyProblemInputEnvelope
  connect?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
}

export type TestCasesUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.TestCasesCreateWithoutProblemInput, Prisma.TestCasesUncheckedCreateWithoutProblemInput> | Prisma.TestCasesCreateWithoutProblemInput[] | Prisma.TestCasesUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.TestCasesCreateOrConnectWithoutProblemInput | Prisma.TestCasesCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.TestCasesCreateManyProblemInputEnvelope
  connect?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
}

export type TestCasesUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.TestCasesCreateWithoutProblemInput, Prisma.TestCasesUncheckedCreateWithoutProblemInput> | Prisma.TestCasesCreateWithoutProblemInput[] | Prisma.TestCasesUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.TestCasesCreateOrConnectWithoutProblemInput | Prisma.TestCasesCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.TestCasesUpsertWithWhereUniqueWithoutProblemInput | Prisma.TestCasesUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.TestCasesCreateManyProblemInputEnvelope
  set?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  disconnect?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  delete?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  connect?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  update?: Prisma.TestCasesUpdateWithWhereUniqueWithoutProblemInput | Prisma.TestCasesUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.TestCasesUpdateManyWithWhereWithoutProblemInput | Prisma.TestCasesUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.TestCasesScalarWhereInput | Prisma.TestCasesScalarWhereInput[]
}

export type TestCasesUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.TestCasesCreateWithoutProblemInput, Prisma.TestCasesUncheckedCreateWithoutProblemInput> | Prisma.TestCasesCreateWithoutProblemInput[] | Prisma.TestCasesUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.TestCasesCreateOrConnectWithoutProblemInput | Prisma.TestCasesCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.TestCasesUpsertWithWhereUniqueWithoutProblemInput | Prisma.TestCasesUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.TestCasesCreateManyProblemInputEnvelope
  set?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  disconnect?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  delete?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  connect?: Prisma.TestCasesWhereUniqueInput | Prisma.TestCasesWhereUniqueInput[]
  update?: Prisma.TestCasesUpdateWithWhereUniqueWithoutProblemInput | Prisma.TestCasesUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.TestCasesUpdateManyWithWhereWithoutProblemInput | Prisma.TestCasesUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.TestCasesScalarWhereInput | Prisma.TestCasesScalarWhereInput[]
}

export type TestCasesCreateWithoutProblemInput = {
  input: string
  output: string
  explanation?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCasesUncheckedCreateWithoutProblemInput = {
  id?: number
  input: string
  output: string
  explanation?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCasesCreateOrConnectWithoutProblemInput = {
  where: Prisma.TestCasesWhereUniqueInput
  create: Prisma.XOR<Prisma.TestCasesCreateWithoutProblemInput, Prisma.TestCasesUncheckedCreateWithoutProblemInput>
}

export type TestCasesCreateManyProblemInputEnvelope = {
  data: Prisma.TestCasesCreateManyProblemInput | Prisma.TestCasesCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type TestCasesUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.TestCasesWhereUniqueInput
  update: Prisma.XOR<Prisma.TestCasesUpdateWithoutProblemInput, Prisma.TestCasesUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.TestCasesCreateWithoutProblemInput, Prisma.TestCasesUncheckedCreateWithoutProblemInput>
}

export type TestCasesUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.TestCasesWhereUniqueInput
  data: Prisma.XOR<Prisma.TestCasesUpdateWithoutProblemInput, Prisma.TestCasesUncheckedUpdateWithoutProblemInput>
}

export type TestCasesUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.TestCasesScalarWhereInput
  data: Prisma.XOR<Prisma.TestCasesUpdateManyMutationInput, Prisma.TestCasesUncheckedUpdateManyWithoutProblemInput>
}

export type TestCasesScalarWhereInput = {
  AND?: Prisma.TestCasesScalarWhereInput | Prisma.TestCasesScalarWhereInput[]
  OR?: Prisma.TestCasesScalarWhereInput[]
  NOT?: Prisma.TestCasesScalarWhereInput | Prisma.TestCasesScalarWhereInput[]
  id?: Prisma.IntFilter<"TestCases"> | number
  problemId?: Prisma.StringFilter<"TestCases"> | string
  input?: Prisma.StringFilter<"TestCases"> | string
  output?: Prisma.StringFilter<"TestCases"> | string
  explanation?: Prisma.StringNullableFilter<"TestCases"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestCases"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestCases"> | Date | string
}

export type TestCasesCreateManyProblemInput = {
  id?: number
  input: string
  output: string
  explanation?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestCasesUpdateWithoutProblemInput = {
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCasesUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestCasesUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  input?: Prisma.StringFieldUpdateOperationsInput | string
  output?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TestCasesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  input?: boolean
  output?: boolean
  explanation?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testCases"]>

export type TestCasesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  input?: boolean
  output?: boolean
  explanation?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testCases"]>

export type TestCasesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  problemId?: boolean
  input?: boolean
  output?: boolean
  explanation?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testCases"]>

export type TestCasesSelectScalar = {
  id?: boolean
  problemId?: boolean
  input?: boolean
  output?: boolean
  explanation?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TestCasesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "problemId" | "input" | "output" | "explanation" | "createdAt" | "updatedAt", ExtArgs["result"]["testCases"]>
export type TestCasesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type TestCasesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type TestCasesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $TestCasesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TestCases"
  objects: {
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    problemId: string
    input: string
    output: string
    explanation: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["testCases"]>
  composites: {}
}

export type TestCasesGetPayload<S extends boolean | null | undefined | TestCasesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TestCasesPayload, S>

export type TestCasesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TestCasesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TestCasesCountAggregateInputType | true
  }

export interface TestCasesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCases'], meta: { name: 'TestCases' } }
  /**
   * Find zero or one TestCases that matches the filter.
   * @param {TestCasesFindUniqueArgs} args - Arguments to find a TestCases
   * @example
   * // Get one TestCases
   * const testCases = await prisma.testCases.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TestCasesFindUniqueArgs>(args: Prisma.SelectSubset<T, TestCasesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TestCases that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TestCasesFindUniqueOrThrowArgs} args - Arguments to find a TestCases
   * @example
   * // Get one TestCases
   * const testCases = await prisma.testCases.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TestCasesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TestCasesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TestCases that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesFindFirstArgs} args - Arguments to find a TestCases
   * @example
   * // Get one TestCases
   * const testCases = await prisma.testCases.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TestCasesFindFirstArgs>(args?: Prisma.SelectSubset<T, TestCasesFindFirstArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TestCases that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesFindFirstOrThrowArgs} args - Arguments to find a TestCases
   * @example
   * // Get one TestCases
   * const testCases = await prisma.testCases.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TestCasesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TestCasesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TestCases that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TestCases
   * const testCases = await prisma.testCases.findMany()
   * 
   * // Get first 10 TestCases
   * const testCases = await prisma.testCases.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const testCasesWithIdOnly = await prisma.testCases.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TestCasesFindManyArgs>(args?: Prisma.SelectSubset<T, TestCasesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TestCases.
   * @param {TestCasesCreateArgs} args - Arguments to create a TestCases.
   * @example
   * // Create one TestCases
   * const TestCases = await prisma.testCases.create({
   *   data: {
   *     // ... data to create a TestCases
   *   }
   * })
   * 
   */
  create<T extends TestCasesCreateArgs>(args: Prisma.SelectSubset<T, TestCasesCreateArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TestCases.
   * @param {TestCasesCreateManyArgs} args - Arguments to create many TestCases.
   * @example
   * // Create many TestCases
   * const testCases = await prisma.testCases.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TestCasesCreateManyArgs>(args?: Prisma.SelectSubset<T, TestCasesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TestCases and returns the data saved in the database.
   * @param {TestCasesCreateManyAndReturnArgs} args - Arguments to create many TestCases.
   * @example
   * // Create many TestCases
   * const testCases = await prisma.testCases.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TestCases and only return the `id`
   * const testCasesWithIdOnly = await prisma.testCases.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TestCasesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TestCasesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TestCases.
   * @param {TestCasesDeleteArgs} args - Arguments to delete one TestCases.
   * @example
   * // Delete one TestCases
   * const TestCases = await prisma.testCases.delete({
   *   where: {
   *     // ... filter to delete one TestCases
   *   }
   * })
   * 
   */
  delete<T extends TestCasesDeleteArgs>(args: Prisma.SelectSubset<T, TestCasesDeleteArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TestCases.
   * @param {TestCasesUpdateArgs} args - Arguments to update one TestCases.
   * @example
   * // Update one TestCases
   * const testCases = await prisma.testCases.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TestCasesUpdateArgs>(args: Prisma.SelectSubset<T, TestCasesUpdateArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TestCases.
   * @param {TestCasesDeleteManyArgs} args - Arguments to filter TestCases to delete.
   * @example
   * // Delete a few TestCases
   * const { count } = await prisma.testCases.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TestCasesDeleteManyArgs>(args?: Prisma.SelectSubset<T, TestCasesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TestCases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TestCases
   * const testCases = await prisma.testCases.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TestCasesUpdateManyArgs>(args: Prisma.SelectSubset<T, TestCasesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TestCases and returns the data updated in the database.
   * @param {TestCasesUpdateManyAndReturnArgs} args - Arguments to update many TestCases.
   * @example
   * // Update many TestCases
   * const testCases = await prisma.testCases.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TestCases and only return the `id`
   * const testCasesWithIdOnly = await prisma.testCases.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TestCasesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TestCasesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TestCases.
   * @param {TestCasesUpsertArgs} args - Arguments to update or create a TestCases.
   * @example
   * // Update or create a TestCases
   * const testCases = await prisma.testCases.upsert({
   *   create: {
   *     // ... data to create a TestCases
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TestCases we want to update
   *   }
   * })
   */
  upsert<T extends TestCasesUpsertArgs>(args: Prisma.SelectSubset<T, TestCasesUpsertArgs<ExtArgs>>): Prisma.Prisma__TestCasesClient<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TestCases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesCountArgs} args - Arguments to filter TestCases to count.
   * @example
   * // Count the number of TestCases
   * const count = await prisma.testCases.count({
   *   where: {
   *     // ... the filter for the TestCases we want to count
   *   }
   * })
  **/
  count<T extends TestCasesCountArgs>(
    args?: Prisma.Subset<T, TestCasesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TestCasesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TestCases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TestCasesAggregateArgs>(args: Prisma.Subset<T, TestCasesAggregateArgs>): Prisma.PrismaPromise<GetTestCasesAggregateType<T>>

  /**
   * Group by TestCases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestCasesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TestCasesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TestCasesGroupByArgs['orderBy'] }
      : { orderBy?: TestCasesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TestCasesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCasesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TestCases model
 */
readonly fields: TestCasesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TestCases.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TestCasesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TestCases model
 */
export interface TestCasesFieldRefs {
  readonly id: Prisma.FieldRef<"TestCases", 'Int'>
  readonly problemId: Prisma.FieldRef<"TestCases", 'String'>
  readonly input: Prisma.FieldRef<"TestCases", 'String'>
  readonly output: Prisma.FieldRef<"TestCases", 'String'>
  readonly explanation: Prisma.FieldRef<"TestCases", 'String'>
  readonly createdAt: Prisma.FieldRef<"TestCases", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TestCases", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TestCases findUnique
 */
export type TestCasesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * Filter, which TestCases to fetch.
   */
  where: Prisma.TestCasesWhereUniqueInput
}

/**
 * TestCases findUniqueOrThrow
 */
export type TestCasesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * Filter, which TestCases to fetch.
   */
  where: Prisma.TestCasesWhereUniqueInput
}

/**
 * TestCases findFirst
 */
export type TestCasesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * Filter, which TestCases to fetch.
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCases to fetch.
   */
  orderBy?: Prisma.TestCasesOrderByWithRelationInput | Prisma.TestCasesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TestCases.
   */
  cursor?: Prisma.TestCasesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TestCases.
   */
  distinct?: Prisma.TestCasesScalarFieldEnum | Prisma.TestCasesScalarFieldEnum[]
}

/**
 * TestCases findFirstOrThrow
 */
export type TestCasesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * Filter, which TestCases to fetch.
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCases to fetch.
   */
  orderBy?: Prisma.TestCasesOrderByWithRelationInput | Prisma.TestCasesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TestCases.
   */
  cursor?: Prisma.TestCasesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TestCases.
   */
  distinct?: Prisma.TestCasesScalarFieldEnum | Prisma.TestCasesScalarFieldEnum[]
}

/**
 * TestCases findMany
 */
export type TestCasesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * Filter, which TestCases to fetch.
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestCases to fetch.
   */
  orderBy?: Prisma.TestCasesOrderByWithRelationInput | Prisma.TestCasesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TestCases.
   */
  cursor?: Prisma.TestCasesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestCases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestCases.
   */
  skip?: number
  distinct?: Prisma.TestCasesScalarFieldEnum | Prisma.TestCasesScalarFieldEnum[]
}

/**
 * TestCases create
 */
export type TestCasesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * The data needed to create a TestCases.
   */
  data: Prisma.XOR<Prisma.TestCasesCreateInput, Prisma.TestCasesUncheckedCreateInput>
}

/**
 * TestCases createMany
 */
export type TestCasesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TestCases.
   */
  data: Prisma.TestCasesCreateManyInput | Prisma.TestCasesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TestCases createManyAndReturn
 */
export type TestCasesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * The data used to create many TestCases.
   */
  data: Prisma.TestCasesCreateManyInput | Prisma.TestCasesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TestCases update
 */
export type TestCasesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * The data needed to update a TestCases.
   */
  data: Prisma.XOR<Prisma.TestCasesUpdateInput, Prisma.TestCasesUncheckedUpdateInput>
  /**
   * Choose, which TestCases to update.
   */
  where: Prisma.TestCasesWhereUniqueInput
}

/**
 * TestCases updateMany
 */
export type TestCasesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TestCases.
   */
  data: Prisma.XOR<Prisma.TestCasesUpdateManyMutationInput, Prisma.TestCasesUncheckedUpdateManyInput>
  /**
   * Filter which TestCases to update
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * Limit how many TestCases to update.
   */
  limit?: number
}

/**
 * TestCases updateManyAndReturn
 */
export type TestCasesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * The data used to update TestCases.
   */
  data: Prisma.XOR<Prisma.TestCasesUpdateManyMutationInput, Prisma.TestCasesUncheckedUpdateManyInput>
  /**
   * Filter which TestCases to update
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * Limit how many TestCases to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TestCases upsert
 */
export type TestCasesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * The filter to search for the TestCases to update in case it exists.
   */
  where: Prisma.TestCasesWhereUniqueInput
  /**
   * In case the TestCases found by the `where` argument doesn't exist, create a new TestCases with this data.
   */
  create: Prisma.XOR<Prisma.TestCasesCreateInput, Prisma.TestCasesUncheckedCreateInput>
  /**
   * In case the TestCases was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TestCasesUpdateInput, Prisma.TestCasesUncheckedUpdateInput>
}

/**
 * TestCases delete
 */
export type TestCasesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  /**
   * Filter which TestCases to delete.
   */
  where: Prisma.TestCasesWhereUniqueInput
}

/**
 * TestCases deleteMany
 */
export type TestCasesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TestCases to delete
   */
  where?: Prisma.TestCasesWhereInput
  /**
   * Limit how many TestCases to delete.
   */
  limit?: number
}

/**
 * TestCases without action
 */
export type TestCasesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
}
