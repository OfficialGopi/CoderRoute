
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ContestParticipation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ContestParticipation
 * 
 */
export type ContestParticipationModel = runtime.Types.Result.DefaultSelection<Prisma.$ContestParticipationPayload>

export type AggregateContestParticipation = {
  _count: ContestParticipationCountAggregateOutputType | null
  _avg: ContestParticipationAvgAggregateOutputType | null
  _sum: ContestParticipationSumAggregateOutputType | null
  _min: ContestParticipationMinAggregateOutputType | null
  _max: ContestParticipationMaxAggregateOutputType | null
}

export type ContestParticipationAvgAggregateOutputType = {
  score: number | null
}

export type ContestParticipationSumAggregateOutputType = {
  score: number | null
}

export type ContestParticipationMinAggregateOutputType = {
  id: string | null
  userId: string | null
  contestId: string | null
  startedAt: Date | null
  submittedAt: Date | null
  score: number | null
  submissionId: string | null
}

export type ContestParticipationMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  contestId: string | null
  startedAt: Date | null
  submittedAt: Date | null
  score: number | null
  submissionId: string | null
}

export type ContestParticipationCountAggregateOutputType = {
  id: number
  userId: number
  contestId: number
  startedAt: number
  submittedAt: number
  score: number
  submissionId: number
  _all: number
}


export type ContestParticipationAvgAggregateInputType = {
  score?: true
}

export type ContestParticipationSumAggregateInputType = {
  score?: true
}

export type ContestParticipationMinAggregateInputType = {
  id?: true
  userId?: true
  contestId?: true
  startedAt?: true
  submittedAt?: true
  score?: true
  submissionId?: true
}

export type ContestParticipationMaxAggregateInputType = {
  id?: true
  userId?: true
  contestId?: true
  startedAt?: true
  submittedAt?: true
  score?: true
  submissionId?: true
}

export type ContestParticipationCountAggregateInputType = {
  id?: true
  userId?: true
  contestId?: true
  startedAt?: true
  submittedAt?: true
  score?: true
  submissionId?: true
  _all?: true
}

export type ContestParticipationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContestParticipation to aggregate.
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestParticipations to fetch.
   */
  orderBy?: Prisma.ContestParticipationOrderByWithRelationInput | Prisma.ContestParticipationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContestParticipationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestParticipations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestParticipations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ContestParticipations
  **/
  _count?: true | ContestParticipationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ContestParticipationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ContestParticipationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContestParticipationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContestParticipationMaxAggregateInputType
}

export type GetContestParticipationAggregateType<T extends ContestParticipationAggregateArgs> = {
      [P in keyof T & keyof AggregateContestParticipation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContestParticipation[P]>
    : Prisma.GetScalarType<T[P], AggregateContestParticipation[P]>
}




export type ContestParticipationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContestParticipationWhereInput
  orderBy?: Prisma.ContestParticipationOrderByWithAggregationInput | Prisma.ContestParticipationOrderByWithAggregationInput[]
  by: Prisma.ContestParticipationScalarFieldEnum[] | Prisma.ContestParticipationScalarFieldEnum
  having?: Prisma.ContestParticipationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContestParticipationCountAggregateInputType | true
  _avg?: ContestParticipationAvgAggregateInputType
  _sum?: ContestParticipationSumAggregateInputType
  _min?: ContestParticipationMinAggregateInputType
  _max?: ContestParticipationMaxAggregateInputType
}

export type ContestParticipationGroupByOutputType = {
  id: string
  userId: string
  contestId: string
  startedAt: Date
  submittedAt: Date | null
  score: number
  submissionId: string | null
  _count: ContestParticipationCountAggregateOutputType | null
  _avg: ContestParticipationAvgAggregateOutputType | null
  _sum: ContestParticipationSumAggregateOutputType | null
  _min: ContestParticipationMinAggregateOutputType | null
  _max: ContestParticipationMaxAggregateOutputType | null
}

type GetContestParticipationGroupByPayload<T extends ContestParticipationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContestParticipationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContestParticipationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContestParticipationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContestParticipationGroupByOutputType[P]>
      }
    >
  > 



export type ContestParticipationWhereInput = {
  AND?: Prisma.ContestParticipationWhereInput | Prisma.ContestParticipationWhereInput[]
  OR?: Prisma.ContestParticipationWhereInput[]
  NOT?: Prisma.ContestParticipationWhereInput | Prisma.ContestParticipationWhereInput[]
  id?: Prisma.StringFilter<"ContestParticipation"> | string
  userId?: Prisma.StringFilter<"ContestParticipation"> | string
  contestId?: Prisma.StringFilter<"ContestParticipation"> | string
  startedAt?: Prisma.DateTimeFilter<"ContestParticipation"> | Date | string
  submittedAt?: Prisma.DateTimeNullableFilter<"ContestParticipation"> | Date | string | null
  score?: Prisma.FloatFilter<"ContestParticipation"> | number
  submissionId?: Prisma.StringNullableFilter<"ContestParticipation"> | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  contest?: Prisma.XOR<Prisma.ContestScalarRelationFilter, Prisma.ContestWhereInput>
}

export type ContestParticipationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrder
  submissionId?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  contest?: Prisma.ContestOrderByWithRelationInput
}

export type ContestParticipationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_contestId?: Prisma.ContestParticipationUserIdContestIdCompoundUniqueInput
  AND?: Prisma.ContestParticipationWhereInput | Prisma.ContestParticipationWhereInput[]
  OR?: Prisma.ContestParticipationWhereInput[]
  NOT?: Prisma.ContestParticipationWhereInput | Prisma.ContestParticipationWhereInput[]
  userId?: Prisma.StringFilter<"ContestParticipation"> | string
  contestId?: Prisma.StringFilter<"ContestParticipation"> | string
  startedAt?: Prisma.DateTimeFilter<"ContestParticipation"> | Date | string
  submittedAt?: Prisma.DateTimeNullableFilter<"ContestParticipation"> | Date | string | null
  score?: Prisma.FloatFilter<"ContestParticipation"> | number
  submissionId?: Prisma.StringNullableFilter<"ContestParticipation"> | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  contest?: Prisma.XOR<Prisma.ContestScalarRelationFilter, Prisma.ContestWhereInput>
}, "id" | "userId_contestId">

export type ContestParticipationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrder
  submissionId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ContestParticipationCountOrderByAggregateInput
  _avg?: Prisma.ContestParticipationAvgOrderByAggregateInput
  _max?: Prisma.ContestParticipationMaxOrderByAggregateInput
  _min?: Prisma.ContestParticipationMinOrderByAggregateInput
  _sum?: Prisma.ContestParticipationSumOrderByAggregateInput
}

export type ContestParticipationScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContestParticipationScalarWhereWithAggregatesInput | Prisma.ContestParticipationScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContestParticipationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContestParticipationScalarWhereWithAggregatesInput | Prisma.ContestParticipationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ContestParticipation"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ContestParticipation"> | string
  contestId?: Prisma.StringWithAggregatesFilter<"ContestParticipation"> | string
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"ContestParticipation"> | Date | string
  submittedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ContestParticipation"> | Date | string | null
  score?: Prisma.FloatWithAggregatesFilter<"ContestParticipation"> | number
  submissionId?: Prisma.StringNullableWithAggregatesFilter<"ContestParticipation"> | string | null
}

export type ContestParticipationCreateInput = {
  id?: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
  user: Prisma.UserCreateNestedOneWithoutContestParticipationInput
  contest: Prisma.ContestCreateNestedOneWithoutParticipationsInput
}

export type ContestParticipationUncheckedCreateInput = {
  id?: string
  userId: string
  contestId: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
}

export type ContestParticipationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutContestParticipationNestedInput
  contest?: Prisma.ContestUpdateOneRequiredWithoutParticipationsNestedInput
}

export type ContestParticipationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ContestParticipationCreateManyInput = {
  id?: string
  userId: string
  contestId: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
}

export type ContestParticipationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ContestParticipationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ContestParticipationListRelationFilter = {
  every?: Prisma.ContestParticipationWhereInput
  some?: Prisma.ContestParticipationWhereInput
  none?: Prisma.ContestParticipationWhereInput
}

export type ContestParticipationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ContestParticipationUserIdContestIdCompoundUniqueInput = {
  userId: string
  contestId: string
}

export type ContestParticipationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  score?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
}

export type ContestParticipationAvgOrderByAggregateInput = {
  score?: Prisma.SortOrder
}

export type ContestParticipationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  score?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
}

export type ContestParticipationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  contestId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  score?: Prisma.SortOrder
  submissionId?: Prisma.SortOrder
}

export type ContestParticipationSumOrderByAggregateInput = {
  score?: Prisma.SortOrder
}

export type ContestParticipationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutUserInput, Prisma.ContestParticipationUncheckedCreateWithoutUserInput> | Prisma.ContestParticipationCreateWithoutUserInput[] | Prisma.ContestParticipationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutUserInput | Prisma.ContestParticipationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ContestParticipationCreateManyUserInputEnvelope
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
}

export type ContestParticipationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutUserInput, Prisma.ContestParticipationUncheckedCreateWithoutUserInput> | Prisma.ContestParticipationCreateWithoutUserInput[] | Prisma.ContestParticipationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutUserInput | Prisma.ContestParticipationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ContestParticipationCreateManyUserInputEnvelope
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
}

export type ContestParticipationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutUserInput, Prisma.ContestParticipationUncheckedCreateWithoutUserInput> | Prisma.ContestParticipationCreateWithoutUserInput[] | Prisma.ContestParticipationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutUserInput | Prisma.ContestParticipationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ContestParticipationUpsertWithWhereUniqueWithoutUserInput | Prisma.ContestParticipationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ContestParticipationCreateManyUserInputEnvelope
  set?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  disconnect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  delete?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  update?: Prisma.ContestParticipationUpdateWithWhereUniqueWithoutUserInput | Prisma.ContestParticipationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ContestParticipationUpdateManyWithWhereWithoutUserInput | Prisma.ContestParticipationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ContestParticipationScalarWhereInput | Prisma.ContestParticipationScalarWhereInput[]
}

export type ContestParticipationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutUserInput, Prisma.ContestParticipationUncheckedCreateWithoutUserInput> | Prisma.ContestParticipationCreateWithoutUserInput[] | Prisma.ContestParticipationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutUserInput | Prisma.ContestParticipationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ContestParticipationUpsertWithWhereUniqueWithoutUserInput | Prisma.ContestParticipationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ContestParticipationCreateManyUserInputEnvelope
  set?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  disconnect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  delete?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  update?: Prisma.ContestParticipationUpdateWithWhereUniqueWithoutUserInput | Prisma.ContestParticipationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ContestParticipationUpdateManyWithWhereWithoutUserInput | Prisma.ContestParticipationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ContestParticipationScalarWhereInput | Prisma.ContestParticipationScalarWhereInput[]
}

export type ContestParticipationCreateNestedManyWithoutContestInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutContestInput, Prisma.ContestParticipationUncheckedCreateWithoutContestInput> | Prisma.ContestParticipationCreateWithoutContestInput[] | Prisma.ContestParticipationUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutContestInput | Prisma.ContestParticipationCreateOrConnectWithoutContestInput[]
  createMany?: Prisma.ContestParticipationCreateManyContestInputEnvelope
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
}

export type ContestParticipationUncheckedCreateNestedManyWithoutContestInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutContestInput, Prisma.ContestParticipationUncheckedCreateWithoutContestInput> | Prisma.ContestParticipationCreateWithoutContestInput[] | Prisma.ContestParticipationUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutContestInput | Prisma.ContestParticipationCreateOrConnectWithoutContestInput[]
  createMany?: Prisma.ContestParticipationCreateManyContestInputEnvelope
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
}

export type ContestParticipationUpdateManyWithoutContestNestedInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutContestInput, Prisma.ContestParticipationUncheckedCreateWithoutContestInput> | Prisma.ContestParticipationCreateWithoutContestInput[] | Prisma.ContestParticipationUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutContestInput | Prisma.ContestParticipationCreateOrConnectWithoutContestInput[]
  upsert?: Prisma.ContestParticipationUpsertWithWhereUniqueWithoutContestInput | Prisma.ContestParticipationUpsertWithWhereUniqueWithoutContestInput[]
  createMany?: Prisma.ContestParticipationCreateManyContestInputEnvelope
  set?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  disconnect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  delete?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  update?: Prisma.ContestParticipationUpdateWithWhereUniqueWithoutContestInput | Prisma.ContestParticipationUpdateWithWhereUniqueWithoutContestInput[]
  updateMany?: Prisma.ContestParticipationUpdateManyWithWhereWithoutContestInput | Prisma.ContestParticipationUpdateManyWithWhereWithoutContestInput[]
  deleteMany?: Prisma.ContestParticipationScalarWhereInput | Prisma.ContestParticipationScalarWhereInput[]
}

export type ContestParticipationUncheckedUpdateManyWithoutContestNestedInput = {
  create?: Prisma.XOR<Prisma.ContestParticipationCreateWithoutContestInput, Prisma.ContestParticipationUncheckedCreateWithoutContestInput> | Prisma.ContestParticipationCreateWithoutContestInput[] | Prisma.ContestParticipationUncheckedCreateWithoutContestInput[]
  connectOrCreate?: Prisma.ContestParticipationCreateOrConnectWithoutContestInput | Prisma.ContestParticipationCreateOrConnectWithoutContestInput[]
  upsert?: Prisma.ContestParticipationUpsertWithWhereUniqueWithoutContestInput | Prisma.ContestParticipationUpsertWithWhereUniqueWithoutContestInput[]
  createMany?: Prisma.ContestParticipationCreateManyContestInputEnvelope
  set?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  disconnect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  delete?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  connect?: Prisma.ContestParticipationWhereUniqueInput | Prisma.ContestParticipationWhereUniqueInput[]
  update?: Prisma.ContestParticipationUpdateWithWhereUniqueWithoutContestInput | Prisma.ContestParticipationUpdateWithWhereUniqueWithoutContestInput[]
  updateMany?: Prisma.ContestParticipationUpdateManyWithWhereWithoutContestInput | Prisma.ContestParticipationUpdateManyWithWhereWithoutContestInput[]
  deleteMany?: Prisma.ContestParticipationScalarWhereInput | Prisma.ContestParticipationScalarWhereInput[]
}

export type ContestParticipationCreateWithoutUserInput = {
  id?: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
  contest: Prisma.ContestCreateNestedOneWithoutParticipationsInput
}

export type ContestParticipationUncheckedCreateWithoutUserInput = {
  id?: string
  contestId: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
}

export type ContestParticipationCreateOrConnectWithoutUserInput = {
  where: Prisma.ContestParticipationWhereUniqueInput
  create: Prisma.XOR<Prisma.ContestParticipationCreateWithoutUserInput, Prisma.ContestParticipationUncheckedCreateWithoutUserInput>
}

export type ContestParticipationCreateManyUserInputEnvelope = {
  data: Prisma.ContestParticipationCreateManyUserInput | Prisma.ContestParticipationCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ContestParticipationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ContestParticipationWhereUniqueInput
  update: Prisma.XOR<Prisma.ContestParticipationUpdateWithoutUserInput, Prisma.ContestParticipationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ContestParticipationCreateWithoutUserInput, Prisma.ContestParticipationUncheckedCreateWithoutUserInput>
}

export type ContestParticipationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ContestParticipationWhereUniqueInput
  data: Prisma.XOR<Prisma.ContestParticipationUpdateWithoutUserInput, Prisma.ContestParticipationUncheckedUpdateWithoutUserInput>
}

export type ContestParticipationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ContestParticipationScalarWhereInput
  data: Prisma.XOR<Prisma.ContestParticipationUpdateManyMutationInput, Prisma.ContestParticipationUncheckedUpdateManyWithoutUserInput>
}

export type ContestParticipationScalarWhereInput = {
  AND?: Prisma.ContestParticipationScalarWhereInput | Prisma.ContestParticipationScalarWhereInput[]
  OR?: Prisma.ContestParticipationScalarWhereInput[]
  NOT?: Prisma.ContestParticipationScalarWhereInput | Prisma.ContestParticipationScalarWhereInput[]
  id?: Prisma.StringFilter<"ContestParticipation"> | string
  userId?: Prisma.StringFilter<"ContestParticipation"> | string
  contestId?: Prisma.StringFilter<"ContestParticipation"> | string
  startedAt?: Prisma.DateTimeFilter<"ContestParticipation"> | Date | string
  submittedAt?: Prisma.DateTimeNullableFilter<"ContestParticipation"> | Date | string | null
  score?: Prisma.FloatFilter<"ContestParticipation"> | number
  submissionId?: Prisma.StringNullableFilter<"ContestParticipation"> | string | null
}

export type ContestParticipationCreateWithoutContestInput = {
  id?: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
  user: Prisma.UserCreateNestedOneWithoutContestParticipationInput
}

export type ContestParticipationUncheckedCreateWithoutContestInput = {
  id?: string
  userId: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
}

export type ContestParticipationCreateOrConnectWithoutContestInput = {
  where: Prisma.ContestParticipationWhereUniqueInput
  create: Prisma.XOR<Prisma.ContestParticipationCreateWithoutContestInput, Prisma.ContestParticipationUncheckedCreateWithoutContestInput>
}

export type ContestParticipationCreateManyContestInputEnvelope = {
  data: Prisma.ContestParticipationCreateManyContestInput | Prisma.ContestParticipationCreateManyContestInput[]
  skipDuplicates?: boolean
}

export type ContestParticipationUpsertWithWhereUniqueWithoutContestInput = {
  where: Prisma.ContestParticipationWhereUniqueInput
  update: Prisma.XOR<Prisma.ContestParticipationUpdateWithoutContestInput, Prisma.ContestParticipationUncheckedUpdateWithoutContestInput>
  create: Prisma.XOR<Prisma.ContestParticipationCreateWithoutContestInput, Prisma.ContestParticipationUncheckedCreateWithoutContestInput>
}

export type ContestParticipationUpdateWithWhereUniqueWithoutContestInput = {
  where: Prisma.ContestParticipationWhereUniqueInput
  data: Prisma.XOR<Prisma.ContestParticipationUpdateWithoutContestInput, Prisma.ContestParticipationUncheckedUpdateWithoutContestInput>
}

export type ContestParticipationUpdateManyWithWhereWithoutContestInput = {
  where: Prisma.ContestParticipationScalarWhereInput
  data: Prisma.XOR<Prisma.ContestParticipationUpdateManyMutationInput, Prisma.ContestParticipationUncheckedUpdateManyWithoutContestInput>
}

export type ContestParticipationCreateManyUserInput = {
  id?: string
  contestId: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
}

export type ContestParticipationUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contest?: Prisma.ContestUpdateOneRequiredWithoutParticipationsNestedInput
}

export type ContestParticipationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ContestParticipationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contestId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ContestParticipationCreateManyContestInput = {
  id?: string
  userId: string
  startedAt: Date | string
  submittedAt?: Date | string | null
  score?: number
  submissionId?: string | null
}

export type ContestParticipationUpdateWithoutContestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutContestParticipationNestedInput
}

export type ContestParticipationUncheckedUpdateWithoutContestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ContestParticipationUncheckedUpdateManyWithoutContestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  submissionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type ContestParticipationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  contestId?: boolean
  startedAt?: boolean
  submittedAt?: boolean
  score?: boolean
  submissionId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contestParticipation"]>

export type ContestParticipationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  contestId?: boolean
  startedAt?: boolean
  submittedAt?: boolean
  score?: boolean
  submissionId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contestParticipation"]>

export type ContestParticipationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  contestId?: boolean
  startedAt?: boolean
  submittedAt?: boolean
  score?: boolean
  submissionId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contestParticipation"]>

export type ContestParticipationSelectScalar = {
  id?: boolean
  userId?: boolean
  contestId?: boolean
  startedAt?: boolean
  submittedAt?: boolean
  score?: boolean
  submissionId?: boolean
}

export type ContestParticipationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "contestId" | "startedAt" | "submittedAt" | "score" | "submissionId", ExtArgs["result"]["contestParticipation"]>
export type ContestParticipationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
}
export type ContestParticipationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
}
export type ContestParticipationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contest?: boolean | Prisma.ContestDefaultArgs<ExtArgs>
}

export type $ContestParticipationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ContestParticipation"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    contest: Prisma.$ContestPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    contestId: string
    startedAt: Date
    submittedAt: Date | null
    score: number
    submissionId: string | null
  }, ExtArgs["result"]["contestParticipation"]>
  composites: {}
}

export type ContestParticipationGetPayload<S extends boolean | null | undefined | ContestParticipationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload, S>

export type ContestParticipationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContestParticipationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContestParticipationCountAggregateInputType | true
  }

export interface ContestParticipationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContestParticipation'], meta: { name: 'ContestParticipation' } }
  /**
   * Find zero or one ContestParticipation that matches the filter.
   * @param {ContestParticipationFindUniqueArgs} args - Arguments to find a ContestParticipation
   * @example
   * // Get one ContestParticipation
   * const contestParticipation = await prisma.contestParticipation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContestParticipationFindUniqueArgs>(args: Prisma.SelectSubset<T, ContestParticipationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ContestParticipation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContestParticipationFindUniqueOrThrowArgs} args - Arguments to find a ContestParticipation
   * @example
   * // Get one ContestParticipation
   * const contestParticipation = await prisma.contestParticipation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContestParticipationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContestParticipationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContestParticipation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationFindFirstArgs} args - Arguments to find a ContestParticipation
   * @example
   * // Get one ContestParticipation
   * const contestParticipation = await prisma.contestParticipation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContestParticipationFindFirstArgs>(args?: Prisma.SelectSubset<T, ContestParticipationFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContestParticipation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationFindFirstOrThrowArgs} args - Arguments to find a ContestParticipation
   * @example
   * // Get one ContestParticipation
   * const contestParticipation = await prisma.contestParticipation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContestParticipationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContestParticipationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ContestParticipations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ContestParticipations
   * const contestParticipations = await prisma.contestParticipation.findMany()
   * 
   * // Get first 10 ContestParticipations
   * const contestParticipations = await prisma.contestParticipation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contestParticipationWithIdOnly = await prisma.contestParticipation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContestParticipationFindManyArgs>(args?: Prisma.SelectSubset<T, ContestParticipationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ContestParticipation.
   * @param {ContestParticipationCreateArgs} args - Arguments to create a ContestParticipation.
   * @example
   * // Create one ContestParticipation
   * const ContestParticipation = await prisma.contestParticipation.create({
   *   data: {
   *     // ... data to create a ContestParticipation
   *   }
   * })
   * 
   */
  create<T extends ContestParticipationCreateArgs>(args: Prisma.SelectSubset<T, ContestParticipationCreateArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ContestParticipations.
   * @param {ContestParticipationCreateManyArgs} args - Arguments to create many ContestParticipations.
   * @example
   * // Create many ContestParticipations
   * const contestParticipation = await prisma.contestParticipation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContestParticipationCreateManyArgs>(args?: Prisma.SelectSubset<T, ContestParticipationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ContestParticipations and returns the data saved in the database.
   * @param {ContestParticipationCreateManyAndReturnArgs} args - Arguments to create many ContestParticipations.
   * @example
   * // Create many ContestParticipations
   * const contestParticipation = await prisma.contestParticipation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ContestParticipations and only return the `id`
   * const contestParticipationWithIdOnly = await prisma.contestParticipation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContestParticipationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContestParticipationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ContestParticipation.
   * @param {ContestParticipationDeleteArgs} args - Arguments to delete one ContestParticipation.
   * @example
   * // Delete one ContestParticipation
   * const ContestParticipation = await prisma.contestParticipation.delete({
   *   where: {
   *     // ... filter to delete one ContestParticipation
   *   }
   * })
   * 
   */
  delete<T extends ContestParticipationDeleteArgs>(args: Prisma.SelectSubset<T, ContestParticipationDeleteArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ContestParticipation.
   * @param {ContestParticipationUpdateArgs} args - Arguments to update one ContestParticipation.
   * @example
   * // Update one ContestParticipation
   * const contestParticipation = await prisma.contestParticipation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContestParticipationUpdateArgs>(args: Prisma.SelectSubset<T, ContestParticipationUpdateArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ContestParticipations.
   * @param {ContestParticipationDeleteManyArgs} args - Arguments to filter ContestParticipations to delete.
   * @example
   * // Delete a few ContestParticipations
   * const { count } = await prisma.contestParticipation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContestParticipationDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContestParticipationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContestParticipations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ContestParticipations
   * const contestParticipation = await prisma.contestParticipation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContestParticipationUpdateManyArgs>(args: Prisma.SelectSubset<T, ContestParticipationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContestParticipations and returns the data updated in the database.
   * @param {ContestParticipationUpdateManyAndReturnArgs} args - Arguments to update many ContestParticipations.
   * @example
   * // Update many ContestParticipations
   * const contestParticipation = await prisma.contestParticipation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ContestParticipations and only return the `id`
   * const contestParticipationWithIdOnly = await prisma.contestParticipation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContestParticipationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContestParticipationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ContestParticipation.
   * @param {ContestParticipationUpsertArgs} args - Arguments to update or create a ContestParticipation.
   * @example
   * // Update or create a ContestParticipation
   * const contestParticipation = await prisma.contestParticipation.upsert({
   *   create: {
   *     // ... data to create a ContestParticipation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ContestParticipation we want to update
   *   }
   * })
   */
  upsert<T extends ContestParticipationUpsertArgs>(args: Prisma.SelectSubset<T, ContestParticipationUpsertArgs<ExtArgs>>): Prisma.Prisma__ContestParticipationClient<runtime.Types.Result.GetResult<Prisma.$ContestParticipationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ContestParticipations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationCountArgs} args - Arguments to filter ContestParticipations to count.
   * @example
   * // Count the number of ContestParticipations
   * const count = await prisma.contestParticipation.count({
   *   where: {
   *     // ... the filter for the ContestParticipations we want to count
   *   }
   * })
  **/
  count<T extends ContestParticipationCountArgs>(
    args?: Prisma.Subset<T, ContestParticipationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContestParticipationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ContestParticipation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContestParticipationAggregateArgs>(args: Prisma.Subset<T, ContestParticipationAggregateArgs>): Prisma.PrismaPromise<GetContestParticipationAggregateType<T>>

  /**
   * Group by ContestParticipation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContestParticipationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContestParticipationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContestParticipationGroupByArgs['orderBy'] }
      : { orderBy?: ContestParticipationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContestParticipationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContestParticipationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ContestParticipation model
 */
readonly fields: ContestParticipationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ContestParticipation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContestParticipationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  contest<T extends Prisma.ContestDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ContestDefaultArgs<ExtArgs>>): Prisma.Prisma__ContestClient<runtime.Types.Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ContestParticipation model
 */
export interface ContestParticipationFieldRefs {
  readonly id: Prisma.FieldRef<"ContestParticipation", 'String'>
  readonly userId: Prisma.FieldRef<"ContestParticipation", 'String'>
  readonly contestId: Prisma.FieldRef<"ContestParticipation", 'String'>
  readonly startedAt: Prisma.FieldRef<"ContestParticipation", 'DateTime'>
  readonly submittedAt: Prisma.FieldRef<"ContestParticipation", 'DateTime'>
  readonly score: Prisma.FieldRef<"ContestParticipation", 'Float'>
  readonly submissionId: Prisma.FieldRef<"ContestParticipation", 'String'>
}
    

// Custom InputTypes
/**
 * ContestParticipation findUnique
 */
export type ContestParticipationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * Filter, which ContestParticipation to fetch.
   */
  where: Prisma.ContestParticipationWhereUniqueInput
}

/**
 * ContestParticipation findUniqueOrThrow
 */
export type ContestParticipationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * Filter, which ContestParticipation to fetch.
   */
  where: Prisma.ContestParticipationWhereUniqueInput
}

/**
 * ContestParticipation findFirst
 */
export type ContestParticipationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * Filter, which ContestParticipation to fetch.
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestParticipations to fetch.
   */
  orderBy?: Prisma.ContestParticipationOrderByWithRelationInput | Prisma.ContestParticipationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContestParticipations.
   */
  cursor?: Prisma.ContestParticipationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestParticipations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestParticipations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContestParticipations.
   */
  distinct?: Prisma.ContestParticipationScalarFieldEnum | Prisma.ContestParticipationScalarFieldEnum[]
}

/**
 * ContestParticipation findFirstOrThrow
 */
export type ContestParticipationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * Filter, which ContestParticipation to fetch.
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestParticipations to fetch.
   */
  orderBy?: Prisma.ContestParticipationOrderByWithRelationInput | Prisma.ContestParticipationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContestParticipations.
   */
  cursor?: Prisma.ContestParticipationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestParticipations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestParticipations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContestParticipations.
   */
  distinct?: Prisma.ContestParticipationScalarFieldEnum | Prisma.ContestParticipationScalarFieldEnum[]
}

/**
 * ContestParticipation findMany
 */
export type ContestParticipationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * Filter, which ContestParticipations to fetch.
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContestParticipations to fetch.
   */
  orderBy?: Prisma.ContestParticipationOrderByWithRelationInput | Prisma.ContestParticipationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ContestParticipations.
   */
  cursor?: Prisma.ContestParticipationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContestParticipations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContestParticipations.
   */
  skip?: number
  distinct?: Prisma.ContestParticipationScalarFieldEnum | Prisma.ContestParticipationScalarFieldEnum[]
}

/**
 * ContestParticipation create
 */
export type ContestParticipationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * The data needed to create a ContestParticipation.
   */
  data: Prisma.XOR<Prisma.ContestParticipationCreateInput, Prisma.ContestParticipationUncheckedCreateInput>
}

/**
 * ContestParticipation createMany
 */
export type ContestParticipationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ContestParticipations.
   */
  data: Prisma.ContestParticipationCreateManyInput | Prisma.ContestParticipationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ContestParticipation createManyAndReturn
 */
export type ContestParticipationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * The data used to create many ContestParticipations.
   */
  data: Prisma.ContestParticipationCreateManyInput | Prisma.ContestParticipationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ContestParticipation update
 */
export type ContestParticipationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * The data needed to update a ContestParticipation.
   */
  data: Prisma.XOR<Prisma.ContestParticipationUpdateInput, Prisma.ContestParticipationUncheckedUpdateInput>
  /**
   * Choose, which ContestParticipation to update.
   */
  where: Prisma.ContestParticipationWhereUniqueInput
}

/**
 * ContestParticipation updateMany
 */
export type ContestParticipationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ContestParticipations.
   */
  data: Prisma.XOR<Prisma.ContestParticipationUpdateManyMutationInput, Prisma.ContestParticipationUncheckedUpdateManyInput>
  /**
   * Filter which ContestParticipations to update
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * Limit how many ContestParticipations to update.
   */
  limit?: number
}

/**
 * ContestParticipation updateManyAndReturn
 */
export type ContestParticipationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * The data used to update ContestParticipations.
   */
  data: Prisma.XOR<Prisma.ContestParticipationUpdateManyMutationInput, Prisma.ContestParticipationUncheckedUpdateManyInput>
  /**
   * Filter which ContestParticipations to update
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * Limit how many ContestParticipations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ContestParticipation upsert
 */
export type ContestParticipationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * The filter to search for the ContestParticipation to update in case it exists.
   */
  where: Prisma.ContestParticipationWhereUniqueInput
  /**
   * In case the ContestParticipation found by the `where` argument doesn't exist, create a new ContestParticipation with this data.
   */
  create: Prisma.XOR<Prisma.ContestParticipationCreateInput, Prisma.ContestParticipationUncheckedCreateInput>
  /**
   * In case the ContestParticipation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContestParticipationUpdateInput, Prisma.ContestParticipationUncheckedUpdateInput>
}

/**
 * ContestParticipation delete
 */
export type ContestParticipationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
  /**
   * Filter which ContestParticipation to delete.
   */
  where: Prisma.ContestParticipationWhereUniqueInput
}

/**
 * ContestParticipation deleteMany
 */
export type ContestParticipationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContestParticipations to delete
   */
  where?: Prisma.ContestParticipationWhereInput
  /**
   * Limit how many ContestParticipations to delete.
   */
  limit?: number
}

/**
 * ContestParticipation without action
 */
export type ContestParticipationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestParticipation
   */
  select?: Prisma.ContestParticipationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestParticipation
   */
  omit?: Prisma.ContestParticipationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestParticipationInclude<ExtArgs> | null
}
