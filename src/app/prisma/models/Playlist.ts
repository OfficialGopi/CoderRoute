
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Playlist` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Playlist
 * 
 */
export type PlaylistModel = runtime.Types.Result.DefaultSelection<Prisma.$PlaylistPayload>

export type AggregatePlaylist = {
  _count: PlaylistCountAggregateOutputType | null
  _min: PlaylistMinAggregateOutputType | null
  _max: PlaylistMaxAggregateOutputType | null
}

export type PlaylistMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlaylistMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlaylistCountAggregateOutputType = {
  id: number
  name: number
  description: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PlaylistMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type PlaylistMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type PlaylistCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PlaylistAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Playlist to aggregate.
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playlists to fetch.
   */
  orderBy?: Prisma.PlaylistOrderByWithRelationInput | Prisma.PlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Playlists
  **/
  _count?: true | PlaylistCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlaylistMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlaylistMaxAggregateInputType
}

export type GetPlaylistAggregateType<T extends PlaylistAggregateArgs> = {
      [P in keyof T & keyof AggregatePlaylist]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlaylist[P]>
    : Prisma.GetScalarType<T[P], AggregatePlaylist[P]>
}




export type PlaylistGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaylistWhereInput
  orderBy?: Prisma.PlaylistOrderByWithAggregationInput | Prisma.PlaylistOrderByWithAggregationInput[]
  by: Prisma.PlaylistScalarFieldEnum[] | Prisma.PlaylistScalarFieldEnum
  having?: Prisma.PlaylistScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlaylistCountAggregateInputType | true
  _min?: PlaylistMinAggregateInputType
  _max?: PlaylistMaxAggregateInputType
}

export type PlaylistGroupByOutputType = {
  id: string
  name: string
  description: string | null
  userId: string
  createdAt: Date
  updatedAt: Date
  _count: PlaylistCountAggregateOutputType | null
  _min: PlaylistMinAggregateOutputType | null
  _max: PlaylistMaxAggregateOutputType | null
}

type GetPlaylistGroupByPayload<T extends PlaylistGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlaylistGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlaylistGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlaylistGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlaylistGroupByOutputType[P]>
      }
    >
  > 



export type PlaylistWhereInput = {
  AND?: Prisma.PlaylistWhereInput | Prisma.PlaylistWhereInput[]
  OR?: Prisma.PlaylistWhereInput[]
  NOT?: Prisma.PlaylistWhereInput | Prisma.PlaylistWhereInput[]
  id?: Prisma.StringFilter<"Playlist"> | string
  name?: Prisma.StringFilter<"Playlist"> | string
  description?: Prisma.StringNullableFilter<"Playlist"> | string | null
  userId?: Prisma.StringFilter<"Playlist"> | string
  createdAt?: Prisma.DateTimeFilter<"Playlist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Playlist"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problems?: Prisma.ProblemInPlaylistListRelationFilter
}

export type PlaylistOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  problems?: Prisma.ProblemInPlaylistOrderByRelationAggregateInput
}

export type PlaylistWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name_userId?: Prisma.PlaylistNameUserIdCompoundUniqueInput
  AND?: Prisma.PlaylistWhereInput | Prisma.PlaylistWhereInput[]
  OR?: Prisma.PlaylistWhereInput[]
  NOT?: Prisma.PlaylistWhereInput | Prisma.PlaylistWhereInput[]
  name?: Prisma.StringFilter<"Playlist"> | string
  description?: Prisma.StringNullableFilter<"Playlist"> | string | null
  userId?: Prisma.StringFilter<"Playlist"> | string
  createdAt?: Prisma.DateTimeFilter<"Playlist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Playlist"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problems?: Prisma.ProblemInPlaylistListRelationFilter
}, "id" | "name_userId">

export type PlaylistOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PlaylistCountOrderByAggregateInput
  _max?: Prisma.PlaylistMaxOrderByAggregateInput
  _min?: Prisma.PlaylistMinOrderByAggregateInput
}

export type PlaylistScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlaylistScalarWhereWithAggregatesInput | Prisma.PlaylistScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlaylistScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlaylistScalarWhereWithAggregatesInput | Prisma.PlaylistScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Playlist"> | string
  name?: Prisma.StringWithAggregatesFilter<"Playlist"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Playlist"> | string | null
  userId?: Prisma.StringWithAggregatesFilter<"Playlist"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Playlist"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Playlist"> | Date | string
}

export type PlaylistCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPlaylistsInput
  problems?: Prisma.ProblemInPlaylistCreateNestedManyWithoutPlaylistInput
}

export type PlaylistUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  problems?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
}

export type PlaylistUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPlaylistsNestedInput
  problems?: Prisma.ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput
}

export type PlaylistUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problems?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
}

export type PlaylistCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlaylistUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaylistUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaylistListRelationFilter = {
  every?: Prisma.PlaylistWhereInput
  some?: Prisma.PlaylistWhereInput
  none?: Prisma.PlaylistWhereInput
}

export type PlaylistOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PlaylistNameUserIdCompoundUniqueInput = {
  name: string
  userId: string
}

export type PlaylistCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaylistMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaylistMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaylistScalarRelationFilter = {
  is?: Prisma.PlaylistWhereInput
  isNot?: Prisma.PlaylistWhereInput
}

export type PlaylistCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PlaylistCreateWithoutUserInput, Prisma.PlaylistUncheckedCreateWithoutUserInput> | Prisma.PlaylistCreateWithoutUserInput[] | Prisma.PlaylistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaylistCreateOrConnectWithoutUserInput | Prisma.PlaylistCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PlaylistCreateManyUserInputEnvelope
  connect?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
}

export type PlaylistUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PlaylistCreateWithoutUserInput, Prisma.PlaylistUncheckedCreateWithoutUserInput> | Prisma.PlaylistCreateWithoutUserInput[] | Prisma.PlaylistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaylistCreateOrConnectWithoutUserInput | Prisma.PlaylistCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PlaylistCreateManyUserInputEnvelope
  connect?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
}

export type PlaylistUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PlaylistCreateWithoutUserInput, Prisma.PlaylistUncheckedCreateWithoutUserInput> | Prisma.PlaylistCreateWithoutUserInput[] | Prisma.PlaylistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaylistCreateOrConnectWithoutUserInput | Prisma.PlaylistCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PlaylistUpsertWithWhereUniqueWithoutUserInput | Prisma.PlaylistUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PlaylistCreateManyUserInputEnvelope
  set?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  disconnect?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  delete?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  connect?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  update?: Prisma.PlaylistUpdateWithWhereUniqueWithoutUserInput | Prisma.PlaylistUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PlaylistUpdateManyWithWhereWithoutUserInput | Prisma.PlaylistUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PlaylistScalarWhereInput | Prisma.PlaylistScalarWhereInput[]
}

export type PlaylistUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PlaylistCreateWithoutUserInput, Prisma.PlaylistUncheckedCreateWithoutUserInput> | Prisma.PlaylistCreateWithoutUserInput[] | Prisma.PlaylistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PlaylistCreateOrConnectWithoutUserInput | Prisma.PlaylistCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PlaylistUpsertWithWhereUniqueWithoutUserInput | Prisma.PlaylistUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PlaylistCreateManyUserInputEnvelope
  set?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  disconnect?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  delete?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  connect?: Prisma.PlaylistWhereUniqueInput | Prisma.PlaylistWhereUniqueInput[]
  update?: Prisma.PlaylistUpdateWithWhereUniqueWithoutUserInput | Prisma.PlaylistUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PlaylistUpdateManyWithWhereWithoutUserInput | Prisma.PlaylistUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PlaylistScalarWhereInput | Prisma.PlaylistScalarWhereInput[]
}

export type PlaylistCreateNestedOneWithoutProblemsInput = {
  create?: Prisma.XOR<Prisma.PlaylistCreateWithoutProblemsInput, Prisma.PlaylistUncheckedCreateWithoutProblemsInput>
  connectOrCreate?: Prisma.PlaylistCreateOrConnectWithoutProblemsInput
  connect?: Prisma.PlaylistWhereUniqueInput
}

export type PlaylistUpdateOneRequiredWithoutProblemsNestedInput = {
  create?: Prisma.XOR<Prisma.PlaylistCreateWithoutProblemsInput, Prisma.PlaylistUncheckedCreateWithoutProblemsInput>
  connectOrCreate?: Prisma.PlaylistCreateOrConnectWithoutProblemsInput
  upsert?: Prisma.PlaylistUpsertWithoutProblemsInput
  connect?: Prisma.PlaylistWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlaylistUpdateToOneWithWhereWithoutProblemsInput, Prisma.PlaylistUpdateWithoutProblemsInput>, Prisma.PlaylistUncheckedUpdateWithoutProblemsInput>
}

export type PlaylistCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  problems?: Prisma.ProblemInPlaylistCreateNestedManyWithoutPlaylistInput
}

export type PlaylistUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  problems?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
}

export type PlaylistCreateOrConnectWithoutUserInput = {
  where: Prisma.PlaylistWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaylistCreateWithoutUserInput, Prisma.PlaylistUncheckedCreateWithoutUserInput>
}

export type PlaylistCreateManyUserInputEnvelope = {
  data: Prisma.PlaylistCreateManyUserInput | Prisma.PlaylistCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PlaylistUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PlaylistWhereUniqueInput
  update: Prisma.XOR<Prisma.PlaylistUpdateWithoutUserInput, Prisma.PlaylistUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PlaylistCreateWithoutUserInput, Prisma.PlaylistUncheckedCreateWithoutUserInput>
}

export type PlaylistUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PlaylistWhereUniqueInput
  data: Prisma.XOR<Prisma.PlaylistUpdateWithoutUserInput, Prisma.PlaylistUncheckedUpdateWithoutUserInput>
}

export type PlaylistUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PlaylistScalarWhereInput
  data: Prisma.XOR<Prisma.PlaylistUpdateManyMutationInput, Prisma.PlaylistUncheckedUpdateManyWithoutUserInput>
}

export type PlaylistScalarWhereInput = {
  AND?: Prisma.PlaylistScalarWhereInput | Prisma.PlaylistScalarWhereInput[]
  OR?: Prisma.PlaylistScalarWhereInput[]
  NOT?: Prisma.PlaylistScalarWhereInput | Prisma.PlaylistScalarWhereInput[]
  id?: Prisma.StringFilter<"Playlist"> | string
  name?: Prisma.StringFilter<"Playlist"> | string
  description?: Prisma.StringNullableFilter<"Playlist"> | string | null
  userId?: Prisma.StringFilter<"Playlist"> | string
  createdAt?: Prisma.DateTimeFilter<"Playlist"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Playlist"> | Date | string
}

export type PlaylistCreateWithoutProblemsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPlaylistsInput
}

export type PlaylistUncheckedCreateWithoutProblemsInput = {
  id?: string
  name: string
  description?: string | null
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlaylistCreateOrConnectWithoutProblemsInput = {
  where: Prisma.PlaylistWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaylistCreateWithoutProblemsInput, Prisma.PlaylistUncheckedCreateWithoutProblemsInput>
}

export type PlaylistUpsertWithoutProblemsInput = {
  update: Prisma.XOR<Prisma.PlaylistUpdateWithoutProblemsInput, Prisma.PlaylistUncheckedUpdateWithoutProblemsInput>
  create: Prisma.XOR<Prisma.PlaylistCreateWithoutProblemsInput, Prisma.PlaylistUncheckedCreateWithoutProblemsInput>
  where?: Prisma.PlaylistWhereInput
}

export type PlaylistUpdateToOneWithWhereWithoutProblemsInput = {
  where?: Prisma.PlaylistWhereInput
  data: Prisma.XOR<Prisma.PlaylistUpdateWithoutProblemsInput, Prisma.PlaylistUncheckedUpdateWithoutProblemsInput>
}

export type PlaylistUpdateWithoutProblemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPlaylistsNestedInput
}

export type PlaylistUncheckedUpdateWithoutProblemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaylistCreateManyUserInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlaylistUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problems?: Prisma.ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput
}

export type PlaylistUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problems?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
}

export type PlaylistUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PlaylistCountOutputType
 */

export type PlaylistCountOutputType = {
  problems: number
}

export type PlaylistCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  problems?: boolean | PlaylistCountOutputTypeCountProblemsArgs
}

/**
 * PlaylistCountOutputType without action
 */
export type PlaylistCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaylistCountOutputType
   */
  select?: Prisma.PlaylistCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlaylistCountOutputType without action
 */
export type PlaylistCountOutputTypeCountProblemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemInPlaylistWhereInput
}


export type PlaylistSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problems?: boolean | Prisma.Playlist$problemsArgs<ExtArgs>
  _count?: boolean | Prisma.PlaylistCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playlist"]>

export type PlaylistSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playlist"]>

export type PlaylistSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playlist"]>

export type PlaylistSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PlaylistOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["playlist"]>
export type PlaylistInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problems?: boolean | Prisma.Playlist$problemsArgs<ExtArgs>
  _count?: boolean | Prisma.PlaylistCountOutputTypeDefaultArgs<ExtArgs>
}
export type PlaylistIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PlaylistIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PlaylistPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Playlist"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    problems: Prisma.$ProblemInPlaylistPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["playlist"]>
  composites: {}
}

export type PlaylistGetPayload<S extends boolean | null | undefined | PlaylistDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlaylistPayload, S>

export type PlaylistCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlaylistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlaylistCountAggregateInputType | true
  }

export interface PlaylistDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Playlist'], meta: { name: 'Playlist' } }
  /**
   * Find zero or one Playlist that matches the filter.
   * @param {PlaylistFindUniqueArgs} args - Arguments to find a Playlist
   * @example
   * // Get one Playlist
   * const playlist = await prisma.playlist.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlaylistFindUniqueArgs>(args: Prisma.SelectSubset<T, PlaylistFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Playlist that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlaylistFindUniqueOrThrowArgs} args - Arguments to find a Playlist
   * @example
   * // Get one Playlist
   * const playlist = await prisma.playlist.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlaylistFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlaylistFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Playlist that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistFindFirstArgs} args - Arguments to find a Playlist
   * @example
   * // Get one Playlist
   * const playlist = await prisma.playlist.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlaylistFindFirstArgs>(args?: Prisma.SelectSubset<T, PlaylistFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Playlist that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistFindFirstOrThrowArgs} args - Arguments to find a Playlist
   * @example
   * // Get one Playlist
   * const playlist = await prisma.playlist.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlaylistFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlaylistFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Playlists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Playlists
   * const playlists = await prisma.playlist.findMany()
   * 
   * // Get first 10 Playlists
   * const playlists = await prisma.playlist.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const playlistWithIdOnly = await prisma.playlist.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlaylistFindManyArgs>(args?: Prisma.SelectSubset<T, PlaylistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Playlist.
   * @param {PlaylistCreateArgs} args - Arguments to create a Playlist.
   * @example
   * // Create one Playlist
   * const Playlist = await prisma.playlist.create({
   *   data: {
   *     // ... data to create a Playlist
   *   }
   * })
   * 
   */
  create<T extends PlaylistCreateArgs>(args: Prisma.SelectSubset<T, PlaylistCreateArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Playlists.
   * @param {PlaylistCreateManyArgs} args - Arguments to create many Playlists.
   * @example
   * // Create many Playlists
   * const playlist = await prisma.playlist.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlaylistCreateManyArgs>(args?: Prisma.SelectSubset<T, PlaylistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Playlists and returns the data saved in the database.
   * @param {PlaylistCreateManyAndReturnArgs} args - Arguments to create many Playlists.
   * @example
   * // Create many Playlists
   * const playlist = await prisma.playlist.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Playlists and only return the `id`
   * const playlistWithIdOnly = await prisma.playlist.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlaylistCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlaylistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Playlist.
   * @param {PlaylistDeleteArgs} args - Arguments to delete one Playlist.
   * @example
   * // Delete one Playlist
   * const Playlist = await prisma.playlist.delete({
   *   where: {
   *     // ... filter to delete one Playlist
   *   }
   * })
   * 
   */
  delete<T extends PlaylistDeleteArgs>(args: Prisma.SelectSubset<T, PlaylistDeleteArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Playlist.
   * @param {PlaylistUpdateArgs} args - Arguments to update one Playlist.
   * @example
   * // Update one Playlist
   * const playlist = await prisma.playlist.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlaylistUpdateArgs>(args: Prisma.SelectSubset<T, PlaylistUpdateArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Playlists.
   * @param {PlaylistDeleteManyArgs} args - Arguments to filter Playlists to delete.
   * @example
   * // Delete a few Playlists
   * const { count } = await prisma.playlist.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlaylistDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlaylistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Playlists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Playlists
   * const playlist = await prisma.playlist.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlaylistUpdateManyArgs>(args: Prisma.SelectSubset<T, PlaylistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Playlists and returns the data updated in the database.
   * @param {PlaylistUpdateManyAndReturnArgs} args - Arguments to update many Playlists.
   * @example
   * // Update many Playlists
   * const playlist = await prisma.playlist.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Playlists and only return the `id`
   * const playlistWithIdOnly = await prisma.playlist.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlaylistUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlaylistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Playlist.
   * @param {PlaylistUpsertArgs} args - Arguments to update or create a Playlist.
   * @example
   * // Update or create a Playlist
   * const playlist = await prisma.playlist.upsert({
   *   create: {
   *     // ... data to create a Playlist
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Playlist we want to update
   *   }
   * })
   */
  upsert<T extends PlaylistUpsertArgs>(args: Prisma.SelectSubset<T, PlaylistUpsertArgs<ExtArgs>>): Prisma.Prisma__PlaylistClient<runtime.Types.Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Playlists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistCountArgs} args - Arguments to filter Playlists to count.
   * @example
   * // Count the number of Playlists
   * const count = await prisma.playlist.count({
   *   where: {
   *     // ... the filter for the Playlists we want to count
   *   }
   * })
  **/
  count<T extends PlaylistCountArgs>(
    args?: Prisma.Subset<T, PlaylistCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlaylistCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Playlist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlaylistAggregateArgs>(args: Prisma.Subset<T, PlaylistAggregateArgs>): Prisma.PrismaPromise<GetPlaylistAggregateType<T>>

  /**
   * Group by Playlist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaylistGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlaylistGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlaylistGroupByArgs['orderBy'] }
      : { orderBy?: PlaylistGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Playlist model
 */
readonly fields: PlaylistFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Playlist.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlaylistClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  problems<T extends Prisma.Playlist$problemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Playlist$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Playlist model
 */
export interface PlaylistFieldRefs {
  readonly id: Prisma.FieldRef<"Playlist", 'String'>
  readonly name: Prisma.FieldRef<"Playlist", 'String'>
  readonly description: Prisma.FieldRef<"Playlist", 'String'>
  readonly userId: Prisma.FieldRef<"Playlist", 'String'>
  readonly createdAt: Prisma.FieldRef<"Playlist", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Playlist", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Playlist findUnique
 */
export type PlaylistFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * Filter, which Playlist to fetch.
   */
  where: Prisma.PlaylistWhereUniqueInput
}

/**
 * Playlist findUniqueOrThrow
 */
export type PlaylistFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * Filter, which Playlist to fetch.
   */
  where: Prisma.PlaylistWhereUniqueInput
}

/**
 * Playlist findFirst
 */
export type PlaylistFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * Filter, which Playlist to fetch.
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playlists to fetch.
   */
  orderBy?: Prisma.PlaylistOrderByWithRelationInput | Prisma.PlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Playlists.
   */
  cursor?: Prisma.PlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Playlists.
   */
  distinct?: Prisma.PlaylistScalarFieldEnum | Prisma.PlaylistScalarFieldEnum[]
}

/**
 * Playlist findFirstOrThrow
 */
export type PlaylistFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * Filter, which Playlist to fetch.
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playlists to fetch.
   */
  orderBy?: Prisma.PlaylistOrderByWithRelationInput | Prisma.PlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Playlists.
   */
  cursor?: Prisma.PlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Playlists.
   */
  distinct?: Prisma.PlaylistScalarFieldEnum | Prisma.PlaylistScalarFieldEnum[]
}

/**
 * Playlist findMany
 */
export type PlaylistFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * Filter, which Playlists to fetch.
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Playlists to fetch.
   */
  orderBy?: Prisma.PlaylistOrderByWithRelationInput | Prisma.PlaylistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Playlists.
   */
  cursor?: Prisma.PlaylistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Playlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Playlists.
   */
  skip?: number
  distinct?: Prisma.PlaylistScalarFieldEnum | Prisma.PlaylistScalarFieldEnum[]
}

/**
 * Playlist create
 */
export type PlaylistCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * The data needed to create a Playlist.
   */
  data: Prisma.XOR<Prisma.PlaylistCreateInput, Prisma.PlaylistUncheckedCreateInput>
}

/**
 * Playlist createMany
 */
export type PlaylistCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Playlists.
   */
  data: Prisma.PlaylistCreateManyInput | Prisma.PlaylistCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Playlist createManyAndReturn
 */
export type PlaylistCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * The data used to create many Playlists.
   */
  data: Prisma.PlaylistCreateManyInput | Prisma.PlaylistCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Playlist update
 */
export type PlaylistUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * The data needed to update a Playlist.
   */
  data: Prisma.XOR<Prisma.PlaylistUpdateInput, Prisma.PlaylistUncheckedUpdateInput>
  /**
   * Choose, which Playlist to update.
   */
  where: Prisma.PlaylistWhereUniqueInput
}

/**
 * Playlist updateMany
 */
export type PlaylistUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Playlists.
   */
  data: Prisma.XOR<Prisma.PlaylistUpdateManyMutationInput, Prisma.PlaylistUncheckedUpdateManyInput>
  /**
   * Filter which Playlists to update
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * Limit how many Playlists to update.
   */
  limit?: number
}

/**
 * Playlist updateManyAndReturn
 */
export type PlaylistUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * The data used to update Playlists.
   */
  data: Prisma.XOR<Prisma.PlaylistUpdateManyMutationInput, Prisma.PlaylistUncheckedUpdateManyInput>
  /**
   * Filter which Playlists to update
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * Limit how many Playlists to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Playlist upsert
 */
export type PlaylistUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * The filter to search for the Playlist to update in case it exists.
   */
  where: Prisma.PlaylistWhereUniqueInput
  /**
   * In case the Playlist found by the `where` argument doesn't exist, create a new Playlist with this data.
   */
  create: Prisma.XOR<Prisma.PlaylistCreateInput, Prisma.PlaylistUncheckedCreateInput>
  /**
   * In case the Playlist was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlaylistUpdateInput, Prisma.PlaylistUncheckedUpdateInput>
}

/**
 * Playlist delete
 */
export type PlaylistDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
  /**
   * Filter which Playlist to delete.
   */
  where: Prisma.PlaylistWhereUniqueInput
}

/**
 * Playlist deleteMany
 */
export type PlaylistDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Playlists to delete
   */
  where?: Prisma.PlaylistWhereInput
  /**
   * Limit how many Playlists to delete.
   */
  limit?: number
}

/**
 * Playlist.problems
 */
export type Playlist$problemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  where?: Prisma.ProblemInPlaylistWhereInput
  orderBy?: Prisma.ProblemInPlaylistOrderByWithRelationInput | Prisma.ProblemInPlaylistOrderByWithRelationInput[]
  cursor?: Prisma.ProblemInPlaylistWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProblemInPlaylistScalarFieldEnum | Prisma.ProblemInPlaylistScalarFieldEnum[]
}

/**
 * Playlist without action
 */
export type PlaylistDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Playlist
   */
  select?: Prisma.PlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Playlist
   */
  omit?: Prisma.PlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaylistInclude<ExtArgs> | null
}
