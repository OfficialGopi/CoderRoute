
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Problem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Problem
 * 
 */
export type ProblemModel = runtime.Types.Result.DefaultSelection<Prisma.$ProblemPayload>

export type AggregateProblem = {
  _count: ProblemCountAggregateOutputType | null
  _min: ProblemMinAggregateOutputType | null
  _max: ProblemMaxAggregateOutputType | null
}

export type ProblemMinAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  description: string | null
  difficulty: $Enums.DIFFICULTY | null
  editorial: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  description: string | null
  difficulty: $Enums.DIFFICULTY | null
  editorial: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProblemCountAggregateOutputType = {
  id: number
  userId: number
  title: number
  description: number
  difficulty: number
  tags: number
  constraints: number
  hints: number
  editorial: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProblemMinAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  description?: true
  difficulty?: true
  editorial?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemMaxAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  description?: true
  difficulty?: true
  editorial?: true
  createdAt?: true
  updatedAt?: true
}

export type ProblemCountAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  description?: true
  difficulty?: true
  tags?: true
  constraints?: true
  hints?: true
  editorial?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProblemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Problem to aggregate.
   */
  where?: Prisma.ProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Problems to fetch.
   */
  orderBy?: Prisma.ProblemOrderByWithRelationInput | Prisma.ProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Problems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Problems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Problems
  **/
  _count?: true | ProblemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProblemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProblemMaxAggregateInputType
}

export type GetProblemAggregateType<T extends ProblemAggregateArgs> = {
      [P in keyof T & keyof AggregateProblem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProblem[P]>
    : Prisma.GetScalarType<T[P], AggregateProblem[P]>
}




export type ProblemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemWhereInput
  orderBy?: Prisma.ProblemOrderByWithAggregationInput | Prisma.ProblemOrderByWithAggregationInput[]
  by: Prisma.ProblemScalarFieldEnum[] | Prisma.ProblemScalarFieldEnum
  having?: Prisma.ProblemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProblemCountAggregateInputType | true
  _min?: ProblemMinAggregateInputType
  _max?: ProblemMaxAggregateInputType
}

export type ProblemGroupByOutputType = {
  id: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags: string[]
  constraints: string[]
  hints: string[]
  editorial: string | null
  createdAt: Date
  updatedAt: Date
  _count: ProblemCountAggregateOutputType | null
  _min: ProblemMinAggregateOutputType | null
  _max: ProblemMaxAggregateOutputType | null
}

type GetProblemGroupByPayload<T extends ProblemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProblemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProblemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProblemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProblemGroupByOutputType[P]>
      }
    >
  > 



export type ProblemWhereInput = {
  AND?: Prisma.ProblemWhereInput | Prisma.ProblemWhereInput[]
  OR?: Prisma.ProblemWhereInput[]
  NOT?: Prisma.ProblemWhereInput | Prisma.ProblemWhereInput[]
  id?: Prisma.StringFilter<"Problem"> | string
  userId?: Prisma.StringFilter<"Problem"> | string
  title?: Prisma.StringFilter<"Problem"> | string
  description?: Prisma.StringFilter<"Problem"> | string
  difficulty?: Prisma.EnumDIFFICULTYFilter<"Problem"> | $Enums.DIFFICULTY
  tags?: Prisma.StringNullableListFilter<"Problem">
  constraints?: Prisma.StringNullableListFilter<"Problem">
  hints?: Prisma.StringNullableListFilter<"Problem">
  editorial?: Prisma.StringNullableFilter<"Problem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Problem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Problem"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  testcases?: Prisma.TestCasesListRelationFilter
  codeSnippets?: Prisma.ProblemCodeSnippetsListRelationFilter
  referenceSolutions?: Prisma.ProblemReferenceSolutionsListRelationFilter
  backgroundCodes?: Prisma.ProblemBackgroundCodeListRelationFilter
  submissions?: Prisma.SubmissionListRelationFilter
  solvedBy?: Prisma.ProblemSolvedListRelationFilter
  playlist?: Prisma.ProblemInPlaylistListRelationFilter
  discussions?: Prisma.DiscussionListRelationFilter
  contestProblem?: Prisma.ContestProblemListRelationFilter
}

export type ProblemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  constraints?: Prisma.SortOrder
  hints?: Prisma.SortOrder
  editorial?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  testcases?: Prisma.TestCasesOrderByRelationAggregateInput
  codeSnippets?: Prisma.ProblemCodeSnippetsOrderByRelationAggregateInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsOrderByRelationAggregateInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeOrderByRelationAggregateInput
  submissions?: Prisma.SubmissionOrderByRelationAggregateInput
  solvedBy?: Prisma.ProblemSolvedOrderByRelationAggregateInput
  playlist?: Prisma.ProblemInPlaylistOrderByRelationAggregateInput
  discussions?: Prisma.DiscussionOrderByRelationAggregateInput
  contestProblem?: Prisma.ContestProblemOrderByRelationAggregateInput
}

export type ProblemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProblemWhereInput | Prisma.ProblemWhereInput[]
  OR?: Prisma.ProblemWhereInput[]
  NOT?: Prisma.ProblemWhereInput | Prisma.ProblemWhereInput[]
  userId?: Prisma.StringFilter<"Problem"> | string
  title?: Prisma.StringFilter<"Problem"> | string
  description?: Prisma.StringFilter<"Problem"> | string
  difficulty?: Prisma.EnumDIFFICULTYFilter<"Problem"> | $Enums.DIFFICULTY
  tags?: Prisma.StringNullableListFilter<"Problem">
  constraints?: Prisma.StringNullableListFilter<"Problem">
  hints?: Prisma.StringNullableListFilter<"Problem">
  editorial?: Prisma.StringNullableFilter<"Problem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Problem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Problem"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  testcases?: Prisma.TestCasesListRelationFilter
  codeSnippets?: Prisma.ProblemCodeSnippetsListRelationFilter
  referenceSolutions?: Prisma.ProblemReferenceSolutionsListRelationFilter
  backgroundCodes?: Prisma.ProblemBackgroundCodeListRelationFilter
  submissions?: Prisma.SubmissionListRelationFilter
  solvedBy?: Prisma.ProblemSolvedListRelationFilter
  playlist?: Prisma.ProblemInPlaylistListRelationFilter
  discussions?: Prisma.DiscussionListRelationFilter
  contestProblem?: Prisma.ContestProblemListRelationFilter
}, "id">

export type ProblemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  constraints?: Prisma.SortOrder
  hints?: Prisma.SortOrder
  editorial?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProblemCountOrderByAggregateInput
  _max?: Prisma.ProblemMaxOrderByAggregateInput
  _min?: Prisma.ProblemMinOrderByAggregateInput
}

export type ProblemScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProblemScalarWhereWithAggregatesInput | Prisma.ProblemScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProblemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProblemScalarWhereWithAggregatesInput | Prisma.ProblemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Problem"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Problem"> | string
  title?: Prisma.StringWithAggregatesFilter<"Problem"> | string
  description?: Prisma.StringWithAggregatesFilter<"Problem"> | string
  difficulty?: Prisma.EnumDIFFICULTYWithAggregatesFilter<"Problem"> | $Enums.DIFFICULTY
  tags?: Prisma.StringNullableListFilter<"Problem">
  constraints?: Prisma.StringNullableListFilter<"Problem">
  hints?: Prisma.StringNullableListFilter<"Problem">
  editorial?: Prisma.StringNullableWithAggregatesFilter<"Problem"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Problem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Problem"> | Date | string
}

export type ProblemCreateInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateManyInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProblemListRelationFilter = {
  every?: Prisma.ProblemWhereInput
  some?: Prisma.ProblemWhereInput
  none?: Prisma.ProblemWhereInput
}

export type ProblemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type ProblemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  constraints?: Prisma.SortOrder
  hints?: Prisma.SortOrder
  editorial?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  editorial?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  editorial?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProblemScalarRelationFilter = {
  is?: Prisma.ProblemWhereInput
  isNot?: Prisma.ProblemWhereInput
}

export type ProblemNullableScalarRelationFilter = {
  is?: Prisma.ProblemWhereInput | null
  isNot?: Prisma.ProblemWhereInput | null
}

export type ProblemCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutUserInput, Prisma.ProblemUncheckedCreateWithoutUserInput> | Prisma.ProblemCreateWithoutUserInput[] | Prisma.ProblemUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutUserInput | Prisma.ProblemCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProblemCreateManyUserInputEnvelope
  connect?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
}

export type ProblemUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutUserInput, Prisma.ProblemUncheckedCreateWithoutUserInput> | Prisma.ProblemCreateWithoutUserInput[] | Prisma.ProblemUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutUserInput | Prisma.ProblemCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProblemCreateManyUserInputEnvelope
  connect?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
}

export type ProblemUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutUserInput, Prisma.ProblemUncheckedCreateWithoutUserInput> | Prisma.ProblemCreateWithoutUserInput[] | Prisma.ProblemUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutUserInput | Prisma.ProblemCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProblemUpsertWithWhereUniqueWithoutUserInput | Prisma.ProblemUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProblemCreateManyUserInputEnvelope
  set?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  disconnect?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  delete?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  connect?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  update?: Prisma.ProblemUpdateWithWhereUniqueWithoutUserInput | Prisma.ProblemUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProblemUpdateManyWithWhereWithoutUserInput | Prisma.ProblemUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProblemScalarWhereInput | Prisma.ProblemScalarWhereInput[]
}

export type ProblemUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutUserInput, Prisma.ProblemUncheckedCreateWithoutUserInput> | Prisma.ProblemCreateWithoutUserInput[] | Prisma.ProblemUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutUserInput | Prisma.ProblemCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProblemUpsertWithWhereUniqueWithoutUserInput | Prisma.ProblemUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProblemCreateManyUserInputEnvelope
  set?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  disconnect?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  delete?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  connect?: Prisma.ProblemWhereUniqueInput | Prisma.ProblemWhereUniqueInput[]
  update?: Prisma.ProblemUpdateWithWhereUniqueWithoutUserInput | Prisma.ProblemUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProblemUpdateManyWithWhereWithoutUserInput | Prisma.ProblemUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProblemScalarWhereInput | Prisma.ProblemScalarWhereInput[]
}

export type ProblemCreatetagsInput = {
  set: string[]
}

export type ProblemCreateconstraintsInput = {
  set: string[]
}

export type ProblemCreatehintsInput = {
  set: string[]
}

export type EnumDIFFICULTYFieldUpdateOperationsInput = {
  set?: $Enums.DIFFICULTY
}

export type ProblemUpdatetagsInput = {
  set?: string[]
  push?: string | string[]
}

export type ProblemUpdateconstraintsInput = {
  set?: string[]
  push?: string | string[]
}

export type ProblemUpdatehintsInput = {
  set?: string[]
  push?: string | string[]
}

export type ProblemCreateNestedOneWithoutTestcasesInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutTestcasesInput, Prisma.ProblemUncheckedCreateWithoutTestcasesInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutTestcasesInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutTestcasesNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutTestcasesInput, Prisma.ProblemUncheckedCreateWithoutTestcasesInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutTestcasesInput
  upsert?: Prisma.ProblemUpsertWithoutTestcasesInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutTestcasesInput, Prisma.ProblemUpdateWithoutTestcasesInput>, Prisma.ProblemUncheckedUpdateWithoutTestcasesInput>
}

export type ProblemCreateNestedOneWithoutCodeSnippetsInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutCodeSnippetsInput, Prisma.ProblemUncheckedCreateWithoutCodeSnippetsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutCodeSnippetsInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutCodeSnippetsNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutCodeSnippetsInput, Prisma.ProblemUncheckedCreateWithoutCodeSnippetsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutCodeSnippetsInput
  upsert?: Prisma.ProblemUpsertWithoutCodeSnippetsInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutCodeSnippetsInput, Prisma.ProblemUpdateWithoutCodeSnippetsInput>, Prisma.ProblemUncheckedUpdateWithoutCodeSnippetsInput>
}

export type ProblemCreateNestedOneWithoutReferenceSolutionsInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutReferenceSolutionsInput, Prisma.ProblemUncheckedCreateWithoutReferenceSolutionsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutReferenceSolutionsInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutReferenceSolutionsNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutReferenceSolutionsInput, Prisma.ProblemUncheckedCreateWithoutReferenceSolutionsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutReferenceSolutionsInput
  upsert?: Prisma.ProblemUpsertWithoutReferenceSolutionsInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutReferenceSolutionsInput, Prisma.ProblemUpdateWithoutReferenceSolutionsInput>, Prisma.ProblemUncheckedUpdateWithoutReferenceSolutionsInput>
}

export type ProblemCreateNestedOneWithoutBackgroundCodesInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutBackgroundCodesInput, Prisma.ProblemUncheckedCreateWithoutBackgroundCodesInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutBackgroundCodesInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutBackgroundCodesNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutBackgroundCodesInput, Prisma.ProblemUncheckedCreateWithoutBackgroundCodesInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutBackgroundCodesInput
  upsert?: Prisma.ProblemUpsertWithoutBackgroundCodesInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutBackgroundCodesInput, Prisma.ProblemUpdateWithoutBackgroundCodesInput>, Prisma.ProblemUncheckedUpdateWithoutBackgroundCodesInput>
}

export type ProblemCreateNestedOneWithoutSubmissionsInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutSubmissionsInput, Prisma.ProblemUncheckedCreateWithoutSubmissionsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutSubmissionsInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutSubmissionsNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutSubmissionsInput, Prisma.ProblemUncheckedCreateWithoutSubmissionsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutSubmissionsInput
  upsert?: Prisma.ProblemUpsertWithoutSubmissionsInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutSubmissionsInput, Prisma.ProblemUpdateWithoutSubmissionsInput>, Prisma.ProblemUncheckedUpdateWithoutSubmissionsInput>
}

export type ProblemCreateNestedOneWithoutSolvedByInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutSolvedByInput, Prisma.ProblemUncheckedCreateWithoutSolvedByInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutSolvedByInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutSolvedByNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutSolvedByInput, Prisma.ProblemUncheckedCreateWithoutSolvedByInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutSolvedByInput
  upsert?: Prisma.ProblemUpsertWithoutSolvedByInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutSolvedByInput, Prisma.ProblemUpdateWithoutSolvedByInput>, Prisma.ProblemUncheckedUpdateWithoutSolvedByInput>
}

export type ProblemCreateNestedOneWithoutPlaylistInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutPlaylistInput, Prisma.ProblemUncheckedCreateWithoutPlaylistInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutPlaylistInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutPlaylistNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutPlaylistInput, Prisma.ProblemUncheckedCreateWithoutPlaylistInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutPlaylistInput
  upsert?: Prisma.ProblemUpsertWithoutPlaylistInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutPlaylistInput, Prisma.ProblemUpdateWithoutPlaylistInput>, Prisma.ProblemUncheckedUpdateWithoutPlaylistInput>
}

export type ProblemCreateNestedOneWithoutDiscussionsInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutDiscussionsInput, Prisma.ProblemUncheckedCreateWithoutDiscussionsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutDiscussionsInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneWithoutDiscussionsNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutDiscussionsInput, Prisma.ProblemUncheckedCreateWithoutDiscussionsInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutDiscussionsInput
  upsert?: Prisma.ProblemUpsertWithoutDiscussionsInput
  disconnect?: Prisma.ProblemWhereInput | boolean
  delete?: Prisma.ProblemWhereInput | boolean
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutDiscussionsInput, Prisma.ProblemUpdateWithoutDiscussionsInput>, Prisma.ProblemUncheckedUpdateWithoutDiscussionsInput>
}

export type ProblemCreateNestedOneWithoutContestProblemInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutContestProblemInput, Prisma.ProblemUncheckedCreateWithoutContestProblemInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutContestProblemInput
  connect?: Prisma.ProblemWhereUniqueInput
}

export type ProblemUpdateOneRequiredWithoutContestProblemNestedInput = {
  create?: Prisma.XOR<Prisma.ProblemCreateWithoutContestProblemInput, Prisma.ProblemUncheckedCreateWithoutContestProblemInput>
  connectOrCreate?: Prisma.ProblemCreateOrConnectWithoutContestProblemInput
  upsert?: Prisma.ProblemUpsertWithoutContestProblemInput
  connect?: Prisma.ProblemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProblemUpdateToOneWithWhereWithoutContestProblemInput, Prisma.ProblemUpdateWithoutContestProblemInput>, Prisma.ProblemUncheckedUpdateWithoutContestProblemInput>
}

export type ProblemCreateWithoutUserInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutUserInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutUserInput, Prisma.ProblemUncheckedCreateWithoutUserInput>
}

export type ProblemCreateManyUserInputEnvelope = {
  data: Prisma.ProblemCreateManyUserInput | Prisma.ProblemCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProblemUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProblemWhereUniqueInput
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutUserInput, Prisma.ProblemUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutUserInput, Prisma.ProblemUncheckedCreateWithoutUserInput>
}

export type ProblemUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProblemWhereUniqueInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutUserInput, Prisma.ProblemUncheckedUpdateWithoutUserInput>
}

export type ProblemUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProblemScalarWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateManyMutationInput, Prisma.ProblemUncheckedUpdateManyWithoutUserInput>
}

export type ProblemScalarWhereInput = {
  AND?: Prisma.ProblemScalarWhereInput | Prisma.ProblemScalarWhereInput[]
  OR?: Prisma.ProblemScalarWhereInput[]
  NOT?: Prisma.ProblemScalarWhereInput | Prisma.ProblemScalarWhereInput[]
  id?: Prisma.StringFilter<"Problem"> | string
  userId?: Prisma.StringFilter<"Problem"> | string
  title?: Prisma.StringFilter<"Problem"> | string
  description?: Prisma.StringFilter<"Problem"> | string
  difficulty?: Prisma.EnumDIFFICULTYFilter<"Problem"> | $Enums.DIFFICULTY
  tags?: Prisma.StringNullableListFilter<"Problem">
  constraints?: Prisma.StringNullableListFilter<"Problem">
  hints?: Prisma.StringNullableListFilter<"Problem">
  editorial?: Prisma.StringNullableFilter<"Problem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Problem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Problem"> | Date | string
}

export type ProblemCreateWithoutTestcasesInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutTestcasesInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutTestcasesInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutTestcasesInput, Prisma.ProblemUncheckedCreateWithoutTestcasesInput>
}

export type ProblemUpsertWithoutTestcasesInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutTestcasesInput, Prisma.ProblemUncheckedUpdateWithoutTestcasesInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutTestcasesInput, Prisma.ProblemUncheckedCreateWithoutTestcasesInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutTestcasesInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutTestcasesInput, Prisma.ProblemUncheckedUpdateWithoutTestcasesInput>
}

export type ProblemUpdateWithoutTestcasesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutTestcasesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutCodeSnippetsInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutCodeSnippetsInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutCodeSnippetsInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutCodeSnippetsInput, Prisma.ProblemUncheckedCreateWithoutCodeSnippetsInput>
}

export type ProblemUpsertWithoutCodeSnippetsInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutCodeSnippetsInput, Prisma.ProblemUncheckedUpdateWithoutCodeSnippetsInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutCodeSnippetsInput, Prisma.ProblemUncheckedCreateWithoutCodeSnippetsInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutCodeSnippetsInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutCodeSnippetsInput, Prisma.ProblemUncheckedUpdateWithoutCodeSnippetsInput>
}

export type ProblemUpdateWithoutCodeSnippetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutCodeSnippetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutReferenceSolutionsInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutReferenceSolutionsInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutReferenceSolutionsInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutReferenceSolutionsInput, Prisma.ProblemUncheckedCreateWithoutReferenceSolutionsInput>
}

export type ProblemUpsertWithoutReferenceSolutionsInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutReferenceSolutionsInput, Prisma.ProblemUncheckedUpdateWithoutReferenceSolutionsInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutReferenceSolutionsInput, Prisma.ProblemUncheckedCreateWithoutReferenceSolutionsInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutReferenceSolutionsInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutReferenceSolutionsInput, Prisma.ProblemUncheckedUpdateWithoutReferenceSolutionsInput>
}

export type ProblemUpdateWithoutReferenceSolutionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutReferenceSolutionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutBackgroundCodesInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutBackgroundCodesInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutBackgroundCodesInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutBackgroundCodesInput, Prisma.ProblemUncheckedCreateWithoutBackgroundCodesInput>
}

export type ProblemUpsertWithoutBackgroundCodesInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutBackgroundCodesInput, Prisma.ProblemUncheckedUpdateWithoutBackgroundCodesInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutBackgroundCodesInput, Prisma.ProblemUncheckedCreateWithoutBackgroundCodesInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutBackgroundCodesInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutBackgroundCodesInput, Prisma.ProblemUncheckedUpdateWithoutBackgroundCodesInput>
}

export type ProblemUpdateWithoutBackgroundCodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutBackgroundCodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutSubmissionsInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutSubmissionsInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutSubmissionsInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutSubmissionsInput, Prisma.ProblemUncheckedCreateWithoutSubmissionsInput>
}

export type ProblemUpsertWithoutSubmissionsInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutSubmissionsInput, Prisma.ProblemUncheckedUpdateWithoutSubmissionsInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutSubmissionsInput, Prisma.ProblemUncheckedCreateWithoutSubmissionsInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutSubmissionsInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutSubmissionsInput, Prisma.ProblemUncheckedUpdateWithoutSubmissionsInput>
}

export type ProblemUpdateWithoutSubmissionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutSubmissionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutSolvedByInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutSolvedByInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutSolvedByInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutSolvedByInput, Prisma.ProblemUncheckedCreateWithoutSolvedByInput>
}

export type ProblemUpsertWithoutSolvedByInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutSolvedByInput, Prisma.ProblemUncheckedUpdateWithoutSolvedByInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutSolvedByInput, Prisma.ProblemUncheckedCreateWithoutSolvedByInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutSolvedByInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutSolvedByInput, Prisma.ProblemUncheckedUpdateWithoutSolvedByInput>
}

export type ProblemUpdateWithoutSolvedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutSolvedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutPlaylistInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutPlaylistInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutPlaylistInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutPlaylistInput, Prisma.ProblemUncheckedCreateWithoutPlaylistInput>
}

export type ProblemUpsertWithoutPlaylistInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutPlaylistInput, Prisma.ProblemUncheckedUpdateWithoutPlaylistInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutPlaylistInput, Prisma.ProblemUncheckedCreateWithoutPlaylistInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutPlaylistInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutPlaylistInput, Prisma.ProblemUncheckedUpdateWithoutPlaylistInput>
}

export type ProblemUpdateWithoutPlaylistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutPlaylistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutDiscussionsInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutDiscussionsInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  contestProblem?: Prisma.ContestProblemUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutDiscussionsInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutDiscussionsInput, Prisma.ProblemUncheckedCreateWithoutDiscussionsInput>
}

export type ProblemUpsertWithoutDiscussionsInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutDiscussionsInput, Prisma.ProblemUncheckedUpdateWithoutDiscussionsInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutDiscussionsInput, Prisma.ProblemUncheckedCreateWithoutDiscussionsInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutDiscussionsInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutDiscussionsInput, Prisma.ProblemUncheckedUpdateWithoutDiscussionsInput>
}

export type ProblemUpdateWithoutDiscussionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutDiscussionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateWithoutContestProblemInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProblemsInput
  testcases?: Prisma.TestCasesCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionCreateNestedManyWithoutProblemInput
}

export type ProblemUncheckedCreateWithoutContestProblemInput = {
  id?: string
  userId: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testcases?: Prisma.TestCasesUncheckedCreateNestedManyWithoutProblemInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedCreateNestedManyWithoutProblemInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedCreateNestedManyWithoutProblemInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedCreateNestedManyWithoutProblemInput
  submissions?: Prisma.SubmissionUncheckedCreateNestedManyWithoutProblemInput
  solvedBy?: Prisma.ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
  playlist?: Prisma.ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
  discussions?: Prisma.DiscussionUncheckedCreateNestedManyWithoutProblemInput
}

export type ProblemCreateOrConnectWithoutContestProblemInput = {
  where: Prisma.ProblemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProblemCreateWithoutContestProblemInput, Prisma.ProblemUncheckedCreateWithoutContestProblemInput>
}

export type ProblemUpsertWithoutContestProblemInput = {
  update: Prisma.XOR<Prisma.ProblemUpdateWithoutContestProblemInput, Prisma.ProblemUncheckedUpdateWithoutContestProblemInput>
  create: Prisma.XOR<Prisma.ProblemCreateWithoutContestProblemInput, Prisma.ProblemUncheckedCreateWithoutContestProblemInput>
  where?: Prisma.ProblemWhereInput
}

export type ProblemUpdateToOneWithWhereWithoutContestProblemInput = {
  where?: Prisma.ProblemWhereInput
  data: Prisma.XOR<Prisma.ProblemUpdateWithoutContestProblemInput, Prisma.ProblemUncheckedUpdateWithoutContestProblemInput>
}

export type ProblemUpdateWithoutContestProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProblemsNestedInput
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutContestProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemCreateManyUserInput = {
  id?: string
  title: string
  description: string
  difficulty: $Enums.DIFFICULTY
  tags?: Prisma.ProblemCreatetagsInput | string[]
  constraints?: Prisma.ProblemCreateconstraintsInput | string[]
  hints?: Prisma.ProblemCreatehintsInput | string[]
  editorial?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProblemUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testcases?: Prisma.TestCasesUncheckedUpdateManyWithoutProblemNestedInput
  codeSnippets?: Prisma.ProblemCodeSnippetsUncheckedUpdateManyWithoutProblemNestedInput
  referenceSolutions?: Prisma.ProblemReferenceSolutionsUncheckedUpdateManyWithoutProblemNestedInput
  backgroundCodes?: Prisma.ProblemBackgroundCodeUncheckedUpdateManyWithoutProblemNestedInput
  submissions?: Prisma.SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  solvedBy?: Prisma.ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
  playlist?: Prisma.ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
  discussions?: Prisma.DiscussionUncheckedUpdateManyWithoutProblemNestedInput
  contestProblem?: Prisma.ContestProblemUncheckedUpdateManyWithoutProblemNestedInput
}

export type ProblemUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.EnumDIFFICULTYFieldUpdateOperationsInput | $Enums.DIFFICULTY
  tags?: Prisma.ProblemUpdatetagsInput | string[]
  constraints?: Prisma.ProblemUpdateconstraintsInput | string[]
  hints?: Prisma.ProblemUpdatehintsInput | string[]
  editorial?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProblemCountOutputType
 */

export type ProblemCountOutputType = {
  testcases: number
  codeSnippets: number
  referenceSolutions: number
  backgroundCodes: number
  submissions: number
  solvedBy: number
  playlist: number
  discussions: number
  contestProblem: number
}

export type ProblemCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  testcases?: boolean | ProblemCountOutputTypeCountTestcasesArgs
  codeSnippets?: boolean | ProblemCountOutputTypeCountCodeSnippetsArgs
  referenceSolutions?: boolean | ProblemCountOutputTypeCountReferenceSolutionsArgs
  backgroundCodes?: boolean | ProblemCountOutputTypeCountBackgroundCodesArgs
  submissions?: boolean | ProblemCountOutputTypeCountSubmissionsArgs
  solvedBy?: boolean | ProblemCountOutputTypeCountSolvedByArgs
  playlist?: boolean | ProblemCountOutputTypeCountPlaylistArgs
  discussions?: boolean | ProblemCountOutputTypeCountDiscussionsArgs
  contestProblem?: boolean | ProblemCountOutputTypeCountContestProblemArgs
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCountOutputType
   */
  select?: Prisma.ProblemCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountTestcasesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TestCasesWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountCodeSnippetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemCodeSnippetsWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountReferenceSolutionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemReferenceSolutionsWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountBackgroundCodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemBackgroundCodeWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountSubmissionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubmissionWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountSolvedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemSolvedWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountPlaylistArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProblemInPlaylistWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountDiscussionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DiscussionWhereInput
}

/**
 * ProblemCountOutputType without action
 */
export type ProblemCountOutputTypeCountContestProblemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContestProblemWhereInput
}


export type ProblemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  description?: boolean
  difficulty?: boolean
  tags?: boolean
  constraints?: boolean
  hints?: boolean
  editorial?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  testcases?: boolean | Prisma.Problem$testcasesArgs<ExtArgs>
  codeSnippets?: boolean | Prisma.Problem$codeSnippetsArgs<ExtArgs>
  referenceSolutions?: boolean | Prisma.Problem$referenceSolutionsArgs<ExtArgs>
  backgroundCodes?: boolean | Prisma.Problem$backgroundCodesArgs<ExtArgs>
  submissions?: boolean | Prisma.Problem$submissionsArgs<ExtArgs>
  solvedBy?: boolean | Prisma.Problem$solvedByArgs<ExtArgs>
  playlist?: boolean | Prisma.Problem$playlistArgs<ExtArgs>
  discussions?: boolean | Prisma.Problem$discussionsArgs<ExtArgs>
  contestProblem?: boolean | Prisma.Problem$contestProblemArgs<ExtArgs>
  _count?: boolean | Prisma.ProblemCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problem"]>

export type ProblemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  description?: boolean
  difficulty?: boolean
  tags?: boolean
  constraints?: boolean
  hints?: boolean
  editorial?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problem"]>

export type ProblemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  description?: boolean
  difficulty?: boolean
  tags?: boolean
  constraints?: boolean
  hints?: boolean
  editorial?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["problem"]>

export type ProblemSelectScalar = {
  id?: boolean
  userId?: boolean
  title?: boolean
  description?: boolean
  difficulty?: boolean
  tags?: boolean
  constraints?: boolean
  hints?: boolean
  editorial?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProblemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "title" | "description" | "difficulty" | "tags" | "constraints" | "hints" | "editorial" | "createdAt" | "updatedAt", ExtArgs["result"]["problem"]>
export type ProblemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  testcases?: boolean | Prisma.Problem$testcasesArgs<ExtArgs>
  codeSnippets?: boolean | Prisma.Problem$codeSnippetsArgs<ExtArgs>
  referenceSolutions?: boolean | Prisma.Problem$referenceSolutionsArgs<ExtArgs>
  backgroundCodes?: boolean | Prisma.Problem$backgroundCodesArgs<ExtArgs>
  submissions?: boolean | Prisma.Problem$submissionsArgs<ExtArgs>
  solvedBy?: boolean | Prisma.Problem$solvedByArgs<ExtArgs>
  playlist?: boolean | Prisma.Problem$playlistArgs<ExtArgs>
  discussions?: boolean | Prisma.Problem$discussionsArgs<ExtArgs>
  contestProblem?: boolean | Prisma.Problem$contestProblemArgs<ExtArgs>
  _count?: boolean | Prisma.ProblemCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProblemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProblemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ProblemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Problem"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    testcases: Prisma.$TestCasesPayload<ExtArgs>[]
    codeSnippets: Prisma.$ProblemCodeSnippetsPayload<ExtArgs>[]
    referenceSolutions: Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>[]
    backgroundCodes: Prisma.$ProblemBackgroundCodePayload<ExtArgs>[]
    submissions: Prisma.$SubmissionPayload<ExtArgs>[]
    solvedBy: Prisma.$ProblemSolvedPayload<ExtArgs>[]
    playlist: Prisma.$ProblemInPlaylistPayload<ExtArgs>[]
    discussions: Prisma.$DiscussionPayload<ExtArgs>[]
    contestProblem: Prisma.$ContestProblemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    title: string
    description: string
    difficulty: $Enums.DIFFICULTY
    tags: string[]
    constraints: string[]
    hints: string[]
    editorial: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["problem"]>
  composites: {}
}

export type ProblemGetPayload<S extends boolean | null | undefined | ProblemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProblemPayload, S>

export type ProblemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProblemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProblemCountAggregateInputType | true
  }

export interface ProblemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Problem'], meta: { name: 'Problem' } }
  /**
   * Find zero or one Problem that matches the filter.
   * @param {ProblemFindUniqueArgs} args - Arguments to find a Problem
   * @example
   * // Get one Problem
   * const problem = await prisma.problem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProblemFindUniqueArgs>(args: Prisma.SelectSubset<T, ProblemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Problem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProblemFindUniqueOrThrowArgs} args - Arguments to find a Problem
   * @example
   * // Get one Problem
   * const problem = await prisma.problem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProblemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Problem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemFindFirstArgs} args - Arguments to find a Problem
   * @example
   * // Get one Problem
   * const problem = await prisma.problem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProblemFindFirstArgs>(args?: Prisma.SelectSubset<T, ProblemFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Problem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemFindFirstOrThrowArgs} args - Arguments to find a Problem
   * @example
   * // Get one Problem
   * const problem = await prisma.problem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProblemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Problems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Problems
   * const problems = await prisma.problem.findMany()
   * 
   * // Get first 10 Problems
   * const problems = await prisma.problem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const problemWithIdOnly = await prisma.problem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProblemFindManyArgs>(args?: Prisma.SelectSubset<T, ProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Problem.
   * @param {ProblemCreateArgs} args - Arguments to create a Problem.
   * @example
   * // Create one Problem
   * const Problem = await prisma.problem.create({
   *   data: {
   *     // ... data to create a Problem
   *   }
   * })
   * 
   */
  create<T extends ProblemCreateArgs>(args: Prisma.SelectSubset<T, ProblemCreateArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Problems.
   * @param {ProblemCreateManyArgs} args - Arguments to create many Problems.
   * @example
   * // Create many Problems
   * const problem = await prisma.problem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProblemCreateManyArgs>(args?: Prisma.SelectSubset<T, ProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Problems and returns the data saved in the database.
   * @param {ProblemCreateManyAndReturnArgs} args - Arguments to create many Problems.
   * @example
   * // Create many Problems
   * const problem = await prisma.problem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Problems and only return the `id`
   * const problemWithIdOnly = await prisma.problem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProblemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProblemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Problem.
   * @param {ProblemDeleteArgs} args - Arguments to delete one Problem.
   * @example
   * // Delete one Problem
   * const Problem = await prisma.problem.delete({
   *   where: {
   *     // ... filter to delete one Problem
   *   }
   * })
   * 
   */
  delete<T extends ProblemDeleteArgs>(args: Prisma.SelectSubset<T, ProblemDeleteArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Problem.
   * @param {ProblemUpdateArgs} args - Arguments to update one Problem.
   * @example
   * // Update one Problem
   * const problem = await prisma.problem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProblemUpdateArgs>(args: Prisma.SelectSubset<T, ProblemUpdateArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Problems.
   * @param {ProblemDeleteManyArgs} args - Arguments to filter Problems to delete.
   * @example
   * // Delete a few Problems
   * const { count } = await prisma.problem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProblemDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Problems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Problems
   * const problem = await prisma.problem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProblemUpdateManyArgs>(args: Prisma.SelectSubset<T, ProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Problems and returns the data updated in the database.
   * @param {ProblemUpdateManyAndReturnArgs} args - Arguments to update many Problems.
   * @example
   * // Update many Problems
   * const problem = await prisma.problem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Problems and only return the `id`
   * const problemWithIdOnly = await prisma.problem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProblemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProblemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Problem.
   * @param {ProblemUpsertArgs} args - Arguments to update or create a Problem.
   * @example
   * // Update or create a Problem
   * const problem = await prisma.problem.upsert({
   *   create: {
   *     // ... data to create a Problem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Problem we want to update
   *   }
   * })
   */
  upsert<T extends ProblemUpsertArgs>(args: Prisma.SelectSubset<T, ProblemUpsertArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Problems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemCountArgs} args - Arguments to filter Problems to count.
   * @example
   * // Count the number of Problems
   * const count = await prisma.problem.count({
   *   where: {
   *     // ... the filter for the Problems we want to count
   *   }
   * })
  **/
  count<T extends ProblemCountArgs>(
    args?: Prisma.Subset<T, ProblemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProblemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Problem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProblemAggregateArgs>(args: Prisma.Subset<T, ProblemAggregateArgs>): Prisma.PrismaPromise<GetProblemAggregateType<T>>

  /**
   * Group by Problem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProblemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProblemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProblemGroupByArgs['orderBy'] }
      : { orderBy?: ProblemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Problem model
 */
readonly fields: ProblemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Problem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProblemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  testcases<T extends Prisma.Problem$testcasesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$testcasesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  codeSnippets<T extends Prisma.Problem$codeSnippetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$codeSnippetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemCodeSnippetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  referenceSolutions<T extends Prisma.Problem$referenceSolutionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$referenceSolutionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemReferenceSolutionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  backgroundCodes<T extends Prisma.Problem$backgroundCodesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$backgroundCodesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemBackgroundCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  submissions<T extends Prisma.Problem$submissionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  solvedBy<T extends Prisma.Problem$solvedByArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$solvedByArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  playlist<T extends Prisma.Problem$playlistArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$playlistArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  discussions<T extends Prisma.Problem$discussionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  contestProblem<T extends Prisma.Problem$contestProblemArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Problem$contestProblemArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContestProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Problem model
 */
export interface ProblemFieldRefs {
  readonly id: Prisma.FieldRef<"Problem", 'String'>
  readonly userId: Prisma.FieldRef<"Problem", 'String'>
  readonly title: Prisma.FieldRef<"Problem", 'String'>
  readonly description: Prisma.FieldRef<"Problem", 'String'>
  readonly difficulty: Prisma.FieldRef<"Problem", 'DIFFICULTY'>
  readonly tags: Prisma.FieldRef<"Problem", 'String[]'>
  readonly constraints: Prisma.FieldRef<"Problem", 'String[]'>
  readonly hints: Prisma.FieldRef<"Problem", 'String[]'>
  readonly editorial: Prisma.FieldRef<"Problem", 'String'>
  readonly createdAt: Prisma.FieldRef<"Problem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Problem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Problem findUnique
 */
export type ProblemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * Filter, which Problem to fetch.
   */
  where: Prisma.ProblemWhereUniqueInput
}

/**
 * Problem findUniqueOrThrow
 */
export type ProblemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * Filter, which Problem to fetch.
   */
  where: Prisma.ProblemWhereUniqueInput
}

/**
 * Problem findFirst
 */
export type ProblemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * Filter, which Problem to fetch.
   */
  where?: Prisma.ProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Problems to fetch.
   */
  orderBy?: Prisma.ProblemOrderByWithRelationInput | Prisma.ProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Problems.
   */
  cursor?: Prisma.ProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Problems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Problems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Problems.
   */
  distinct?: Prisma.ProblemScalarFieldEnum | Prisma.ProblemScalarFieldEnum[]
}

/**
 * Problem findFirstOrThrow
 */
export type ProblemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * Filter, which Problem to fetch.
   */
  where?: Prisma.ProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Problems to fetch.
   */
  orderBy?: Prisma.ProblemOrderByWithRelationInput | Prisma.ProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Problems.
   */
  cursor?: Prisma.ProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Problems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Problems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Problems.
   */
  distinct?: Prisma.ProblemScalarFieldEnum | Prisma.ProblemScalarFieldEnum[]
}

/**
 * Problem findMany
 */
export type ProblemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * Filter, which Problems to fetch.
   */
  where?: Prisma.ProblemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Problems to fetch.
   */
  orderBy?: Prisma.ProblemOrderByWithRelationInput | Prisma.ProblemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Problems.
   */
  cursor?: Prisma.ProblemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Problems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Problems.
   */
  skip?: number
  distinct?: Prisma.ProblemScalarFieldEnum | Prisma.ProblemScalarFieldEnum[]
}

/**
 * Problem create
 */
export type ProblemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * The data needed to create a Problem.
   */
  data: Prisma.XOR<Prisma.ProblemCreateInput, Prisma.ProblemUncheckedCreateInput>
}

/**
 * Problem createMany
 */
export type ProblemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Problems.
   */
  data: Prisma.ProblemCreateManyInput | Prisma.ProblemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Problem createManyAndReturn
 */
export type ProblemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * The data used to create many Problems.
   */
  data: Prisma.ProblemCreateManyInput | Prisma.ProblemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Problem update
 */
export type ProblemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * The data needed to update a Problem.
   */
  data: Prisma.XOR<Prisma.ProblemUpdateInput, Prisma.ProblemUncheckedUpdateInput>
  /**
   * Choose, which Problem to update.
   */
  where: Prisma.ProblemWhereUniqueInput
}

/**
 * Problem updateMany
 */
export type ProblemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Problems.
   */
  data: Prisma.XOR<Prisma.ProblemUpdateManyMutationInput, Prisma.ProblemUncheckedUpdateManyInput>
  /**
   * Filter which Problems to update
   */
  where?: Prisma.ProblemWhereInput
  /**
   * Limit how many Problems to update.
   */
  limit?: number
}

/**
 * Problem updateManyAndReturn
 */
export type ProblemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * The data used to update Problems.
   */
  data: Prisma.XOR<Prisma.ProblemUpdateManyMutationInput, Prisma.ProblemUncheckedUpdateManyInput>
  /**
   * Filter which Problems to update
   */
  where?: Prisma.ProblemWhereInput
  /**
   * Limit how many Problems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Problem upsert
 */
export type ProblemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * The filter to search for the Problem to update in case it exists.
   */
  where: Prisma.ProblemWhereUniqueInput
  /**
   * In case the Problem found by the `where` argument doesn't exist, create a new Problem with this data.
   */
  create: Prisma.XOR<Prisma.ProblemCreateInput, Prisma.ProblemUncheckedCreateInput>
  /**
   * In case the Problem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProblemUpdateInput, Prisma.ProblemUncheckedUpdateInput>
}

/**
 * Problem delete
 */
export type ProblemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
  /**
   * Filter which Problem to delete.
   */
  where: Prisma.ProblemWhereUniqueInput
}

/**
 * Problem deleteMany
 */
export type ProblemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Problems to delete
   */
  where?: Prisma.ProblemWhereInput
  /**
   * Limit how many Problems to delete.
   */
  limit?: number
}

/**
 * Problem.testcases
 */
export type Problem$testcasesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCases
   */
  select?: Prisma.TestCasesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCases
   */
  omit?: Prisma.TestCasesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCasesInclude<ExtArgs> | null
  where?: Prisma.TestCasesWhereInput
  orderBy?: Prisma.TestCasesOrderByWithRelationInput | Prisma.TestCasesOrderByWithRelationInput[]
  cursor?: Prisma.TestCasesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TestCasesScalarFieldEnum | Prisma.TestCasesScalarFieldEnum[]
}

/**
 * Problem.codeSnippets
 */
export type Problem$codeSnippetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemCodeSnippets
   */
  select?: Prisma.ProblemCodeSnippetsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemCodeSnippets
   */
  omit?: Prisma.ProblemCodeSnippetsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemCodeSnippetsInclude<ExtArgs> | null
  where?: Prisma.ProblemCodeSnippetsWhereInput
  orderBy?: Prisma.ProblemCodeSnippetsOrderByWithRelationInput | Prisma.ProblemCodeSnippetsOrderByWithRelationInput[]
  cursor?: Prisma.ProblemCodeSnippetsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProblemCodeSnippetsScalarFieldEnum | Prisma.ProblemCodeSnippetsScalarFieldEnum[]
}

/**
 * Problem.referenceSolutions
 */
export type Problem$referenceSolutionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemReferenceSolutions
   */
  select?: Prisma.ProblemReferenceSolutionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemReferenceSolutions
   */
  omit?: Prisma.ProblemReferenceSolutionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemReferenceSolutionsInclude<ExtArgs> | null
  where?: Prisma.ProblemReferenceSolutionsWhereInput
  orderBy?: Prisma.ProblemReferenceSolutionsOrderByWithRelationInput | Prisma.ProblemReferenceSolutionsOrderByWithRelationInput[]
  cursor?: Prisma.ProblemReferenceSolutionsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProblemReferenceSolutionsScalarFieldEnum | Prisma.ProblemReferenceSolutionsScalarFieldEnum[]
}

/**
 * Problem.backgroundCodes
 */
export type Problem$backgroundCodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemBackgroundCode
   */
  select?: Prisma.ProblemBackgroundCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemBackgroundCode
   */
  omit?: Prisma.ProblemBackgroundCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemBackgroundCodeInclude<ExtArgs> | null
  where?: Prisma.ProblemBackgroundCodeWhereInput
  orderBy?: Prisma.ProblemBackgroundCodeOrderByWithRelationInput | Prisma.ProblemBackgroundCodeOrderByWithRelationInput[]
  cursor?: Prisma.ProblemBackgroundCodeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProblemBackgroundCodeScalarFieldEnum | Prisma.ProblemBackgroundCodeScalarFieldEnum[]
}

/**
 * Problem.submissions
 */
export type Problem$submissionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  where?: Prisma.SubmissionWhereInput
  orderBy?: Prisma.SubmissionOrderByWithRelationInput | Prisma.SubmissionOrderByWithRelationInput[]
  cursor?: Prisma.SubmissionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SubmissionScalarFieldEnum | Prisma.SubmissionScalarFieldEnum[]
}

/**
 * Problem.solvedBy
 */
export type Problem$solvedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemSolved
   */
  select?: Prisma.ProblemSolvedSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemSolved
   */
  omit?: Prisma.ProblemSolvedOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemSolvedInclude<ExtArgs> | null
  where?: Prisma.ProblemSolvedWhereInput
  orderBy?: Prisma.ProblemSolvedOrderByWithRelationInput | Prisma.ProblemSolvedOrderByWithRelationInput[]
  cursor?: Prisma.ProblemSolvedWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProblemSolvedScalarFieldEnum | Prisma.ProblemSolvedScalarFieldEnum[]
}

/**
 * Problem.playlist
 */
export type Problem$playlistArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProblemInPlaylist
   */
  select?: Prisma.ProblemInPlaylistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProblemInPlaylist
   */
  omit?: Prisma.ProblemInPlaylistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInPlaylistInclude<ExtArgs> | null
  where?: Prisma.ProblemInPlaylistWhereInput
  orderBy?: Prisma.ProblemInPlaylistOrderByWithRelationInput | Prisma.ProblemInPlaylistOrderByWithRelationInput[]
  cursor?: Prisma.ProblemInPlaylistWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProblemInPlaylistScalarFieldEnum | Prisma.ProblemInPlaylistScalarFieldEnum[]
}

/**
 * Problem.discussions
 */
export type Problem$discussionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  where?: Prisma.DiscussionWhereInput
  orderBy?: Prisma.DiscussionOrderByWithRelationInput | Prisma.DiscussionOrderByWithRelationInput[]
  cursor?: Prisma.DiscussionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DiscussionScalarFieldEnum | Prisma.DiscussionScalarFieldEnum[]
}

/**
 * Problem.contestProblem
 */
export type Problem$contestProblemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContestProblem
   */
  select?: Prisma.ContestProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContestProblem
   */
  omit?: Prisma.ContestProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContestProblemInclude<ExtArgs> | null
  where?: Prisma.ContestProblemWhereInput
  orderBy?: Prisma.ContestProblemOrderByWithRelationInput | Prisma.ContestProblemOrderByWithRelationInput[]
  cursor?: Prisma.ContestProblemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ContestProblemScalarFieldEnum | Prisma.ContestProblemScalarFieldEnum[]
}

/**
 * Problem without action
 */
export type ProblemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Problem
   */
  select?: Prisma.ProblemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Problem
   */
  omit?: Prisma.ProblemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProblemInclude<ExtArgs> | null
}
