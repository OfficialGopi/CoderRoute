
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Discussion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Discussion
 * 
 */
export type DiscussionModel = runtime.Types.Result.DefaultSelection<Prisma.$DiscussionPayload>

export type AggregateDiscussion = {
  _count: DiscussionCountAggregateOutputType | null
  _min: DiscussionMinAggregateOutputType | null
  _max: DiscussionMaxAggregateOutputType | null
}

export type DiscussionMinAggregateOutputType = {
  id: string | null
  content: string | null
  userId: string | null
  problemId: string | null
  createdAt: Date | null
}

export type DiscussionMaxAggregateOutputType = {
  id: string | null
  content: string | null
  userId: string | null
  problemId: string | null
  createdAt: Date | null
}

export type DiscussionCountAggregateOutputType = {
  id: number
  content: number
  userId: number
  problemId: number
  createdAt: number
  _all: number
}


export type DiscussionMinAggregateInputType = {
  id?: true
  content?: true
  userId?: true
  problemId?: true
  createdAt?: true
}

export type DiscussionMaxAggregateInputType = {
  id?: true
  content?: true
  userId?: true
  problemId?: true
  createdAt?: true
}

export type DiscussionCountAggregateInputType = {
  id?: true
  content?: true
  userId?: true
  problemId?: true
  createdAt?: true
  _all?: true
}

export type DiscussionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Discussion to aggregate.
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Discussions to fetch.
   */
  orderBy?: Prisma.DiscussionOrderByWithRelationInput | Prisma.DiscussionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DiscussionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Discussions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Discussions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Discussions
  **/
  _count?: true | DiscussionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DiscussionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DiscussionMaxAggregateInputType
}

export type GetDiscussionAggregateType<T extends DiscussionAggregateArgs> = {
      [P in keyof T & keyof AggregateDiscussion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDiscussion[P]>
    : Prisma.GetScalarType<T[P], AggregateDiscussion[P]>
}




export type DiscussionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DiscussionWhereInput
  orderBy?: Prisma.DiscussionOrderByWithAggregationInput | Prisma.DiscussionOrderByWithAggregationInput[]
  by: Prisma.DiscussionScalarFieldEnum[] | Prisma.DiscussionScalarFieldEnum
  having?: Prisma.DiscussionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DiscussionCountAggregateInputType | true
  _min?: DiscussionMinAggregateInputType
  _max?: DiscussionMaxAggregateInputType
}

export type DiscussionGroupByOutputType = {
  id: string
  content: string
  userId: string
  problemId: string
  createdAt: Date
  _count: DiscussionCountAggregateOutputType | null
  _min: DiscussionMinAggregateOutputType | null
  _max: DiscussionMaxAggregateOutputType | null
}

type GetDiscussionGroupByPayload<T extends DiscussionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DiscussionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DiscussionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DiscussionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DiscussionGroupByOutputType[P]>
      }
    >
  > 



export type DiscussionWhereInput = {
  AND?: Prisma.DiscussionWhereInput | Prisma.DiscussionWhereInput[]
  OR?: Prisma.DiscussionWhereInput[]
  NOT?: Prisma.DiscussionWhereInput | Prisma.DiscussionWhereInput[]
  id?: Prisma.StringFilter<"Discussion"> | string
  content?: Prisma.StringFilter<"Discussion"> | string
  userId?: Prisma.StringFilter<"Discussion"> | string
  problemId?: Prisma.StringFilter<"Discussion"> | string
  createdAt?: Prisma.DateTimeFilter<"Discussion"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}

export type DiscussionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  problem?: Prisma.ProblemOrderByWithRelationInput
}

export type DiscussionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DiscussionWhereInput | Prisma.DiscussionWhereInput[]
  OR?: Prisma.DiscussionWhereInput[]
  NOT?: Prisma.DiscussionWhereInput | Prisma.DiscussionWhereInput[]
  content?: Prisma.StringFilter<"Discussion"> | string
  userId?: Prisma.StringFilter<"Discussion"> | string
  problemId?: Prisma.StringFilter<"Discussion"> | string
  createdAt?: Prisma.DateTimeFilter<"Discussion"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
}, "id">

export type DiscussionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.DiscussionCountOrderByAggregateInput
  _max?: Prisma.DiscussionMaxOrderByAggregateInput
  _min?: Prisma.DiscussionMinOrderByAggregateInput
}

export type DiscussionScalarWhereWithAggregatesInput = {
  AND?: Prisma.DiscussionScalarWhereWithAggregatesInput | Prisma.DiscussionScalarWhereWithAggregatesInput[]
  OR?: Prisma.DiscussionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DiscussionScalarWhereWithAggregatesInput | Prisma.DiscussionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Discussion"> | string
  content?: Prisma.StringWithAggregatesFilter<"Discussion"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Discussion"> | string
  problemId?: Prisma.StringWithAggregatesFilter<"Discussion"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Discussion"> | Date | string
}

export type DiscussionCreateInput = {
  id?: string
  content: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutDiscussionInput
  problem: Prisma.ProblemCreateNestedOneWithoutDiscussionInput
}

export type DiscussionUncheckedCreateInput = {
  id?: string
  content: string
  userId: string
  problemId: string
  createdAt?: Date | string
}

export type DiscussionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutDiscussionNestedInput
  problem?: Prisma.ProblemUpdateOneRequiredWithoutDiscussionNestedInput
}

export type DiscussionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DiscussionCreateManyInput = {
  id?: string
  content: string
  userId: string
  problemId: string
  createdAt?: Date | string
}

export type DiscussionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DiscussionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DiscussionListRelationFilter = {
  every?: Prisma.DiscussionWhereInput
  some?: Prisma.DiscussionWhereInput
  none?: Prisma.DiscussionWhereInput
}

export type DiscussionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DiscussionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DiscussionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DiscussionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DiscussionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutUserInput, Prisma.DiscussionUncheckedCreateWithoutUserInput> | Prisma.DiscussionCreateWithoutUserInput[] | Prisma.DiscussionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutUserInput | Prisma.DiscussionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DiscussionCreateManyUserInputEnvelope
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
}

export type DiscussionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutUserInput, Prisma.DiscussionUncheckedCreateWithoutUserInput> | Prisma.DiscussionCreateWithoutUserInput[] | Prisma.DiscussionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutUserInput | Prisma.DiscussionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DiscussionCreateManyUserInputEnvelope
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
}

export type DiscussionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutUserInput, Prisma.DiscussionUncheckedCreateWithoutUserInput> | Prisma.DiscussionCreateWithoutUserInput[] | Prisma.DiscussionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutUserInput | Prisma.DiscussionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DiscussionUpsertWithWhereUniqueWithoutUserInput | Prisma.DiscussionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DiscussionCreateManyUserInputEnvelope
  set?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  disconnect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  delete?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  update?: Prisma.DiscussionUpdateWithWhereUniqueWithoutUserInput | Prisma.DiscussionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DiscussionUpdateManyWithWhereWithoutUserInput | Prisma.DiscussionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DiscussionScalarWhereInput | Prisma.DiscussionScalarWhereInput[]
}

export type DiscussionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutUserInput, Prisma.DiscussionUncheckedCreateWithoutUserInput> | Prisma.DiscussionCreateWithoutUserInput[] | Prisma.DiscussionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutUserInput | Prisma.DiscussionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DiscussionUpsertWithWhereUniqueWithoutUserInput | Prisma.DiscussionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DiscussionCreateManyUserInputEnvelope
  set?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  disconnect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  delete?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  update?: Prisma.DiscussionUpdateWithWhereUniqueWithoutUserInput | Prisma.DiscussionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DiscussionUpdateManyWithWhereWithoutUserInput | Prisma.DiscussionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DiscussionScalarWhereInput | Prisma.DiscussionScalarWhereInput[]
}

export type DiscussionCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutProblemInput, Prisma.DiscussionUncheckedCreateWithoutProblemInput> | Prisma.DiscussionCreateWithoutProblemInput[] | Prisma.DiscussionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutProblemInput | Prisma.DiscussionCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.DiscussionCreateManyProblemInputEnvelope
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
}

export type DiscussionUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutProblemInput, Prisma.DiscussionUncheckedCreateWithoutProblemInput> | Prisma.DiscussionCreateWithoutProblemInput[] | Prisma.DiscussionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutProblemInput | Prisma.DiscussionCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.DiscussionCreateManyProblemInputEnvelope
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
}

export type DiscussionUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutProblemInput, Prisma.DiscussionUncheckedCreateWithoutProblemInput> | Prisma.DiscussionCreateWithoutProblemInput[] | Prisma.DiscussionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutProblemInput | Prisma.DiscussionCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.DiscussionUpsertWithWhereUniqueWithoutProblemInput | Prisma.DiscussionUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.DiscussionCreateManyProblemInputEnvelope
  set?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  disconnect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  delete?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  update?: Prisma.DiscussionUpdateWithWhereUniqueWithoutProblemInput | Prisma.DiscussionUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.DiscussionUpdateManyWithWhereWithoutProblemInput | Prisma.DiscussionUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.DiscussionScalarWhereInput | Prisma.DiscussionScalarWhereInput[]
}

export type DiscussionUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.DiscussionCreateWithoutProblemInput, Prisma.DiscussionUncheckedCreateWithoutProblemInput> | Prisma.DiscussionCreateWithoutProblemInput[] | Prisma.DiscussionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.DiscussionCreateOrConnectWithoutProblemInput | Prisma.DiscussionCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.DiscussionUpsertWithWhereUniqueWithoutProblemInput | Prisma.DiscussionUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.DiscussionCreateManyProblemInputEnvelope
  set?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  disconnect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  delete?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  connect?: Prisma.DiscussionWhereUniqueInput | Prisma.DiscussionWhereUniqueInput[]
  update?: Prisma.DiscussionUpdateWithWhereUniqueWithoutProblemInput | Prisma.DiscussionUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.DiscussionUpdateManyWithWhereWithoutProblemInput | Prisma.DiscussionUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.DiscussionScalarWhereInput | Prisma.DiscussionScalarWhereInput[]
}

export type DiscussionCreateWithoutUserInput = {
  id?: string
  content: string
  createdAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutDiscussionInput
}

export type DiscussionUncheckedCreateWithoutUserInput = {
  id?: string
  content: string
  problemId: string
  createdAt?: Date | string
}

export type DiscussionCreateOrConnectWithoutUserInput = {
  where: Prisma.DiscussionWhereUniqueInput
  create: Prisma.XOR<Prisma.DiscussionCreateWithoutUserInput, Prisma.DiscussionUncheckedCreateWithoutUserInput>
}

export type DiscussionCreateManyUserInputEnvelope = {
  data: Prisma.DiscussionCreateManyUserInput | Prisma.DiscussionCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type DiscussionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DiscussionWhereUniqueInput
  update: Prisma.XOR<Prisma.DiscussionUpdateWithoutUserInput, Prisma.DiscussionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DiscussionCreateWithoutUserInput, Prisma.DiscussionUncheckedCreateWithoutUserInput>
}

export type DiscussionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DiscussionWhereUniqueInput
  data: Prisma.XOR<Prisma.DiscussionUpdateWithoutUserInput, Prisma.DiscussionUncheckedUpdateWithoutUserInput>
}

export type DiscussionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DiscussionScalarWhereInput
  data: Prisma.XOR<Prisma.DiscussionUpdateManyMutationInput, Prisma.DiscussionUncheckedUpdateManyWithoutUserInput>
}

export type DiscussionScalarWhereInput = {
  AND?: Prisma.DiscussionScalarWhereInput | Prisma.DiscussionScalarWhereInput[]
  OR?: Prisma.DiscussionScalarWhereInput[]
  NOT?: Prisma.DiscussionScalarWhereInput | Prisma.DiscussionScalarWhereInput[]
  id?: Prisma.StringFilter<"Discussion"> | string
  content?: Prisma.StringFilter<"Discussion"> | string
  userId?: Prisma.StringFilter<"Discussion"> | string
  problemId?: Prisma.StringFilter<"Discussion"> | string
  createdAt?: Prisma.DateTimeFilter<"Discussion"> | Date | string
}

export type DiscussionCreateWithoutProblemInput = {
  id?: string
  content: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutDiscussionInput
}

export type DiscussionUncheckedCreateWithoutProblemInput = {
  id?: string
  content: string
  userId: string
  createdAt?: Date | string
}

export type DiscussionCreateOrConnectWithoutProblemInput = {
  where: Prisma.DiscussionWhereUniqueInput
  create: Prisma.XOR<Prisma.DiscussionCreateWithoutProblemInput, Prisma.DiscussionUncheckedCreateWithoutProblemInput>
}

export type DiscussionCreateManyProblemInputEnvelope = {
  data: Prisma.DiscussionCreateManyProblemInput | Prisma.DiscussionCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type DiscussionUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.DiscussionWhereUniqueInput
  update: Prisma.XOR<Prisma.DiscussionUpdateWithoutProblemInput, Prisma.DiscussionUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.DiscussionCreateWithoutProblemInput, Prisma.DiscussionUncheckedCreateWithoutProblemInput>
}

export type DiscussionUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.DiscussionWhereUniqueInput
  data: Prisma.XOR<Prisma.DiscussionUpdateWithoutProblemInput, Prisma.DiscussionUncheckedUpdateWithoutProblemInput>
}

export type DiscussionUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.DiscussionScalarWhereInput
  data: Prisma.XOR<Prisma.DiscussionUpdateManyMutationInput, Prisma.DiscussionUncheckedUpdateManyWithoutProblemInput>
}

export type DiscussionCreateManyUserInput = {
  id?: string
  content: string
  problemId: string
  createdAt?: Date | string
}

export type DiscussionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutDiscussionNestedInput
}

export type DiscussionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DiscussionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DiscussionCreateManyProblemInput = {
  id?: string
  content: string
  userId: string
  createdAt?: Date | string
}

export type DiscussionUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutDiscussionNestedInput
}

export type DiscussionUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DiscussionUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DiscussionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["discussion"]>

export type DiscussionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["discussion"]>

export type DiscussionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["discussion"]>

export type DiscussionSelectScalar = {
  id?: boolean
  content?: boolean
  userId?: boolean
  problemId?: boolean
  createdAt?: boolean
}

export type DiscussionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "userId" | "problemId" | "createdAt", ExtArgs["result"]["discussion"]>
export type DiscussionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type DiscussionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type DiscussionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $DiscussionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Discussion"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    problem: Prisma.$ProblemPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    content: string
    userId: string
    problemId: string
    createdAt: Date
  }, ExtArgs["result"]["discussion"]>
  composites: {}
}

export type DiscussionGetPayload<S extends boolean | null | undefined | DiscussionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DiscussionPayload, S>

export type DiscussionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DiscussionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DiscussionCountAggregateInputType | true
  }

export interface DiscussionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discussion'], meta: { name: 'Discussion' } }
  /**
   * Find zero or one Discussion that matches the filter.
   * @param {DiscussionFindUniqueArgs} args - Arguments to find a Discussion
   * @example
   * // Get one Discussion
   * const discussion = await prisma.discussion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DiscussionFindUniqueArgs>(args: Prisma.SelectSubset<T, DiscussionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Discussion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DiscussionFindUniqueOrThrowArgs} args - Arguments to find a Discussion
   * @example
   * // Get one Discussion
   * const discussion = await prisma.discussion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DiscussionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DiscussionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Discussion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionFindFirstArgs} args - Arguments to find a Discussion
   * @example
   * // Get one Discussion
   * const discussion = await prisma.discussion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DiscussionFindFirstArgs>(args?: Prisma.SelectSubset<T, DiscussionFindFirstArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Discussion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionFindFirstOrThrowArgs} args - Arguments to find a Discussion
   * @example
   * // Get one Discussion
   * const discussion = await prisma.discussion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DiscussionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DiscussionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Discussions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Discussions
   * const discussions = await prisma.discussion.findMany()
   * 
   * // Get first 10 Discussions
   * const discussions = await prisma.discussion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const discussionWithIdOnly = await prisma.discussion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DiscussionFindManyArgs>(args?: Prisma.SelectSubset<T, DiscussionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Discussion.
   * @param {DiscussionCreateArgs} args - Arguments to create a Discussion.
   * @example
   * // Create one Discussion
   * const Discussion = await prisma.discussion.create({
   *   data: {
   *     // ... data to create a Discussion
   *   }
   * })
   * 
   */
  create<T extends DiscussionCreateArgs>(args: Prisma.SelectSubset<T, DiscussionCreateArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Discussions.
   * @param {DiscussionCreateManyArgs} args - Arguments to create many Discussions.
   * @example
   * // Create many Discussions
   * const discussion = await prisma.discussion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DiscussionCreateManyArgs>(args?: Prisma.SelectSubset<T, DiscussionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Discussions and returns the data saved in the database.
   * @param {DiscussionCreateManyAndReturnArgs} args - Arguments to create many Discussions.
   * @example
   * // Create many Discussions
   * const discussion = await prisma.discussion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Discussions and only return the `id`
   * const discussionWithIdOnly = await prisma.discussion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DiscussionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DiscussionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Discussion.
   * @param {DiscussionDeleteArgs} args - Arguments to delete one Discussion.
   * @example
   * // Delete one Discussion
   * const Discussion = await prisma.discussion.delete({
   *   where: {
   *     // ... filter to delete one Discussion
   *   }
   * })
   * 
   */
  delete<T extends DiscussionDeleteArgs>(args: Prisma.SelectSubset<T, DiscussionDeleteArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Discussion.
   * @param {DiscussionUpdateArgs} args - Arguments to update one Discussion.
   * @example
   * // Update one Discussion
   * const discussion = await prisma.discussion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DiscussionUpdateArgs>(args: Prisma.SelectSubset<T, DiscussionUpdateArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Discussions.
   * @param {DiscussionDeleteManyArgs} args - Arguments to filter Discussions to delete.
   * @example
   * // Delete a few Discussions
   * const { count } = await prisma.discussion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DiscussionDeleteManyArgs>(args?: Prisma.SelectSubset<T, DiscussionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Discussions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Discussions
   * const discussion = await prisma.discussion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DiscussionUpdateManyArgs>(args: Prisma.SelectSubset<T, DiscussionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Discussions and returns the data updated in the database.
   * @param {DiscussionUpdateManyAndReturnArgs} args - Arguments to update many Discussions.
   * @example
   * // Update many Discussions
   * const discussion = await prisma.discussion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Discussions and only return the `id`
   * const discussionWithIdOnly = await prisma.discussion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DiscussionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DiscussionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Discussion.
   * @param {DiscussionUpsertArgs} args - Arguments to update or create a Discussion.
   * @example
   * // Update or create a Discussion
   * const discussion = await prisma.discussion.upsert({
   *   create: {
   *     // ... data to create a Discussion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Discussion we want to update
   *   }
   * })
   */
  upsert<T extends DiscussionUpsertArgs>(args: Prisma.SelectSubset<T, DiscussionUpsertArgs<ExtArgs>>): Prisma.Prisma__DiscussionClient<runtime.Types.Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Discussions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionCountArgs} args - Arguments to filter Discussions to count.
   * @example
   * // Count the number of Discussions
   * const count = await prisma.discussion.count({
   *   where: {
   *     // ... the filter for the Discussions we want to count
   *   }
   * })
  **/
  count<T extends DiscussionCountArgs>(
    args?: Prisma.Subset<T, DiscussionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DiscussionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Discussion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DiscussionAggregateArgs>(args: Prisma.Subset<T, DiscussionAggregateArgs>): Prisma.PrismaPromise<GetDiscussionAggregateType<T>>

  /**
   * Group by Discussion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiscussionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DiscussionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DiscussionGroupByArgs['orderBy'] }
      : { orderBy?: DiscussionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DiscussionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Discussion model
 */
readonly fields: DiscussionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Discussion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DiscussionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Discussion model
 */
export interface DiscussionFieldRefs {
  readonly id: Prisma.FieldRef<"Discussion", 'String'>
  readonly content: Prisma.FieldRef<"Discussion", 'String'>
  readonly userId: Prisma.FieldRef<"Discussion", 'String'>
  readonly problemId: Prisma.FieldRef<"Discussion", 'String'>
  readonly createdAt: Prisma.FieldRef<"Discussion", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Discussion findUnique
 */
export type DiscussionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * Filter, which Discussion to fetch.
   */
  where: Prisma.DiscussionWhereUniqueInput
}

/**
 * Discussion findUniqueOrThrow
 */
export type DiscussionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * Filter, which Discussion to fetch.
   */
  where: Prisma.DiscussionWhereUniqueInput
}

/**
 * Discussion findFirst
 */
export type DiscussionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * Filter, which Discussion to fetch.
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Discussions to fetch.
   */
  orderBy?: Prisma.DiscussionOrderByWithRelationInput | Prisma.DiscussionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Discussions.
   */
  cursor?: Prisma.DiscussionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Discussions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Discussions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Discussions.
   */
  distinct?: Prisma.DiscussionScalarFieldEnum | Prisma.DiscussionScalarFieldEnum[]
}

/**
 * Discussion findFirstOrThrow
 */
export type DiscussionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * Filter, which Discussion to fetch.
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Discussions to fetch.
   */
  orderBy?: Prisma.DiscussionOrderByWithRelationInput | Prisma.DiscussionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Discussions.
   */
  cursor?: Prisma.DiscussionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Discussions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Discussions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Discussions.
   */
  distinct?: Prisma.DiscussionScalarFieldEnum | Prisma.DiscussionScalarFieldEnum[]
}

/**
 * Discussion findMany
 */
export type DiscussionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * Filter, which Discussions to fetch.
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Discussions to fetch.
   */
  orderBy?: Prisma.DiscussionOrderByWithRelationInput | Prisma.DiscussionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Discussions.
   */
  cursor?: Prisma.DiscussionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Discussions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Discussions.
   */
  skip?: number
  distinct?: Prisma.DiscussionScalarFieldEnum | Prisma.DiscussionScalarFieldEnum[]
}

/**
 * Discussion create
 */
export type DiscussionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * The data needed to create a Discussion.
   */
  data: Prisma.XOR<Prisma.DiscussionCreateInput, Prisma.DiscussionUncheckedCreateInput>
}

/**
 * Discussion createMany
 */
export type DiscussionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Discussions.
   */
  data: Prisma.DiscussionCreateManyInput | Prisma.DiscussionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Discussion createManyAndReturn
 */
export type DiscussionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * The data used to create many Discussions.
   */
  data: Prisma.DiscussionCreateManyInput | Prisma.DiscussionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Discussion update
 */
export type DiscussionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * The data needed to update a Discussion.
   */
  data: Prisma.XOR<Prisma.DiscussionUpdateInput, Prisma.DiscussionUncheckedUpdateInput>
  /**
   * Choose, which Discussion to update.
   */
  where: Prisma.DiscussionWhereUniqueInput
}

/**
 * Discussion updateMany
 */
export type DiscussionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Discussions.
   */
  data: Prisma.XOR<Prisma.DiscussionUpdateManyMutationInput, Prisma.DiscussionUncheckedUpdateManyInput>
  /**
   * Filter which Discussions to update
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * Limit how many Discussions to update.
   */
  limit?: number
}

/**
 * Discussion updateManyAndReturn
 */
export type DiscussionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * The data used to update Discussions.
   */
  data: Prisma.XOR<Prisma.DiscussionUpdateManyMutationInput, Prisma.DiscussionUncheckedUpdateManyInput>
  /**
   * Filter which Discussions to update
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * Limit how many Discussions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Discussion upsert
 */
export type DiscussionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * The filter to search for the Discussion to update in case it exists.
   */
  where: Prisma.DiscussionWhereUniqueInput
  /**
   * In case the Discussion found by the `where` argument doesn't exist, create a new Discussion with this data.
   */
  create: Prisma.XOR<Prisma.DiscussionCreateInput, Prisma.DiscussionUncheckedCreateInput>
  /**
   * In case the Discussion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DiscussionUpdateInput, Prisma.DiscussionUncheckedUpdateInput>
}

/**
 * Discussion delete
 */
export type DiscussionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
  /**
   * Filter which Discussion to delete.
   */
  where: Prisma.DiscussionWhereUniqueInput
}

/**
 * Discussion deleteMany
 */
export type DiscussionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Discussions to delete
   */
  where?: Prisma.DiscussionWhereInput
  /**
   * Limit how many Discussions to delete.
   */
  limit?: number
}

/**
 * Discussion without action
 */
export type DiscussionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Discussion
   */
  select?: Prisma.DiscussionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Discussion
   */
  omit?: Prisma.DiscussionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DiscussionInclude<ExtArgs> | null
}
