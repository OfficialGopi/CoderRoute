
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Submission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Submission
 * 
 */
export type SubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$SubmissionPayload>

export type AggregateSubmission = {
  _count: SubmissionCountAggregateOutputType | null
  _min: SubmissionMinAggregateOutputType | null
  _max: SubmissionMaxAggregateOutputType | null
}

export type SubmissionMinAggregateOutputType = {
  id: string | null
  userId: string | null
  problemId: string | null
  language: string | null
  stdin: string | null
  stdout: string | null
  stderr: string | null
  compileOutput: string | null
  status: string | null
  memory: string | null
  time: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SubmissionMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  problemId: string | null
  language: string | null
  stdin: string | null
  stdout: string | null
  stderr: string | null
  compileOutput: string | null
  status: string | null
  memory: string | null
  time: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SubmissionCountAggregateOutputType = {
  id: number
  userId: number
  problemId: number
  sourceCode: number
  language: number
  stdin: number
  stdout: number
  stderr: number
  compileOutput: number
  status: number
  memory: number
  time: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SubmissionMinAggregateInputType = {
  id?: true
  userId?: true
  problemId?: true
  language?: true
  stdin?: true
  stdout?: true
  stderr?: true
  compileOutput?: true
  status?: true
  memory?: true
  time?: true
  createdAt?: true
  updatedAt?: true
}

export type SubmissionMaxAggregateInputType = {
  id?: true
  userId?: true
  problemId?: true
  language?: true
  stdin?: true
  stdout?: true
  stderr?: true
  compileOutput?: true
  status?: true
  memory?: true
  time?: true
  createdAt?: true
  updatedAt?: true
}

export type SubmissionCountAggregateInputType = {
  id?: true
  userId?: true
  problemId?: true
  sourceCode?: true
  language?: true
  stdin?: true
  stdout?: true
  stderr?: true
  compileOutput?: true
  status?: true
  memory?: true
  time?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Submission to aggregate.
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Submissions to fetch.
   */
  orderBy?: Prisma.SubmissionOrderByWithRelationInput | Prisma.SubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Submissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Submissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Submissions
  **/
  _count?: true | SubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SubmissionMaxAggregateInputType
}

export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateSubmission[P]>
}




export type SubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubmissionWhereInput
  orderBy?: Prisma.SubmissionOrderByWithAggregationInput | Prisma.SubmissionOrderByWithAggregationInput[]
  by: Prisma.SubmissionScalarFieldEnum[] | Prisma.SubmissionScalarFieldEnum
  having?: Prisma.SubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SubmissionCountAggregateInputType | true
  _min?: SubmissionMinAggregateInputType
  _max?: SubmissionMaxAggregateInputType
}

export type SubmissionGroupByOutputType = {
  id: string
  userId: string
  problemId: string
  sourceCode: runtime.JsonValue
  language: string
  stdin: string | null
  stdout: string | null
  stderr: string | null
  compileOutput: string | null
  status: string
  memory: string | null
  time: string | null
  createdAt: Date
  updatedAt: Date
  _count: SubmissionCountAggregateOutputType | null
  _min: SubmissionMinAggregateOutputType | null
  _max: SubmissionMaxAggregateOutputType | null
}

type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubmissionGroupByOutputType[P]>
      }
    >
  > 



export type SubmissionWhereInput = {
  AND?: Prisma.SubmissionWhereInput | Prisma.SubmissionWhereInput[]
  OR?: Prisma.SubmissionWhereInput[]
  NOT?: Prisma.SubmissionWhereInput | Prisma.SubmissionWhereInput[]
  id?: Prisma.StringFilter<"Submission"> | string
  userId?: Prisma.StringFilter<"Submission"> | string
  problemId?: Prisma.StringFilter<"Submission"> | string
  sourceCode?: Prisma.JsonFilter<"Submission">
  language?: Prisma.StringFilter<"Submission"> | string
  stdin?: Prisma.StringNullableFilter<"Submission"> | string | null
  stdout?: Prisma.StringNullableFilter<"Submission"> | string | null
  stderr?: Prisma.StringNullableFilter<"Submission"> | string | null
  compileOutput?: Prisma.StringNullableFilter<"Submission"> | string | null
  status?: Prisma.StringFilter<"Submission"> | string
  memory?: Prisma.StringNullableFilter<"Submission"> | string | null
  time?: Prisma.StringNullableFilter<"Submission"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Submission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Submission"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
  testCases?: Prisma.TestCaseResultListRelationFilter
}

export type SubmissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  sourceCode?: Prisma.SortOrder
  language?: Prisma.SortOrder
  stdin?: Prisma.SortOrderInput | Prisma.SortOrder
  stdout?: Prisma.SortOrderInput | Prisma.SortOrder
  stderr?: Prisma.SortOrderInput | Prisma.SortOrder
  compileOutput?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrderInput | Prisma.SortOrder
  time?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  problem?: Prisma.ProblemOrderByWithRelationInput
  testCases?: Prisma.TestCaseResultOrderByRelationAggregateInput
}

export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SubmissionWhereInput | Prisma.SubmissionWhereInput[]
  OR?: Prisma.SubmissionWhereInput[]
  NOT?: Prisma.SubmissionWhereInput | Prisma.SubmissionWhereInput[]
  userId?: Prisma.StringFilter<"Submission"> | string
  problemId?: Prisma.StringFilter<"Submission"> | string
  sourceCode?: Prisma.JsonFilter<"Submission">
  language?: Prisma.StringFilter<"Submission"> | string
  stdin?: Prisma.StringNullableFilter<"Submission"> | string | null
  stdout?: Prisma.StringNullableFilter<"Submission"> | string | null
  stderr?: Prisma.StringNullableFilter<"Submission"> | string | null
  compileOutput?: Prisma.StringNullableFilter<"Submission"> | string | null
  status?: Prisma.StringFilter<"Submission"> | string
  memory?: Prisma.StringNullableFilter<"Submission"> | string | null
  time?: Prisma.StringNullableFilter<"Submission"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Submission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Submission"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  problem?: Prisma.XOR<Prisma.ProblemScalarRelationFilter, Prisma.ProblemWhereInput>
  testCases?: Prisma.TestCaseResultListRelationFilter
}, "id">

export type SubmissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  sourceCode?: Prisma.SortOrder
  language?: Prisma.SortOrder
  stdin?: Prisma.SortOrderInput | Prisma.SortOrder
  stdout?: Prisma.SortOrderInput | Prisma.SortOrder
  stderr?: Prisma.SortOrderInput | Prisma.SortOrder
  compileOutput?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrderInput | Prisma.SortOrder
  time?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SubmissionCountOrderByAggregateInput
  _max?: Prisma.SubmissionMaxOrderByAggregateInput
  _min?: Prisma.SubmissionMinOrderByAggregateInput
}

export type SubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.SubmissionScalarWhereWithAggregatesInput | Prisma.SubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.SubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SubmissionScalarWhereWithAggregatesInput | Prisma.SubmissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Submission"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Submission"> | string
  problemId?: Prisma.StringWithAggregatesFilter<"Submission"> | string
  sourceCode?: Prisma.JsonWithAggregatesFilter<"Submission">
  language?: Prisma.StringWithAggregatesFilter<"Submission"> | string
  stdin?: Prisma.StringNullableWithAggregatesFilter<"Submission"> | string | null
  stdout?: Prisma.StringNullableWithAggregatesFilter<"Submission"> | string | null
  stderr?: Prisma.StringNullableWithAggregatesFilter<"Submission"> | string | null
  compileOutput?: Prisma.StringNullableWithAggregatesFilter<"Submission"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Submission"> | string
  memory?: Prisma.StringNullableWithAggregatesFilter<"Submission"> | string | null
  time?: Prisma.StringNullableWithAggregatesFilter<"Submission"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Submission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Submission"> | Date | string
}

export type SubmissionCreateInput = {
  id?: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubmissionInput
  problem: Prisma.ProblemCreateNestedOneWithoutSubmissionInput
  testCases?: Prisma.TestCaseResultCreateNestedManyWithoutSubmissionInput
}

export type SubmissionUncheckedCreateInput = {
  id?: string
  userId: string
  problemId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testCases?: Prisma.TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput
}

export type SubmissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubmissionNestedInput
  problem?: Prisma.ProblemUpdateOneRequiredWithoutSubmissionNestedInput
  testCases?: Prisma.TestCaseResultUpdateManyWithoutSubmissionNestedInput
}

export type SubmissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testCases?: Prisma.TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput
}

export type SubmissionCreateManyInput = {
  id?: string
  userId: string
  problemId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SubmissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubmissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubmissionListRelationFilter = {
  every?: Prisma.SubmissionWhereInput
  some?: Prisma.SubmissionWhereInput
  none?: Prisma.SubmissionWhereInput
}

export type SubmissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SubmissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  sourceCode?: Prisma.SortOrder
  language?: Prisma.SortOrder
  stdin?: Prisma.SortOrder
  stdout?: Prisma.SortOrder
  stderr?: Prisma.SortOrder
  compileOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SubmissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  stdin?: Prisma.SortOrder
  stdout?: Prisma.SortOrder
  stderr?: Prisma.SortOrder
  compileOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SubmissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  problemId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  stdin?: Prisma.SortOrder
  stdout?: Prisma.SortOrder
  stderr?: Prisma.SortOrder
  compileOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  memory?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SubmissionScalarRelationFilter = {
  is?: Prisma.SubmissionWhereInput
  isNot?: Prisma.SubmissionWhereInput
}

export type SubmissionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutUserInput, Prisma.SubmissionUncheckedCreateWithoutUserInput> | Prisma.SubmissionCreateWithoutUserInput[] | Prisma.SubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutUserInput | Prisma.SubmissionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SubmissionCreateManyUserInputEnvelope
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
}

export type SubmissionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutUserInput, Prisma.SubmissionUncheckedCreateWithoutUserInput> | Prisma.SubmissionCreateWithoutUserInput[] | Prisma.SubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutUserInput | Prisma.SubmissionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SubmissionCreateManyUserInputEnvelope
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
}

export type SubmissionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutUserInput, Prisma.SubmissionUncheckedCreateWithoutUserInput> | Prisma.SubmissionCreateWithoutUserInput[] | Prisma.SubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutUserInput | Prisma.SubmissionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SubmissionUpsertWithWhereUniqueWithoutUserInput | Prisma.SubmissionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SubmissionCreateManyUserInputEnvelope
  set?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  disconnect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  delete?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  update?: Prisma.SubmissionUpdateWithWhereUniqueWithoutUserInput | Prisma.SubmissionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SubmissionUpdateManyWithWhereWithoutUserInput | Prisma.SubmissionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SubmissionScalarWhereInput | Prisma.SubmissionScalarWhereInput[]
}

export type SubmissionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutUserInput, Prisma.SubmissionUncheckedCreateWithoutUserInput> | Prisma.SubmissionCreateWithoutUserInput[] | Prisma.SubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutUserInput | Prisma.SubmissionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SubmissionUpsertWithWhereUniqueWithoutUserInput | Prisma.SubmissionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SubmissionCreateManyUserInputEnvelope
  set?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  disconnect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  delete?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  update?: Prisma.SubmissionUpdateWithWhereUniqueWithoutUserInput | Prisma.SubmissionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SubmissionUpdateManyWithWhereWithoutUserInput | Prisma.SubmissionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SubmissionScalarWhereInput | Prisma.SubmissionScalarWhereInput[]
}

export type SubmissionCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutProblemInput, Prisma.SubmissionUncheckedCreateWithoutProblemInput> | Prisma.SubmissionCreateWithoutProblemInput[] | Prisma.SubmissionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutProblemInput | Prisma.SubmissionCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.SubmissionCreateManyProblemInputEnvelope
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
}

export type SubmissionUncheckedCreateNestedManyWithoutProblemInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutProblemInput, Prisma.SubmissionUncheckedCreateWithoutProblemInput> | Prisma.SubmissionCreateWithoutProblemInput[] | Prisma.SubmissionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutProblemInput | Prisma.SubmissionCreateOrConnectWithoutProblemInput[]
  createMany?: Prisma.SubmissionCreateManyProblemInputEnvelope
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
}

export type SubmissionUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutProblemInput, Prisma.SubmissionUncheckedCreateWithoutProblemInput> | Prisma.SubmissionCreateWithoutProblemInput[] | Prisma.SubmissionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutProblemInput | Prisma.SubmissionCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.SubmissionUpsertWithWhereUniqueWithoutProblemInput | Prisma.SubmissionUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.SubmissionCreateManyProblemInputEnvelope
  set?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  disconnect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  delete?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  update?: Prisma.SubmissionUpdateWithWhereUniqueWithoutProblemInput | Prisma.SubmissionUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.SubmissionUpdateManyWithWhereWithoutProblemInput | Prisma.SubmissionUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.SubmissionScalarWhereInput | Prisma.SubmissionScalarWhereInput[]
}

export type SubmissionUncheckedUpdateManyWithoutProblemNestedInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutProblemInput, Prisma.SubmissionUncheckedCreateWithoutProblemInput> | Prisma.SubmissionCreateWithoutProblemInput[] | Prisma.SubmissionUncheckedCreateWithoutProblemInput[]
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutProblemInput | Prisma.SubmissionCreateOrConnectWithoutProblemInput[]
  upsert?: Prisma.SubmissionUpsertWithWhereUniqueWithoutProblemInput | Prisma.SubmissionUpsertWithWhereUniqueWithoutProblemInput[]
  createMany?: Prisma.SubmissionCreateManyProblemInputEnvelope
  set?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  disconnect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  delete?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  connect?: Prisma.SubmissionWhereUniqueInput | Prisma.SubmissionWhereUniqueInput[]
  update?: Prisma.SubmissionUpdateWithWhereUniqueWithoutProblemInput | Prisma.SubmissionUpdateWithWhereUniqueWithoutProblemInput[]
  updateMany?: Prisma.SubmissionUpdateManyWithWhereWithoutProblemInput | Prisma.SubmissionUpdateManyWithWhereWithoutProblemInput[]
  deleteMany?: Prisma.SubmissionScalarWhereInput | Prisma.SubmissionScalarWhereInput[]
}

export type SubmissionCreateNestedOneWithoutTestCasesInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutTestCasesInput, Prisma.SubmissionUncheckedCreateWithoutTestCasesInput>
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutTestCasesInput
  connect?: Prisma.SubmissionWhereUniqueInput
}

export type SubmissionUpdateOneRequiredWithoutTestCasesNestedInput = {
  create?: Prisma.XOR<Prisma.SubmissionCreateWithoutTestCasesInput, Prisma.SubmissionUncheckedCreateWithoutTestCasesInput>
  connectOrCreate?: Prisma.SubmissionCreateOrConnectWithoutTestCasesInput
  upsert?: Prisma.SubmissionUpsertWithoutTestCasesInput
  connect?: Prisma.SubmissionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SubmissionUpdateToOneWithWhereWithoutTestCasesInput, Prisma.SubmissionUpdateWithoutTestCasesInput>, Prisma.SubmissionUncheckedUpdateWithoutTestCasesInput>
}

export type SubmissionCreateWithoutUserInput = {
  id?: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  problem: Prisma.ProblemCreateNestedOneWithoutSubmissionInput
  testCases?: Prisma.TestCaseResultCreateNestedManyWithoutSubmissionInput
}

export type SubmissionUncheckedCreateWithoutUserInput = {
  id?: string
  problemId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testCases?: Prisma.TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput
}

export type SubmissionCreateOrConnectWithoutUserInput = {
  where: Prisma.SubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubmissionCreateWithoutUserInput, Prisma.SubmissionUncheckedCreateWithoutUserInput>
}

export type SubmissionCreateManyUserInputEnvelope = {
  data: Prisma.SubmissionCreateManyUserInput | Prisma.SubmissionCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type SubmissionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SubmissionWhereUniqueInput
  update: Prisma.XOR<Prisma.SubmissionUpdateWithoutUserInput, Prisma.SubmissionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SubmissionCreateWithoutUserInput, Prisma.SubmissionUncheckedCreateWithoutUserInput>
}

export type SubmissionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SubmissionWhereUniqueInput
  data: Prisma.XOR<Prisma.SubmissionUpdateWithoutUserInput, Prisma.SubmissionUncheckedUpdateWithoutUserInput>
}

export type SubmissionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SubmissionScalarWhereInput
  data: Prisma.XOR<Prisma.SubmissionUpdateManyMutationInput, Prisma.SubmissionUncheckedUpdateManyWithoutUserInput>
}

export type SubmissionScalarWhereInput = {
  AND?: Prisma.SubmissionScalarWhereInput | Prisma.SubmissionScalarWhereInput[]
  OR?: Prisma.SubmissionScalarWhereInput[]
  NOT?: Prisma.SubmissionScalarWhereInput | Prisma.SubmissionScalarWhereInput[]
  id?: Prisma.StringFilter<"Submission"> | string
  userId?: Prisma.StringFilter<"Submission"> | string
  problemId?: Prisma.StringFilter<"Submission"> | string
  sourceCode?: Prisma.JsonFilter<"Submission">
  language?: Prisma.StringFilter<"Submission"> | string
  stdin?: Prisma.StringNullableFilter<"Submission"> | string | null
  stdout?: Prisma.StringNullableFilter<"Submission"> | string | null
  stderr?: Prisma.StringNullableFilter<"Submission"> | string | null
  compileOutput?: Prisma.StringNullableFilter<"Submission"> | string | null
  status?: Prisma.StringFilter<"Submission"> | string
  memory?: Prisma.StringNullableFilter<"Submission"> | string | null
  time?: Prisma.StringNullableFilter<"Submission"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Submission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Submission"> | Date | string
}

export type SubmissionCreateWithoutProblemInput = {
  id?: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubmissionInput
  testCases?: Prisma.TestCaseResultCreateNestedManyWithoutSubmissionInput
}

export type SubmissionUncheckedCreateWithoutProblemInput = {
  id?: string
  userId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  testCases?: Prisma.TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput
}

export type SubmissionCreateOrConnectWithoutProblemInput = {
  where: Prisma.SubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubmissionCreateWithoutProblemInput, Prisma.SubmissionUncheckedCreateWithoutProblemInput>
}

export type SubmissionCreateManyProblemInputEnvelope = {
  data: Prisma.SubmissionCreateManyProblemInput | Prisma.SubmissionCreateManyProblemInput[]
  skipDuplicates?: boolean
}

export type SubmissionUpsertWithWhereUniqueWithoutProblemInput = {
  where: Prisma.SubmissionWhereUniqueInput
  update: Prisma.XOR<Prisma.SubmissionUpdateWithoutProblemInput, Prisma.SubmissionUncheckedUpdateWithoutProblemInput>
  create: Prisma.XOR<Prisma.SubmissionCreateWithoutProblemInput, Prisma.SubmissionUncheckedCreateWithoutProblemInput>
}

export type SubmissionUpdateWithWhereUniqueWithoutProblemInput = {
  where: Prisma.SubmissionWhereUniqueInput
  data: Prisma.XOR<Prisma.SubmissionUpdateWithoutProblemInput, Prisma.SubmissionUncheckedUpdateWithoutProblemInput>
}

export type SubmissionUpdateManyWithWhereWithoutProblemInput = {
  where: Prisma.SubmissionScalarWhereInput
  data: Prisma.XOR<Prisma.SubmissionUpdateManyMutationInput, Prisma.SubmissionUncheckedUpdateManyWithoutProblemInput>
}

export type SubmissionCreateWithoutTestCasesInput = {
  id?: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubmissionInput
  problem: Prisma.ProblemCreateNestedOneWithoutSubmissionInput
}

export type SubmissionUncheckedCreateWithoutTestCasesInput = {
  id?: string
  userId: string
  problemId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SubmissionCreateOrConnectWithoutTestCasesInput = {
  where: Prisma.SubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubmissionCreateWithoutTestCasesInput, Prisma.SubmissionUncheckedCreateWithoutTestCasesInput>
}

export type SubmissionUpsertWithoutTestCasesInput = {
  update: Prisma.XOR<Prisma.SubmissionUpdateWithoutTestCasesInput, Prisma.SubmissionUncheckedUpdateWithoutTestCasesInput>
  create: Prisma.XOR<Prisma.SubmissionCreateWithoutTestCasesInput, Prisma.SubmissionUncheckedCreateWithoutTestCasesInput>
  where?: Prisma.SubmissionWhereInput
}

export type SubmissionUpdateToOneWithWhereWithoutTestCasesInput = {
  where?: Prisma.SubmissionWhereInput
  data: Prisma.XOR<Prisma.SubmissionUpdateWithoutTestCasesInput, Prisma.SubmissionUncheckedUpdateWithoutTestCasesInput>
}

export type SubmissionUpdateWithoutTestCasesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubmissionNestedInput
  problem?: Prisma.ProblemUpdateOneRequiredWithoutSubmissionNestedInput
}

export type SubmissionUncheckedUpdateWithoutTestCasesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubmissionCreateManyUserInput = {
  id?: string
  problemId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SubmissionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  problem?: Prisma.ProblemUpdateOneRequiredWithoutSubmissionNestedInput
  testCases?: Prisma.TestCaseResultUpdateManyWithoutSubmissionNestedInput
}

export type SubmissionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testCases?: Prisma.TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput
}

export type SubmissionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  problemId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubmissionCreateManyProblemInput = {
  id?: string
  userId: string
  sourceCode: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language: string
  stdin?: string | null
  stdout?: string | null
  stderr?: string | null
  compileOutput?: string | null
  status: string
  memory?: string | null
  time?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SubmissionUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubmissionNestedInput
  testCases?: Prisma.TestCaseResultUpdateManyWithoutSubmissionNestedInput
}

export type SubmissionUncheckedUpdateWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testCases?: Prisma.TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput
}

export type SubmissionUncheckedUpdateManyWithoutProblemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  sourceCode?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  language?: Prisma.StringFieldUpdateOperationsInput | string
  stdin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stdout?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stderr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  compileOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  memory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SubmissionCountOutputType
 */

export type SubmissionCountOutputType = {
  testCases: number
}

export type SubmissionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  testCases?: boolean | SubmissionCountOutputTypeCountTestCasesArgs
}

/**
 * SubmissionCountOutputType without action
 */
export type SubmissionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubmissionCountOutputType
   */
  select?: Prisma.SubmissionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SubmissionCountOutputType without action
 */
export type SubmissionCountOutputTypeCountTestCasesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TestCaseResultWhereInput
}


export type SubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  problemId?: boolean
  sourceCode?: boolean
  language?: boolean
  stdin?: boolean
  stdout?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
  testCases?: boolean | Prisma.Submission$testCasesArgs<ExtArgs>
  _count?: boolean | Prisma.SubmissionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["submission"]>

export type SubmissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  problemId?: boolean
  sourceCode?: boolean
  language?: boolean
  stdin?: boolean
  stdout?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["submission"]>

export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  problemId?: boolean
  sourceCode?: boolean
  language?: boolean
  stdin?: boolean
  stdout?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}, ExtArgs["result"]["submission"]>

export type SubmissionSelectScalar = {
  id?: boolean
  userId?: boolean
  problemId?: boolean
  sourceCode?: boolean
  language?: boolean
  stdin?: boolean
  stdout?: boolean
  stderr?: boolean
  compileOutput?: boolean
  status?: boolean
  memory?: boolean
  time?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "problemId" | "sourceCode" | "language" | "stdin" | "stdout" | "stderr" | "compileOutput" | "status" | "memory" | "time" | "createdAt" | "updatedAt", ExtArgs["result"]["submission"]>
export type SubmissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
  testCases?: boolean | Prisma.Submission$testCasesArgs<ExtArgs>
  _count?: boolean | Prisma.SubmissionCountOutputTypeDefaultArgs<ExtArgs>
}
export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}
export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  problem?: boolean | Prisma.ProblemDefaultArgs<ExtArgs>
}

export type $SubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Submission"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    problem: Prisma.$ProblemPayload<ExtArgs>
    testCases: Prisma.$TestCaseResultPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    problemId: string
    sourceCode: runtime.JsonValue
    language: string
    stdin: string | null
    stdout: string | null
    stderr: string | null
    compileOutput: string | null
    status: string
    memory: string | null
    time: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["submission"]>
  composites: {}
}

export type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SubmissionPayload, S>

export type SubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SubmissionCountAggregateInputType | true
  }

export interface SubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
  /**
   * Find zero or one Submission that matches the filter.
   * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
   * @example
   * // Get one Submission
   * const submission = await prisma.submission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
   * @example
   * // Get one Submission
   * const submission = await prisma.submission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Submission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
   * @example
   * // Get one Submission
   * const submission = await prisma.submission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Submission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
   * @example
   * // Get one Submission
   * const submission = await prisma.submission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Submissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Submissions
   * const submissions = await prisma.submission.findMany()
   * 
   * // Get first 10 Submissions
   * const submissions = await prisma.submission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Submission.
   * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
   * @example
   * // Create one Submission
   * const Submission = await prisma.submission.create({
   *   data: {
   *     // ... data to create a Submission
   *   }
   * })
   * 
   */
  create<T extends SubmissionCreateArgs>(args: Prisma.SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Submissions.
   * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
   * @example
   * // Create many Submissions
   * const submission = await prisma.submission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Submissions and returns the data saved in the database.
   * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
   * @example
   * // Create many Submissions
   * const submission = await prisma.submission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Submissions and only return the `id`
   * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Submission.
   * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
   * @example
   * // Delete one Submission
   * const Submission = await prisma.submission.delete({
   *   where: {
   *     // ... filter to delete one Submission
   *   }
   * })
   * 
   */
  delete<T extends SubmissionDeleteArgs>(args: Prisma.SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Submission.
   * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
   * @example
   * // Update one Submission
   * const submission = await prisma.submission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SubmissionUpdateArgs>(args: Prisma.SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Submissions.
   * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
   * @example
   * // Delete a few Submissions
   * const { count } = await prisma.submission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Submissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Submissions
   * const submission = await prisma.submission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Submissions and returns the data updated in the database.
   * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
   * @example
   * // Update many Submissions
   * const submission = await prisma.submission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Submissions and only return the `id`
   * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Submission.
   * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
   * @example
   * // Update or create a Submission
   * const submission = await prisma.submission.upsert({
   *   create: {
   *     // ... data to create a Submission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Submission we want to update
   *   }
   * })
   */
  upsert<T extends SubmissionUpsertArgs>(args: Prisma.SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__SubmissionClient<runtime.Types.Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Submissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
   * @example
   * // Count the number of Submissions
   * const count = await prisma.submission.count({
   *   where: {
   *     // ... the filter for the Submissions we want to count
   *   }
   * })
  **/
  count<T extends SubmissionCountArgs>(
    args?: Prisma.Subset<T, SubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Submission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SubmissionAggregateArgs>(args: Prisma.Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

  /**
   * Group by Submission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubmissionGroupByArgs['orderBy'] }
      : { orderBy?: SubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Submission model
 */
readonly fields: SubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Submission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  problem<T extends Prisma.ProblemDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProblemDefaultArgs<ExtArgs>>): Prisma.Prisma__ProblemClient<runtime.Types.Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  testCases<T extends Prisma.Submission$testCasesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Submission$testCasesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Submission model
 */
export interface SubmissionFieldRefs {
  readonly id: Prisma.FieldRef<"Submission", 'String'>
  readonly userId: Prisma.FieldRef<"Submission", 'String'>
  readonly problemId: Prisma.FieldRef<"Submission", 'String'>
  readonly sourceCode: Prisma.FieldRef<"Submission", 'Json'>
  readonly language: Prisma.FieldRef<"Submission", 'String'>
  readonly stdin: Prisma.FieldRef<"Submission", 'String'>
  readonly stdout: Prisma.FieldRef<"Submission", 'String'>
  readonly stderr: Prisma.FieldRef<"Submission", 'String'>
  readonly compileOutput: Prisma.FieldRef<"Submission", 'String'>
  readonly status: Prisma.FieldRef<"Submission", 'String'>
  readonly memory: Prisma.FieldRef<"Submission", 'String'>
  readonly time: Prisma.FieldRef<"Submission", 'String'>
  readonly createdAt: Prisma.FieldRef<"Submission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Submission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Submission findUnique
 */
export type SubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * Filter, which Submission to fetch.
   */
  where: Prisma.SubmissionWhereUniqueInput
}

/**
 * Submission findUniqueOrThrow
 */
export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * Filter, which Submission to fetch.
   */
  where: Prisma.SubmissionWhereUniqueInput
}

/**
 * Submission findFirst
 */
export type SubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * Filter, which Submission to fetch.
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Submissions to fetch.
   */
  orderBy?: Prisma.SubmissionOrderByWithRelationInput | Prisma.SubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Submissions.
   */
  cursor?: Prisma.SubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Submissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Submissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Submissions.
   */
  distinct?: Prisma.SubmissionScalarFieldEnum | Prisma.SubmissionScalarFieldEnum[]
}

/**
 * Submission findFirstOrThrow
 */
export type SubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * Filter, which Submission to fetch.
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Submissions to fetch.
   */
  orderBy?: Prisma.SubmissionOrderByWithRelationInput | Prisma.SubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Submissions.
   */
  cursor?: Prisma.SubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Submissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Submissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Submissions.
   */
  distinct?: Prisma.SubmissionScalarFieldEnum | Prisma.SubmissionScalarFieldEnum[]
}

/**
 * Submission findMany
 */
export type SubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * Filter, which Submissions to fetch.
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Submissions to fetch.
   */
  orderBy?: Prisma.SubmissionOrderByWithRelationInput | Prisma.SubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Submissions.
   */
  cursor?: Prisma.SubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Submissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Submissions.
   */
  skip?: number
  distinct?: Prisma.SubmissionScalarFieldEnum | Prisma.SubmissionScalarFieldEnum[]
}

/**
 * Submission create
 */
export type SubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * The data needed to create a Submission.
   */
  data: Prisma.XOR<Prisma.SubmissionCreateInput, Prisma.SubmissionUncheckedCreateInput>
}

/**
 * Submission createMany
 */
export type SubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Submissions.
   */
  data: Prisma.SubmissionCreateManyInput | Prisma.SubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Submission createManyAndReturn
 */
export type SubmissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * The data used to create many Submissions.
   */
  data: Prisma.SubmissionCreateManyInput | Prisma.SubmissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Submission update
 */
export type SubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * The data needed to update a Submission.
   */
  data: Prisma.XOR<Prisma.SubmissionUpdateInput, Prisma.SubmissionUncheckedUpdateInput>
  /**
   * Choose, which Submission to update.
   */
  where: Prisma.SubmissionWhereUniqueInput
}

/**
 * Submission updateMany
 */
export type SubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Submissions.
   */
  data: Prisma.XOR<Prisma.SubmissionUpdateManyMutationInput, Prisma.SubmissionUncheckedUpdateManyInput>
  /**
   * Filter which Submissions to update
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * Limit how many Submissions to update.
   */
  limit?: number
}

/**
 * Submission updateManyAndReturn
 */
export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * The data used to update Submissions.
   */
  data: Prisma.XOR<Prisma.SubmissionUpdateManyMutationInput, Prisma.SubmissionUncheckedUpdateManyInput>
  /**
   * Filter which Submissions to update
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * Limit how many Submissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Submission upsert
 */
export type SubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * The filter to search for the Submission to update in case it exists.
   */
  where: Prisma.SubmissionWhereUniqueInput
  /**
   * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
   */
  create: Prisma.XOR<Prisma.SubmissionCreateInput, Prisma.SubmissionUncheckedCreateInput>
  /**
   * In case the Submission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SubmissionUpdateInput, Prisma.SubmissionUncheckedUpdateInput>
}

/**
 * Submission delete
 */
export type SubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
  /**
   * Filter which Submission to delete.
   */
  where: Prisma.SubmissionWhereUniqueInput
}

/**
 * Submission deleteMany
 */
export type SubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Submissions to delete
   */
  where?: Prisma.SubmissionWhereInput
  /**
   * Limit how many Submissions to delete.
   */
  limit?: number
}

/**
 * Submission.testCases
 */
export type Submission$testCasesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestCaseResult
   */
  select?: Prisma.TestCaseResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestCaseResult
   */
  omit?: Prisma.TestCaseResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestCaseResultInclude<ExtArgs> | null
  where?: Prisma.TestCaseResultWhereInput
  orderBy?: Prisma.TestCaseResultOrderByWithRelationInput | Prisma.TestCaseResultOrderByWithRelationInput[]
  cursor?: Prisma.TestCaseResultWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TestCaseResultScalarFieldEnum | Prisma.TestCaseResultScalarFieldEnum[]
}

/**
 * Submission without action
 */
export type SubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Submission
   */
  select?: Prisma.SubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Submission
   */
  omit?: Prisma.SubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubmissionInclude<ExtArgs> | null
}
